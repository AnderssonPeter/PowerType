<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-read-tree</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-read-tree</refname>
  <refpurpose>Reads tree information into the index</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git read-tree</emphasis> [[-m [--trivial] [--aggressive] | --reset | --prefix=&lt;prefix&gt;]
                [-u | -i]] [--index-output=&lt;file&gt;] [--no-sparse-checkout]
                (--empty | &lt;tree-ish1&gt; [&lt;tree-ish2&gt; [&lt;tree-ish3&gt;]])</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Reads the tree information given by &lt;tree-ish&gt; into the index,
but does not actually <emphasis role="strong">update</emphasis> any of the files it "caches". (see:
<citerefentry>
<refentrytitle>git-checkout-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)</simpara>
<simpara>Optionally, it can merge a tree into the index, perform a
fast-forward (i.e. 2-way) merge, or a 3-way merge, with the <literal>-m</literal>
flag.  When used with <literal>-m</literal>, the <literal>-u</literal> flag causes it to also update
the files in the work tree with the result of the merge.</simpara>
<simpara>Trivial merges are done by <emphasis>git read-tree</emphasis> itself.  Only conflicting paths
will be in unmerged state when <emphasis>git read-tree</emphasis> returns.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-m
</term>
<listitem>
<simpara>
        Perform a merge, not just a read.  The command will
        refuse to run if your index file has unmerged entries,
        indicating that you have not finished previous merge you
        started.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--reset
</term>
<listitem>
<simpara>
        Same as -m, except that unmerged entries are discarded instead
        of failing.  When used with <literal>-u</literal>, updates leading to loss of
        working tree changes or untracked files or directories will not
        abort the operation.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-u
</term>
<listitem>
<simpara>
        After a successful merge, update the files in the work
        tree with the result of the merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-i
</term>
<listitem>
<simpara>
        Usually a merge requires the index file as well as the
        files in the working tree to be up to date with the
        current head commit, in order not to lose local
        changes.  This flag disables the check with the working
        tree and is meant to be used when creating a merge of
        trees that are not directly related to the current
        working tree status into a temporary index file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--dry-run
</term>
<listitem>
<simpara>
        Check if the command would error out, without updating the index
        or the files in the working tree for real.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<listitem>
<simpara>
        Show the progress of checking files out.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--trivial
</term>
<listitem>
<simpara>
        Restrict three-way merge by <emphasis>git read-tree</emphasis> to happen
        only if there is no file-level merging required, instead
        of resolving merge for trivial cases and leaving
        conflicting files unresolved in the index.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--aggressive
</term>
<listitem>
<simpara>
        Usually a three-way merge by <emphasis>git read-tree</emphasis> resolves
        the merge for really trivial cases and leaves other
        cases unresolved in the index, so that porcelains can
        implement different merge policies.  This flag makes the
        command resolve a few more cases internally:
</simpara>
<itemizedlist>
<listitem>
<simpara>
when one side removes a path and the other side leaves the path
  unmodified.  The resolution is to remove that path.
</simpara>
</listitem>
<listitem>
<simpara>
when both sides remove a path.  The resolution is to remove that path.
</simpara>
</listitem>
<listitem>
<simpara>
when both sides add a path identically.  The resolution
  is to add that path.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
--prefix=&lt;prefix&gt;
</term>
<listitem>
<simpara>
        Keep the current index contents, and read the contents
        of the named tree-ish under the directory at <literal>&lt;prefix&gt;</literal>.
        The command will refuse to overwrite entries that already
        existed in the original index file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--index-output=&lt;file&gt;
</term>
<listitem>
<simpara>
        Instead of writing the results out to <literal>$GIT_INDEX_FILE</literal>,
        write the resulting index in the named file.  While the
        command is operating, the original index file is locked
        with the same mechanism as usual.  The file must allow
        to be rename(2)ed into from a temporary file that is
        created next to the usual index file; typically this
        means it needs to be on the same filesystem as the index
        file itself, and you need write permission to the
        directories the index file and index output file are
        located in.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]recurse-submodules
</term>
<listitem>
<simpara>
        Using --recurse-submodules will update the content of all active
        submodules according to the commit recorded in the superproject by
        calling read-tree recursively, also setting the submodules' HEAD to be
        detached at that commit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-sparse-checkout
</term>
<listitem>
<simpara>
        Disable sparse checkout support even if <literal>core.sparseCheckout</literal>
        is true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--empty
</term>
<listitem>
<simpara>
        Instead of reading tree object(s) into the index, just empty
        it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        Quiet, suppress feedback messages.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;tree-ish#&gt;
</term>
<listitem>
<simpara>
        The id of the tree object(s) to be read/merged.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_merging">
<title>MERGING</title>
<simpara>If <literal>-m</literal> is specified, <emphasis>git read-tree</emphasis> can perform 3 kinds of
merge, a single tree merge if only 1 tree is given, a
fast-forward merge with 2 trees, or a 3-way merge if 3 or more trees are
provided.</simpara>
<refsect2 id="_single_tree_merge">
<title>Single Tree Merge</title>
<simpara>If only 1 tree is specified, <emphasis>git read-tree</emphasis> operates as if the user did not
specify <literal>-m</literal>, except that if the original index has an entry for a
given pathname, and the contents of the path match with the tree
being read, the stat info from the index is used. (In other words, the
index&#8217;s stat()s take precedence over the merged tree&#8217;s).</simpara>
<simpara>That means that if you do a <literal>git read-tree -m &lt;newtree&gt;</literal> followed by a
<literal>git checkout-index -f -u -a</literal>, the <emphasis>git checkout-index</emphasis> only checks out
the stuff that really changed.</simpara>
<simpara>This is used to avoid unnecessary false hits when <emphasis>git diff-files</emphasis> is
run after <emphasis>git read-tree</emphasis>.</simpara>
</refsect2>
<refsect2 id="_two_tree_merge">
<title>Two Tree Merge</title>
<simpara>Typically, this is invoked as <literal>git read-tree -m $H $M</literal>, where $H
is the head commit of the current repository, and $M is the head
of a foreign tree, which is simply ahead of $H (i.e. we are in a
fast-forward situation).</simpara>
<simpara>When two trees are specified, the user is telling <emphasis>git read-tree</emphasis>
the following:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
The current index and work tree is derived from $H, but
        the user may have local changes in them since $H.
</simpara>
</listitem>
<listitem>
<simpara>
The user wants to fast-forward to $M.
</simpara>
</listitem>
</orderedlist>
<simpara>In this case, the <literal>git read-tree -m $H $M</literal> command makes sure
that no local change is lost as the result of this "merge".
Here are the "carry forward" rules, where "I" denotes the index,
"clean" means that index and work tree coincide, and "exists"/"nothing"
refer to the presence of a path in the specified commit:</simpara>
<literallayout class="monospaced">        I                   H        M        Result
       -------------------------------------------------------
     0  nothing             nothing  nothing  (does not happen)
     1  nothing             nothing  exists   use M
     2  nothing             exists   nothing  remove path from index
     3  nothing             exists   exists,  use M if "initial checkout",
                                     H == M   keep index otherwise
                                     exists,  fail
                                     H != M

        clean I==H  I==M
       ------------------
     4  yes   N/A   N/A     nothing  nothing  keep index
     5  no    N/A   N/A     nothing  nothing  keep index

     6  yes   N/A   yes     nothing  exists   keep index
     7  no    N/A   yes     nothing  exists   keep index
     8  yes   N/A   no      nothing  exists   fail
     9  no    N/A   no      nothing  exists   fail

     10 yes   yes   N/A     exists   nothing  remove path from index
     11 no    yes   N/A     exists   nothing  fail
     12 yes   no    N/A     exists   nothing  fail
     13 no    no    N/A     exists   nothing  fail

        clean (H==M)
       ------
     14 yes                 exists   exists   keep index
     15 no                  exists   exists   keep index

        clean I==H  I==M (H!=M)
       ------------------
     16 yes   no    no      exists   exists   fail
     17 no    no    no      exists   exists   fail
     18 yes   no    yes     exists   exists   keep index
     19 no    no    yes     exists   exists   keep index
     20 yes   yes   no      exists   exists   use M
     21 no    yes   no      exists   exists   fail</literallayout>
<simpara>In all "keep index" cases, the index entry stays as in the
original index file.  If the entry is not up to date,
<emphasis>git read-tree</emphasis> keeps the copy in the work tree intact when
operating under the -u flag.</simpara>
<simpara>When this form of <emphasis>git read-tree</emphasis> returns successfully, you can
see which of the "local changes" that you made were carried forward by running
<literal>git diff-index --cached $M</literal>.  Note that this does not
necessarily match what <literal>git diff-index --cached $H</literal> would have
produced before such a two tree merge.  This is because of cases
18 and 19 --- if you already had the changes in $M (e.g. maybe
you picked it up via e-mail in a patch form), <literal>git diff-index
--cached $H</literal> would have told you about the change before this
merge, but it would not show in <literal>git diff-index --cached $M</literal>
output after the two-tree merge.</simpara>
<simpara>Case 3 is slightly tricky and needs explanation.  The result from this
rule logically should be to remove the path if the user staged the removal
of the path and then switching to a new branch.  That however will prevent
the initial checkout from happening, so the rule is modified to use M (new
tree) only when the content of the index is empty.  Otherwise the removal
of the path is kept as long as $H and $M are the same.</simpara>
</refsect2>
<refsect2 id="_3_way_merge">
<title>3-Way Merge</title>
<simpara>Each "index" entry has two bits worth of "stage" state. stage 0 is the
normal one, and is the only one you&#8217;d see in any kind of normal use.</simpara>
<simpara>However, when you do <emphasis>git read-tree</emphasis> with three trees, the "stage"
starts out at 1.</simpara>
<simpara>This means that you can do</simpara>
<literallayout class="monospaced">$ git read-tree -m &lt;tree1&gt; &lt;tree2&gt; &lt;tree3&gt;</literallayout><simpara></simpara>
<simpara>and you will end up with an index with all of the &lt;tree1&gt; entries in
"stage1", all of the &lt;tree2&gt; entries in "stage2" and all of the
&lt;tree3&gt; entries in "stage3".  When performing a merge of another
branch into the current branch, we use the common ancestor tree
as &lt;tree1&gt;, the current branch head as &lt;tree2&gt;, and the other
branch head as &lt;tree3&gt;.</simpara>
<simpara>Furthermore, <emphasis>git read-tree</emphasis> has special-case logic that says: if you see
a file that matches in all respects in the following states, it
"collapses" back to "stage0":</simpara>
<itemizedlist>
<listitem>
<simpara>
stage 2 and 3 are the same; take one or the other (it makes no
     difference - the same work has been done on our branch in
     stage 2 and their branch in stage 3)
</simpara>
</listitem>
<listitem>
<simpara>
stage 1 and stage 2 are the same and stage 3 is different; take
     stage 3 (our branch in stage 2 did not do anything since the
     ancestor in stage 1 while their branch in stage 3 worked on
     it)
</simpara>
</listitem>
<listitem>
<simpara>
stage 1 and stage 3 are the same and stage 2 is different take
     stage 2 (we did something while they did nothing)
</simpara>
</listitem>
</itemizedlist>
<simpara>The <emphasis>git write-tree</emphasis> command refuses to write a nonsensical tree, and it
will complain about unmerged entries if it sees a single entry that is not
stage 0.</simpara>
<simpara>OK, this all sounds like a collection of totally nonsensical rules,
but it&#8217;s actually exactly what you want in order to do a fast
merge. The different stages represent the "result tree" (stage 0, aka
"merged"), the original tree (stage 1, aka "orig"), and the two trees
you are trying to merge (stage 2 and 3 respectively).</simpara>
<simpara>The order of stages 1, 2 and 3 (hence the order of three
&lt;tree-ish&gt; command-line arguments) are significant when you
start a 3-way merge with an index file that is already
populated.  Here is an outline of how the algorithm works:</simpara>
<itemizedlist>
<listitem>
<simpara>
if a file exists in identical format in all three trees, it will
  automatically collapse to "merged" state by <emphasis>git read-tree</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
a file that has <emphasis>any</emphasis> difference what-so-ever in the three trees
  will stay as separate entries in the index. It&#8217;s up to "porcelain
  policy" to determine how to remove the non-0 stages, and insert a
  merged version.
</simpara>
</listitem>
<listitem>
<simpara>
the index file saves and restores with all this information, so you
  can merge things incrementally, but as long as it has entries in
  stages 1/2/3 (i.e., "unmerged entries") you can&#8217;t write the result. So
  now the merge algorithm ends up being really simple:
</simpara>
<itemizedlist>
<listitem>
<simpara>
you walk the index in order, and ignore all entries of stage 0,
    since they&#8217;ve already been done.
</simpara>
</listitem>
<listitem>
<simpara>
if you find a "stage1", but no matching "stage2" or "stage3", you
    know it&#8217;s been removed from both trees (it only existed in the
    original tree), and you remove that entry.
</simpara>
</listitem>
<listitem>
<simpara>
if you find a matching "stage2" and "stage3" tree, you remove one
    of them, and turn the other into a "stage0" entry. Remove any
    matching "stage1" entry if it exists too.  .. all the normal
    trivial rules ..
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>You would normally use <emphasis>git merge-index</emphasis> with supplied
<emphasis>git merge-one-file</emphasis> to do this last step.  The script updates
the files in the working tree as it merges each path and at the
end of a successful merge.</simpara>
<simpara>When you start a 3-way merge with an index file that is already
populated, it is assumed that it represents the state of the
files in your work tree, and you can even have files with
changes unrecorded in the index file.  It is further assumed
that this state is "derived" from the stage 2 tree.  The 3-way
merge refuses to run if it finds an entry in the original index
file that does not match stage 2.</simpara>
<simpara>This is done to prevent you from losing your work-in-progress
changes, and mixing your random changes in an unrelated merge
commit.  To illustrate, suppose you start from what has been
committed last to your repository:</simpara>
<literallayout class="monospaced">$ JC=`git rev-parse --verify "HEAD^0"`
$ git checkout-index -f -u -a $JC</literallayout><simpara></simpara>
<simpara>You do random edits, without running <emphasis>git update-index</emphasis>.  And then
you notice that the tip of your "upstream" tree has advanced
since you pulled from him:</simpara>
<literallayout class="monospaced">$ git fetch git://.... linus
$ LT=`git rev-parse FETCH_HEAD`</literallayout><simpara></simpara>
<simpara>Your work tree is still based on your HEAD ($JC), but you have
some edits since.  Three-way merge makes sure that you have not
added or modified index entries since $JC, and if you haven&#8217;t,
then does the right thing.  So with the following sequence:</simpara>
<literallayout class="monospaced">$ git read-tree -m -u `git merge-base $JC $LT` $JC $LT
$ git merge-index git-merge-one-file -a
$ echo "Merge with Linus" | \
  git commit-tree `git write-tree` -p $JC -p $LT</literallayout><simpara></simpara>
<simpara>what you would commit is a pure merge between $JC and $LT without
your work-in-progress changes, and your work tree would be
updated to the result of the merge.</simpara>
<simpara>However, if you have local changes in the working tree that
would be overwritten by this merge, <emphasis>git read-tree</emphasis> will refuse
to run to prevent your changes from being lost.</simpara>
<simpara>In other words, there is no need to worry about what exists only
in the working tree.  When you have local changes in a part of
the project that is not involved in the merge, your changes do
not interfere with the merge, and are kept intact.  When they
<emphasis role="strong">do</emphasis> interfere, the merge does not even start (<emphasis>git read-tree</emphasis>
complains loudly and fails without modifying anything).  In such
a case, you can simply continue doing what you were in the
middle of doing, and when your working tree is ready (i.e. you
have finished your work-in-progress), attempt the merge again.</simpara>
</refsect2>
</refsect1>
<refsect1 id="_sparse_checkout">
<title>SPARSE CHECKOUT</title>
<simpara>"Sparse checkout" allows populating the working directory sparsely.
It uses the skip-worktree bit (see <citerefentry>
<refentrytitle>git-update-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>) to tell
Git whether a file in the working directory is worth looking at.</simpara>
<simpara><emphasis>git read-tree</emphasis> and other merge-based commands (<emphasis>git merge</emphasis>, <emphasis>git
checkout</emphasis>&#8230;) can help maintaining the skip-worktree bitmap and working
directory update. <literal>$GIT_DIR/info/sparse-checkout</literal> is used to
define the skip-worktree reference bitmap. When <emphasis>git read-tree</emphasis> needs
to update the working directory, it resets the skip-worktree bit in the index
based on this file, which uses the same syntax as .gitignore files.
If an entry matches a pattern in this file, skip-worktree will not be
set on that entry. Otherwise, skip-worktree will be set.</simpara>
<simpara>Then it compares the new skip-worktree value with the previous one. If
skip-worktree turns from set to unset, it will add the corresponding
file back. If it turns from unset to set, that file will be removed.</simpara>
<simpara>While <literal>$GIT_DIR/info/sparse-checkout</literal> is usually used to specify what
files are in, you can also specify what files are <emphasis>not</emphasis> in, using
negate patterns. For example, to remove the file <literal>unwanted</literal>:</simpara>
<literallayout class="monospaced">/*
!unwanted</literallayout><simpara></simpara>
<simpara>Another tricky thing is fully repopulating the working directory when you
no longer want sparse checkout. You cannot just disable "sparse
checkout" because skip-worktree bits are still in the index and your working
directory is still sparsely populated. You should re-populate the working
directory with the <literal>$GIT_DIR/info/sparse-checkout</literal> file content as
follows:</simpara>
<literallayout class="monospaced">/*</literallayout><simpara></simpara>
<simpara>Then you can disable sparse checkout. Sparse checkout support in <emphasis>git
read-tree</emphasis> and similar commands is disabled by default. You need to
turn <literal>core.sparseCheckout</literal> on in order to have sparse checkout
support.</simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>git-write-tree</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>; <citerefentry>
<refentrytitle>git-ls-files</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>;
<citerefentry>
<refentrytitle>gitignore</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>; <citerefentry>
<refentrytitle>git-sparse-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>;</simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
