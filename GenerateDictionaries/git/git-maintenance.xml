<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-maintenance</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-maintenance</refname>
  <refpurpose>Run tasks to optimize Git repository data</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git maintenance</emphasis> run [&lt;options&gt;]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Run tasks to optimize Git repository data, speeding up other Git commands
and reducing storage requirements for the repository.</simpara>
<simpara>Git commands that add repository data, such as <literal>git add</literal> or <literal>git fetch</literal>,
are optimized for a responsive user experience. These commands do not take
time to optimize the Git data, since such optimizations scale with the full
size of the repository while these user commands each perform a relatively
small action.</simpara>
<simpara>The <literal>git maintenance</literal> command provides flexibility for how to optimize the
Git repository.</simpara>
</refsect1>
<refsect1 id="_subcommands">
<title>SUBCOMMANDS</title>
<variablelist>
<varlistentry>
<term>
register
</term>
<listitem>
<simpara>
        Initialize Git config values so any scheduled maintenance will
        start running on this repository. This adds the repository to the
        <literal>maintenance.repo</literal> config variable in the current user&#8217;s global
        config and enables some recommended configuration values for
        <literal>maintenance.&lt;task&gt;.schedule</literal>. The tasks that are enabled are safe
        for running in the background without disrupting foreground
        processes.
</simpara>
<simpara>The <literal>register</literal> subcommand will also set the <literal>maintenance.strategy</literal> config
value to <literal>incremental</literal>, if this value is not previously set. The
<literal>incremental</literal> strategy uses the following schedule for each maintenance
task:</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>gc</literal>: disabled.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>commit-graph</literal>: hourly.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>prefetch</literal>: hourly.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>loose-objects</literal>: daily.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>incremental-repack</literal>: daily.
</simpara>
</listitem>
</itemizedlist>
<simpara><literal>git maintenance register</literal> will also disable foreground maintenance by
setting <literal>maintenance.auto = false</literal> in the current repository. This config
setting will remain after a <literal>git maintenance unregister</literal> command.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
run
</term>
<listitem>
<simpara>
        Run one or more maintenance tasks. If one or more <literal>--task</literal> options
        are specified, then those tasks are run in that order. Otherwise,
        the tasks are determined by which <literal>maintenance.&lt;task&gt;.enabled</literal>
        config options are true. By default, only <literal>maintenance.gc.enabled</literal>
        is true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
start
</term>
<listitem>
<simpara>
        Start running maintenance on the current repository. This performs
        the same config updates as the <literal>register</literal> subcommand, then updates
        the background scheduler to run <literal>git maintenance run --scheduled</literal>
        on an hourly basis.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
stop
</term>
<listitem>
<simpara>
        Halt the background maintenance schedule. The current repository
        is not removed from the list of maintained repositories, in case
        the background maintenance is restarted later.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
unregister
</term>
<listitem>
<simpara>
        Remove the current repository from background maintenance. This
        only removes the repository from the configured list. It does not
        stop the background maintenance processes from running.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_tasks">
<title>TASKS</title>
<variablelist>
<varlistentry>
<term>
commit-graph
</term>
<listitem>
<simpara>
        The <literal>commit-graph</literal> job updates the <literal>commit-graph</literal> files incrementally,
        then verifies that the written data is correct. The incremental
        write is safe to run alongside concurrent Git processes since it
        will not expire <literal>.graph</literal> files that were in the previous
        <literal>commit-graph-chain</literal> file. They will be deleted by a later run based
        on the expiration delay.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
prefetch
</term>
<listitem>
<simpara>
        The <literal>prefetch</literal> task updates the object directory with the latest
        objects from all registered remotes. For each remote, a <literal>git fetch</literal>
        command is run. The configured refspec is modified to place all
        requested refs within <literal>refs/prefetch/</literal>. Also, tags are not updated.
</simpara>
<simpara>This is done to avoid disrupting the remote-tracking branches. The end users
expect these refs to stay unmoved unless they initiate a fetch.  With prefetch
task, however, the objects necessary to complete a later real fetch would
already be obtained, so the real fetch would go faster.  In the ideal case,
it will just become an update to a bunch of remote-tracking branches without
any object transfer.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc
</term>
<listitem>
<simpara>
        Clean up unnecessary files and optimize the local repository. "GC"
        stands for "garbage collection," but this task performs many
        smaller tasks. This task can be expensive for large repositories,
        as it repacks all Git objects into a single pack-file. It can also
        be disruptive in some situations, as it deletes stale data. See
        <citerefentry>
<refentrytitle>git-gc</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more details on garbage collection in Git.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
loose-objects
</term>
<listitem>
<simpara>
        The <literal>loose-objects</literal> job cleans up loose objects and places them into
        pack-files. In order to prevent race conditions with concurrent Git
        commands, it follows a two-step process. First, it deletes any loose
        objects that already exist in a pack-file; concurrent Git processes
        will examine the pack-file for the object data instead of the loose
        object. Second, it creates a new pack-file (starting with "loose-")
        containing a batch of loose objects. The batch size is limited to 50
        thousand objects to prevent the job from taking too long on a
        repository with many loose objects. The <literal>gc</literal> task writes unreachable
        objects as loose objects to be cleaned up by a later step only if
        they are not re-added to a pack-file; for this reason it is not
        advisable to enable both the <literal>loose-objects</literal> and <literal>gc</literal> tasks at the
        same time.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
incremental-repack
</term>
<listitem>
<simpara>
        The <literal>incremental-repack</literal> job repacks the object directory
        using the <literal>multi-pack-index</literal> feature. In order to prevent race
        conditions with concurrent Git commands, it follows a two-step
        process. First, it calls <literal>git multi-pack-index expire</literal> to delete
        pack-files unreferenced by the <literal>multi-pack-index</literal> file. Second, it
        calls <literal>git multi-pack-index repack</literal> to select several small
        pack-files and repack them into a bigger one, and then update the
        <literal>multi-pack-index</literal> entries that refer to the small pack-files to
        refer to the new pack-file. This prepares those small pack-files
        for deletion upon the next run of <literal>git multi-pack-index expire</literal>.
        The selection of the small pack-files is such that the expected
        size of the big pack-file is at least the batch size; see the
        <literal>--batch-size</literal> option for the <literal>repack</literal> subcommand in
        <citerefentry>
<refentrytitle>git-multi-pack-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. The default batch-size is zero,
        which is a special case that attempts to repack all pack-files
        into a single pack-file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack-refs
</term>
<listitem>
<simpara>
        The <literal>pack-refs</literal> task collects the loose reference files and
        collects them into a single file. This speeds up operations that
        need to iterate across many references. See <citerefentry>
<refentrytitle>git-pack-refs</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        for more information.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--auto
</term>
<listitem>
<simpara>
        When combined with the <literal>run</literal> subcommand, run maintenance tasks
        only if certain thresholds are met. For example, the <literal>gc</literal> task
        runs when the number of loose objects exceeds the number stored
        in the <literal>gc.auto</literal> config setting, or when the number of pack-files
        exceeds the <literal>gc.autoPackLimit</literal> config setting. Not compatible with
        the <literal>--schedule</literal> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--schedule
</term>
<listitem>
<simpara>
        When combined with the <literal>run</literal> subcommand, run maintenance tasks
        only if certain time conditions are met, as specified by the
        <literal>maintenance.&lt;task&gt;.schedule</literal> config value for each <literal>&lt;task&gt;</literal>.
        This config value specifies a number of seconds since the last
        time that task ran, according to the <literal>maintenance.&lt;task&gt;.lastRun</literal>
        config value. The tasks that are tested are those provided by
        the <literal>--task=&lt;task&gt;</literal> option(s) or those with
        <literal>maintenance.&lt;task&gt;.enabled</literal> set to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--quiet
</term>
<listitem>
<simpara>
        Do not report progress or other information over <literal>stderr</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--task=&lt;task&gt;
</term>
<listitem>
<simpara>
        If this option is specified one or more times, then only run the
        specified tasks in the specified order. If no <literal>--task=&lt;task&gt;</literal>
        arguments are specified, then only the tasks with
        <literal>maintenance.&lt;task&gt;.enabled</literal> configured as <literal>true</literal> are considered.
        See the <emphasis>TASKS</emphasis> section for the list of accepted <literal>&lt;task&gt;</literal> values.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--scheduler=auto|crontab|systemd-timer|launchctl|schtasks
</term>
<listitem>
<simpara>
        When combined with the <literal>start</literal> subcommand, specify the scheduler
        for running the hourly, daily and weekly executions of
        <literal>git maintenance run</literal>.
        Possible values for <literal>&lt;scheduler&gt;</literal> are <literal>auto</literal>, <literal>crontab</literal>
        (POSIX), <literal>systemd-timer</literal> (Linux), <literal>launchctl</literal> (macOS), and
        <literal>schtasks</literal> (Windows). When <literal>auto</literal> is specified, the
        appropriate platform-specific scheduler is used; on Linux,
        <literal>systemd-timer</literal> is used if available, otherwise
        <literal>crontab</literal>. Default is <literal>auto</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_troubleshooting">
<title>TROUBLESHOOTING</title>
<simpara>The <literal>git maintenance</literal> command is designed to simplify the repository
maintenance patterns while minimizing user wait time during Git commands.
A variety of configuration options are available to allow customizing this
process. The default maintenance options focus on operations that complete
quickly, even on large repositories.</simpara>
<simpara>Users may find some cases where scheduled maintenance tasks do not run as
frequently as intended. Each <literal>git maintenance run</literal> command takes a lock on
the repository&#8217;s object database, and this prevents other concurrent
<literal>git maintenance run</literal> commands from running on the same repository. Without
this safeguard, competing processes could leave the repository in an
unpredictable state.</simpara>
<simpara>The background maintenance schedule runs <literal>git maintenance run</literal> processes
on an hourly basis. Each run executes the "hourly" tasks. At midnight,
that process also executes the "daily" tasks. At midnight on the first day
of the week, that process also executes the "weekly" tasks. A single
process iterates over each registered repository, performing the scheduled
tasks for that frequency. Depending on the number of registered
repositories and their sizes, this process may take longer than an hour.
In this case, multiple <literal>git maintenance run</literal> commands may run on the same
repository at the same time, colliding on the object database lock. This
results in one of the two tasks not running.</simpara>
<simpara>If you find that some maintenance windows are taking longer than one hour
to complete, then consider reducing the complexity of your maintenance
tasks. For example, the <literal>gc</literal> task is much slower than the
<literal>incremental-repack</literal> task. However, this comes at a cost of a slightly
larger object database. Consider moving more expensive tasks to be run
less frequently.</simpara>
<simpara>Expert users may consider scheduling their own maintenance tasks using a
different schedule than is available through <literal>git maintenance start</literal> and
Git configuration options. These users should be aware of the object
database lock and how concurrent <literal>git maintenance run</literal> commands behave.
Further, the <literal>git gc</literal> command should not be combined with
<literal>git maintenance run</literal> commands. <literal>git gc</literal> modifies the object database
but does not take the lock in the same way as <literal>git maintenance run</literal>. If
possible, use <literal>git maintenance run --task=gc</literal> instead of <literal>git gc</literal>.</simpara>
<simpara>The following sections describe the mechanisms put in place to run
background maintenance by <literal>git maintenance start</literal> and how to customize
them.</simpara>
</refsect1>
<refsect1 id="_background_maintenance_on_posix_systems">
<title>BACKGROUND MAINTENANCE ON POSIX SYSTEMS</title>
<simpara>The standard mechanism for scheduling background tasks on POSIX systems
is cron(8). This tool executes commands based on a given schedule. The
current list of user-scheduled tasks can be found by running <literal>crontab -l</literal>.
The schedule written by <literal>git maintenance start</literal> is similar to this:</simpara>
<literallayout class="monospaced"># BEGIN GIT MAINTENANCE SCHEDULE
# The following schedule was created by Git
# Any edits made in this region might be
# replaced in the future by a Git command.

0 1-23 * * * "/&lt;path&gt;/git" --exec-path="/&lt;path&gt;" for-each-repo --config=maintenance.repo maintenance run --schedule=hourly
0 0 * * 1-6 "/&lt;path&gt;/git" --exec-path="/&lt;path&gt;" for-each-repo --config=maintenance.repo maintenance run --schedule=daily
0 0 * * 0 "/&lt;path&gt;/git" --exec-path="/&lt;path&gt;" for-each-repo --config=maintenance.repo maintenance run --schedule=weekly

# END GIT MAINTENANCE SCHEDULE</literallayout><simpara></simpara>
<simpara>The comments are used as a region to mark the schedule as written by Git.
Any modifications within this region will be completely deleted by
<literal>git maintenance stop</literal> or overwritten by <literal>git maintenance start</literal>.</simpara>
<simpara>The <literal>crontab</literal> entry specifies the full path of the <literal>git</literal> executable to
ensure that the executed <literal>git</literal> command is the same one with which
<literal>git maintenance start</literal> was issued independent of <literal>PATH</literal>. If the same user
runs <literal>git maintenance start</literal> with multiple Git executables, then only the
latest executable is used.</simpara>
<simpara>These commands use <literal>git for-each-repo --config=maintenance.repo</literal> to run
<literal>git maintenance run --schedule=&lt;frequency&gt;</literal> on each repository listed in
the multi-valued <literal>maintenance.repo</literal> config option. These are typically
loaded from the user-specific global config. The <literal>git maintenance</literal> process
then determines which maintenance tasks are configured to run on each
repository with each <literal>&lt;frequency&gt;</literal> using the <literal>maintenance.&lt;task&gt;.schedule</literal>
config options. These values are loaded from the global or repository
config values.</simpara>
<simpara>If the config values are insufficient to achieve your desired background
maintenance schedule, then you can create your own schedule. If you run
<literal>crontab -e</literal>, then an editor will load with your user-specific <literal>cron</literal>
schedule. In that editor, you can add your own schedule lines. You could
start by adapting the default schedule listed earlier, or you could read
the crontab(5) documentation for advanced scheduling techniques. Please
do use the full path and <literal>--exec-path</literal> techniques from the default
schedule to ensure you are executing the correct binaries in your
schedule.</simpara>
</refsect1>
<refsect1 id="_background_maintenance_on_linux_systemd_systems">
<title>BACKGROUND MAINTENANCE ON LINUX SYSTEMD SYSTEMS</title>
<simpara>While Linux supports <literal>cron</literal>, depending on the distribution, <literal>cron</literal> may
be an optional package not necessarily installed. On modern Linux
distributions, systemd timers are superseding it.</simpara>
<simpara>If user systemd timers are available, they will be used as a replacement
of <literal>cron</literal>.</simpara>
<simpara>In this case, <literal>git maintenance start</literal> will create user systemd timer units
and start the timers. The current list of user-scheduled tasks can be found
by running <literal>systemctl --user list-timers</literal>. The timers written by <literal>git
maintenance start</literal> are similar to this:</simpara>
<literallayout class="monospaced">$ systemctl --user list-timers
NEXT                         LEFT          LAST                         PASSED     UNIT                         ACTIVATES
Thu 2021-04-29 19:00:00 CEST 42min left    Thu 2021-04-29 18:00:11 CEST 17min ago  git-maintenance@hourly.timer git-maintenance@hourly.service
Fri 2021-04-30 00:00:00 CEST 5h 42min left Thu 2021-04-29 00:00:11 CEST 18h ago    git-maintenance@daily.timer  git-maintenance@daily.service
Mon 2021-05-03 00:00:00 CEST 3 days left   Mon 2021-04-26 00:00:11 CEST 3 days ago git-maintenance@weekly.timer git-maintenance@weekly.service</literallayout><simpara></simpara>
<simpara>One timer is registered for each <literal>--schedule=&lt;frequency&gt;</literal> option.</simpara>
<simpara>The definition of the systemd units can be inspected in the following files:</simpara>
<literallayout class="monospaced">~/.config/systemd/user/git-maintenance@.timer
~/.config/systemd/user/git-maintenance@.service
~/.config/systemd/user/timers.target.wants/git-maintenance@hourly.timer
~/.config/systemd/user/timers.target.wants/git-maintenance@daily.timer
~/.config/systemd/user/timers.target.wants/git-maintenance@weekly.timer</literallayout><simpara></simpara>
<simpara><literal>git maintenance start</literal> will overwrite these files and start the timer
again with <literal>systemctl --user</literal>, so any customization should be done by
creating a drop-in file, i.e. a <literal>.conf</literal> suffixed file in the
<literal>~/.config/systemd/user/git-maintenance@.service.d</literal> directory.</simpara>
<simpara><literal>git maintenance stop</literal> will stop the user systemd timers and delete
the above mentioned files.</simpara>
<simpara>For more details, see <literal>systemd.timer(5)</literal>.</simpara>
</refsect1>
<refsect1 id="_background_maintenance_on_macos_systems">
<title>BACKGROUND MAINTENANCE ON MACOS SYSTEMS</title>
<simpara>While macOS technically supports <literal>cron</literal>, using <literal>crontab -e</literal> requires
elevated privileges and the executed process does not have a full user
context. Without a full user context, Git and its credential helpers
cannot access stored credentials, so some maintenance tasks are not
functional.</simpara>
<simpara>Instead, <literal>git maintenance start</literal> interacts with the <literal>launchctl</literal> tool,
which is the recommended way to schedule timed jobs in macOS. Scheduling
maintenance through <literal>git maintenance (start|stop)</literal> requires some
<literal>launchctl</literal> features available only in macOS 10.11 or later.</simpara>
<simpara>Your user-specific scheduled tasks are stored as XML-formatted <literal>.plist</literal>
files in <literal>~/Library/LaunchAgents/</literal>. You can see the currently-registered
tasks using the following command:</simpara>
<literallayout class="monospaced">$ ls ~/Library/LaunchAgents/org.git-scm.git*
org.git-scm.git.daily.plist
org.git-scm.git.hourly.plist
org.git-scm.git.weekly.plist</literallayout><simpara></simpara>
<simpara>One task is registered for each <literal>--schedule=&lt;frequency&gt;</literal> option. To
inspect how the XML format describes each schedule, open one of these
<literal>.plist</literal> files in an editor and inspect the <literal>&lt;array&gt;</literal> element following
the <literal>&lt;key&gt;StartCalendarInterval&lt;/key&gt;</literal> element.</simpara>
<simpara><literal>git maintenance start</literal> will overwrite these files and register the
tasks again with <literal>launchctl</literal>, so any customizations should be done by
creating your own <literal>.plist</literal> files with distinct names. Similarly, the
<literal>git maintenance stop</literal> command will unregister the tasks with <literal>launchctl</literal>
and delete the <literal>.plist</literal> files.</simpara>
<simpara>To create more advanced customizations to your background tasks, see
launchctl.plist(5) for more information.</simpara>
</refsect1>
<refsect1 id="_background_maintenance_on_windows_systems">
<title>BACKGROUND MAINTENANCE ON WINDOWS SYSTEMS</title>
<simpara>Windows does not support <literal>cron</literal> and instead has its own system for
scheduling background tasks. The <literal>git maintenance start</literal> command uses
the <literal>schtasks</literal> command to submit tasks to this system. You can inspect
all background tasks using the Task Scheduler application. The tasks
added by Git have names of the form <literal>Git Maintenance (&lt;frequency&gt;)</literal>.
The Task Scheduler GUI has ways to inspect these tasks, but you can also
export the tasks to XML files and view the details there.</simpara>
<simpara>Note that since Git is a console application, these background tasks
create a console window visible to the current user. This can be changed
manually by selecting the "Run whether user is logged in or not" option
in Task Scheduler. This change requires a password input, which is why
<literal>git maintenance start</literal> does not select it by default.</simpara>
<simpara>If you want to customize the background tasks, please rename the tasks
so future calls to <literal>git maintenance (start|stop)</literal> do not overwrite your
custom tasks.</simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
