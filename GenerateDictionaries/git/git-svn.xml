<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-svn</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-svn</refname>
  <refpurpose>Bidirectional operation between a Subversion repository and Git</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git svn</emphasis> &lt;command&gt; [&lt;options&gt;] [&lt;arguments&gt;]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara><emphasis>git svn</emphasis> is a simple conduit for changesets between Subversion and Git.
It provides a bidirectional flow of changes between a Subversion and a Git
repository.</simpara>
<simpara><emphasis>git svn</emphasis> can track a standard Subversion repository,
following the common "trunk/branches/tags" layout, with the --stdlayout option.
It can also follow branches and tags in any layout with the -T/-t/-b options
(see options to <emphasis>init</emphasis> below, and also the <emphasis>clone</emphasis> command).</simpara>
<simpara>Once tracking a Subversion repository (with any of the above methods), the Git
repository can be updated from Subversion by the <emphasis>fetch</emphasis> command and
Subversion updated from Git by the <emphasis>dcommit</emphasis> command.</simpara>
</refsect1>
<refsect1 id="_commands">
<title>COMMANDS</title>
<variablelist>
<varlistentry>
<term>
<emphasis>init</emphasis>
</term>
<listitem>
<simpara>
        Initializes an empty Git repository with additional
        metadata directories for <emphasis>git svn</emphasis>.  The Subversion URL
        may be specified as a command-line argument, or as full
        URL arguments to -T/-t/-b.  Optionally, the target
        directory to operate on can be specified as a second
        argument.  Normally this command initializes the current
        directory.
</simpara>
<variablelist>
<varlistentry>
<term>
-T&lt;trunk_subdir&gt;
</term>
<term>
--trunk=&lt;trunk_subdir&gt;
</term>
<term>
-t&lt;tags_subdir&gt;
</term>
<term>
--tags=&lt;tags_subdir&gt;
</term>
<term>
-b&lt;branches_subdir&gt;
</term>
<term>
--branches=&lt;branches_subdir&gt;
</term>
<term>
-s
</term>
<term>
--stdlayout
</term>
<listitem>
<simpara>
        These are optional command-line options for init.  Each of
        these flags can point to a relative repository path
        (--tags=project/tags) or a full url
        (--tags=https://foo.org/project/tags).
        You can specify more than one --tags and/or --branches options, in case
        your Subversion repository places tags or branches under multiple paths.
        The option --stdlayout is
        a shorthand way of setting trunk,tags,branches as the relative paths,
        which is the Subversion default. If any of the other options are given
        as well, they take precedence.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-metadata
</term>
<listitem>
<simpara>
        Set the <emphasis>noMetadata</emphasis> option in the [svn-remote] config.
        This option is not recommended, please read the <emphasis>svn.noMetadata</emphasis>
        section of this manpage before using this option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--use-svm-props
</term>
<listitem>
<simpara>
        Set the <emphasis>useSvmProps</emphasis> option in the [svn-remote] config.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--use-svnsync-props
</term>
<listitem>
<simpara>
        Set the <emphasis>useSvnsyncProps</emphasis> option in the [svn-remote] config.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--rewrite-root=&lt;URL&gt;
</term>
<listitem>
<simpara>
        Set the <emphasis>rewriteRoot</emphasis> option in the [svn-remote] config.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--rewrite-uuid=&lt;UUID&gt;
</term>
<listitem>
<simpara>
        Set the <emphasis>rewriteUUID</emphasis> option in the [svn-remote] config.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--username=&lt;user&gt;
</term>
<listitem>
<simpara>
        For transports that SVN handles authentication for (http,
        https, and plain svn), specify the username.  For other
        transports (e.g. <literal>svn+ssh://</literal>), you must include the username in
        the URL, e.g. <literal>svn+ssh://foo@svn.bar.com/project</literal>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--prefix=&lt;prefix&gt;
</term>
<listitem>
<simpara>
        This allows one to specify a prefix which is prepended
        to the names of remotes if trunk/branches/tags are
        specified.  The prefix does not automatically include a
        trailing slash, so be sure you include one in the
        argument if that is what you want.  If --branches/-b is
        specified, the prefix must include a trailing slash.
        Setting a prefix (with a trailing slash) is strongly
        encouraged in any case, as your SVN-tracking refs will
        then be located at "refs/remotes/$prefix/<emphasis role="strong">", which is
        compatible with Git&#8217;s own remote-tracking ref layout
        (refs/remotes/$remote/</emphasis>). Setting a prefix is also useful
        if you wish to track multiple projects that share a common
        repository.
        By default, the prefix is set to <emphasis>origin/</emphasis>.
</simpara>
<note><simpara>Before Git v2.0, the default prefix was "" (no prefix). This
meant that SVN-tracking refs were put at "refs/remotes/*", which is
incompatible with how Git&#8217;s own remote-tracking refs are organized.
If you still want the old default, you can get it by passing
<literal>--prefix ""</literal> on the command line (<literal>--prefix=""</literal> may not work if
your Perl&#8217;s Getopt::Long is &lt; v2.37).</simpara></note>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignore-refs=&lt;regex&gt;
</term>
<listitem>
<simpara>
        When passed to <emphasis>init</emphasis> or <emphasis>clone</emphasis> this regular expression will
        be preserved as a config key.  See <emphasis>fetch</emphasis> for a description
        of <literal>--ignore-refs</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignore-paths=&lt;regex&gt;
</term>
<listitem>
<simpara>
        When passed to <emphasis>init</emphasis> or <emphasis>clone</emphasis> this regular expression will
        be preserved as a config key.  See <emphasis>fetch</emphasis> for a description
        of <literal>--ignore-paths</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--include-paths=&lt;regex&gt;
</term>
<listitem>
<simpara>
        When passed to <emphasis>init</emphasis> or <emphasis>clone</emphasis> this regular expression will
        be preserved as a config key.  See <emphasis>fetch</emphasis> for a description
        of <literal>--include-paths</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-minimize-url
</term>
<listitem>
<simpara>
        When tracking multiple directories (using --stdlayout,
        --branches, or --tags options), git svn will attempt to connect
        to the root (or highest allowed level) of the Subversion
        repository.  This default allows better tracking of history if
        entire projects are moved within a repository, but may cause
        issues on repositories where read access restrictions are in
        place.  Passing <literal>--no-minimize-url</literal> will allow git svn to
        accept URLs as-is without attempting to connect to a higher
        level directory.  This option is off by default when only
        one URL/branch is tracked (it would do little good).
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>fetch</emphasis>
</term>
<listitem>
<simpara>
        Fetch unfetched revisions from the Subversion remote we are
        tracking.  The name of the [svn-remote "&#8230;"] section in the
        $GIT_DIR/config file may be specified as an optional
        command-line argument.
</simpara>
<simpara>This automatically updates the rev_map if needed (see
<emphasis>$GIT_DIR/svn/**/.rev_map.*</emphasis> in the FILES section below for details).</simpara>
<variablelist>
<varlistentry>
<term>
--localtime
</term>
<listitem>
<simpara>
        Store Git commit times in the local time zone instead of UTC.  This
        makes <emphasis>git log</emphasis> (even without --date=local) show the same times
        that <literal>svn log</literal> would in the local time zone.
</simpara>
<simpara>This doesn&#8217;t interfere with interoperating with the Subversion
repository you cloned from, but if you wish for your local Git
repository to be able to interoperate with someone else&#8217;s local Git
repository, either don&#8217;t use this option or you should both use it in
the same local time zone.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--parent
</term>
<listitem>
<simpara>
        Fetch only from the SVN parent of the current HEAD.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignore-refs=&lt;regex&gt;
</term>
<listitem>
<simpara>
        Ignore refs for branches or tags matching the Perl regular
        expression. A "negative look-ahead assertion" like
        <literal>^refs/remotes/origin/(?!tags/wanted-tag|wanted-branch).*$</literal>
        can be used to allow only certain refs.
</simpara>
<literallayout>config key: svn-remote.&lt;name&gt;.ignore-refs</literallayout>
<simpara></simpara>
<simpara>If the ignore-refs configuration key is set, and the command-line
option is also given, both regular expressions will be used.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignore-paths=&lt;regex&gt;
</term>
<listitem>
<simpara>
        This allows one to specify a Perl regular expression that will
        cause skipping of all matching paths from checkout from SVN.
        The <literal>--ignore-paths</literal> option should match for every <emphasis>fetch</emphasis>
        (including automatic fetches due to <emphasis>clone</emphasis>, <emphasis>dcommit</emphasis>,
        <emphasis>rebase</emphasis>, etc) on a given repository.
</simpara>
<literallayout>config key: svn-remote.&lt;name&gt;.ignore-paths</literallayout>
<simpara></simpara>
<simpara>If the ignore-paths configuration key is set, and the command-line
option is also given, both regular expressions will be used.</simpara>
<simpara>Examples:</simpara>
<variablelist>
<varlistentry>
<term>
Skip "doc*" directory for every fetch
</term>
<listitem>
<literallayout class="monospaced">--ignore-paths="^doc"</literallayout><simpara></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Skip "branches" and "tags" of first level directories
</term>
<listitem>
<literallayout class="monospaced">--ignore-paths="^[^/]+/(?:branches|tags)"</literallayout><simpara></simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
--include-paths=&lt;regex&gt;
</term>
<listitem>
<simpara>
        This allows one to specify a Perl regular expression that will
        cause the inclusion of only matching paths from checkout from SVN.
        The <literal>--include-paths</literal> option should match for every <emphasis>fetch</emphasis>
        (including automatic fetches due to <emphasis>clone</emphasis>, <emphasis>dcommit</emphasis>,
        <emphasis>rebase</emphasis>, etc) on a given repository. <literal>--ignore-paths</literal> takes
        precedence over <literal>--include-paths</literal>.
</simpara>
<literallayout>config key: svn-remote.&lt;name&gt;.include-paths</literallayout>
<simpara></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--log-window-size=&lt;n&gt;
</term>
<listitem>
<simpara>
        Fetch &lt;n&gt; log entries per request when scanning Subversion history.
        The default is 100. For very large Subversion repositories, larger
        values may be needed for <emphasis>clone</emphasis>/<emphasis>fetch</emphasis> to complete in reasonable
        time. But overly large values may lead to higher memory usage and
        request timeouts.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>clone</emphasis>
</term>
<listitem>
<simpara>
        Runs <emphasis>init</emphasis> and <emphasis>fetch</emphasis>.  It will automatically create a
        directory based on the basename of the URL passed to it;
        or if a second argument is passed; it will create a directory
        and work within that.  It accepts all arguments that the
        <emphasis>init</emphasis> and <emphasis>fetch</emphasis> commands accept; with the exception of
        <literal>--fetch-all</literal> and <literal>--parent</literal>.  After a repository is cloned,
        the <emphasis>fetch</emphasis> command will be able to update revisions without
        affecting the working tree; and the <emphasis>rebase</emphasis> command will be
        able to update the working tree with the latest changes.
</simpara>
<variablelist>
<varlistentry>
<term>
--preserve-empty-dirs
</term>
<listitem>
<simpara>
        Create a placeholder file in the local Git repository for each
        empty directory fetched from Subversion.  This includes directories
        that become empty by removing all entries in the Subversion
        repository (but not the directory itself).  The placeholder files
        are also tracked and removed when no longer necessary.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--placeholder-filename=&lt;filename&gt;
</term>
<listitem>
<simpara>
        Set the name of placeholder files created by --preserve-empty-dirs.
        Default: ".gitignore"
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>rebase</emphasis>
</term>
<listitem>
<simpara>
        This fetches revisions from the SVN parent of the current HEAD
        and rebases the current (uncommitted to SVN) work against it.
</simpara>
<simpara>This works similarly to <literal>svn update</literal> or <emphasis>git pull</emphasis> except that
it preserves linear history with <emphasis>git rebase</emphasis> instead of
<emphasis>git merge</emphasis> for ease of dcommitting with <emphasis>git svn</emphasis>.</simpara>
<simpara>This accepts all options that <emphasis>git svn fetch</emphasis> and <emphasis>git rebase</emphasis>
accept.  However, <literal>--fetch-all</literal> only fetches from the current
[svn-remote], and not all [svn-remote] definitions.</simpara>
<simpara>Like <emphasis>git rebase</emphasis>; this requires that the working tree be clean
and have no uncommitted changes.</simpara>
<simpara>This automatically updates the rev_map if needed (see
<emphasis>$GIT_DIR/svn/**/.rev_map.*</emphasis> in the FILES section below for details).</simpara>
<variablelist>
<varlistentry>
<term>
-l
</term>
<term>
--local
</term>
<listitem>
<simpara>
        Do not fetch remotely; only run <emphasis>git rebase</emphasis> against the
        last fetched commit from the upstream SVN.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>dcommit</emphasis>
</term>
<listitem>
<simpara>
        Commit each diff from the current branch directly to the SVN
        repository, and then rebase or reset (depending on whether or
        not there is a diff between SVN and head).  This will create
        a revision in SVN for each commit in Git.
</simpara>
<simpara>When an optional Git branch name (or a Git commit object name)
is specified as an argument, the subcommand works on the specified
branch, not on the current branch.</simpara>
<simpara>Use of <emphasis>dcommit</emphasis> is preferred to <emphasis>set-tree</emphasis> (below).</simpara>
<variablelist>
<varlistentry>
<term>
--no-rebase
</term>
<listitem>
<simpara>
        After committing, do not rebase or reset.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--commit-url &lt;URL&gt;
</term>
<listitem>
<simpara>
        Commit to this SVN URL (the full path).  This is intended to
        allow existing <emphasis>git svn</emphasis> repositories created with one transport
        method (e.g. <literal>svn://</literal> or <literal>http://</literal> for anonymous read) to be
        reused if a user is later given access to an alternate transport
        method (e.g. <literal>svn+ssh://</literal> or <literal>https://</literal>) for commit.
</simpara>
<literallayout>config key: svn-remote.&lt;name&gt;.commiturl
config key: svn.commiturl (overwrites all svn-remote.&lt;name&gt;.commiturl options)</literallayout>
<simpara></simpara>
<simpara>Note that the SVN URL of the commiturl config key includes the SVN branch.
If you rather want to set the commit URL for an entire SVN repository use
svn-remote.&lt;name&gt;.pushurl instead.</simpara>
<simpara>Using this option for any other purpose (don&#8217;t ask) is very strongly
discouraged.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--mergeinfo=&lt;mergeinfo&gt;
</term>
<listitem>
<simpara>
        Add the given merge information during the dcommit
        (e.g. <literal>--mergeinfo="/branches/foo:1-10"</literal>). All svn server versions can
        store this information (as a property), and svn clients starting from
        version 1.5 can make use of it. To specify merge information from multiple
        branches, use a single space character between the branches
        (<literal>--mergeinfo="/branches/foo:1-10 /branches/bar:3,5-6,8"</literal>)
</simpara>
<literallayout>config key: svn.pushmergeinfo</literallayout>
<simpara></simpara>
<simpara>This option will cause git-svn to attempt to automatically populate the
svn:mergeinfo property in the SVN repository when possible. Currently, this can
only be done when dcommitting non-fast-forward merges where all parents but the
first have already been pushed into SVN.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--interactive
</term>
<listitem>
<simpara>
        Ask the user to confirm that a patch set should actually be sent to SVN.
        For each patch, one may answer "yes" (accept this patch), "no" (discard this
        patch), "all" (accept all patches), or "quit".
</simpara>
<simpara><emphasis>git svn dcommit</emphasis> returns immediately if answer is "no" or "quit", without
committing anything to SVN.</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>branch</emphasis>
</term>
<listitem>
<simpara>
        Create a branch in the SVN repository.
</simpara>
<variablelist>
<varlistentry>
<term>
-m
</term>
<term>
--message
</term>
<listitem>
<simpara>
        Allows to specify the commit message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-t
</term>
<term>
--tag
</term>
<listitem>
<simpara>
        Create a tag by using the tags_subdir instead of the branches_subdir
        specified during git svn init.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-d&lt;path&gt;
</term>
<term>
--destination=&lt;path&gt;
</term>
<listitem>
<simpara>
        If more than one --branches (or --tags) option was given to the <emphasis>init</emphasis>
        or <emphasis>clone</emphasis> command, you must provide the location of the branch (or
        tag) you wish to create in the SVN repository.  &lt;path&gt; specifies which
        path to use to create the branch or tag and should match the pattern
        on the left-hand side of one of the configured branches or tags
        refspecs.  You can see these refspecs with the commands
</simpara>
<literallayout class="monospaced">git config --get-all svn-remote.&lt;name&gt;.branches
git config --get-all svn-remote.&lt;name&gt;.tags</literallayout>
<simpara>where &lt;name&gt; is the name of the SVN repository as specified by the -R option to
<emphasis>init</emphasis> (or "svn" by default).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--username
</term>
<listitem>
<simpara>
        Specify the SVN username to perform the commit as.  This option overrides
        the <emphasis>username</emphasis> configuration property.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--commit-url
</term>
<listitem>
<simpara>
        Use the specified URL to connect to the destination Subversion
        repository.  This is useful in cases where the source SVN
        repository is read-only.  This option overrides configuration
        property <emphasis>commiturl</emphasis>.
</simpara>
<literallayout class="monospaced">git config --get-all svn-remote.&lt;name&gt;.commiturl</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
--parents
</term>
<listitem>
<simpara>
        Create parent folders. This parameter is equivalent to the parameter
        --parents on svn cp commands and is useful for non-standard repository
        layouts.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>tag</emphasis>
</term>
<listitem>
<simpara>
        Create a tag in the SVN repository. This is a shorthand for
        <emphasis>branch -t</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>log</emphasis>
</term>
<listitem>
<simpara>
        This should make it easy to look up svn log messages when svn
        users refer to -r/--revision numbers.
</simpara>
<simpara>The following features from &#8216;svn log&#8217; are supported:</simpara>
<variablelist>
<varlistentry>
<term>
-r &lt;n&gt;[:&lt;n&gt;]
</term>
<term>
--revision=&lt;n&gt;[:&lt;n&gt;]
</term>
<listitem>
<simpara>
        is supported, non-numeric args are not:
        HEAD, NEXT, BASE, PREV, etc &#8230;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        it&#8217;s not completely compatible with the --verbose
        output in svn log, but reasonably close.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--limit=&lt;n&gt;
</term>
<listitem>
<simpara>
        is NOT the same as --max-count, doesn&#8217;t count
        merged/excluded commits
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--incremental
</term>
<listitem>
<simpara>
        supported
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>New features:</simpara>
<variablelist>
<varlistentry>
<term>
--show-commit
</term>
<listitem>
<simpara>
        shows the Git commit sha1, as well
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--oneline
</term>
<listitem>
<simpara>
        our version of --pretty=oneline
</simpara>
</listitem>
</varlistentry>
</variablelist>
<note><simpara>SVN itself only stores times in UTC and nothing else. The regular svn
client converts the UTC time to the local time (or based on the TZ=
environment). This command has the same behaviour.</simpara></note>
<simpara>Any other arguments are passed directly to <emphasis>git log</emphasis></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>blame</emphasis>
</term>
<listitem>
<simpara>
        Show what revision and author last modified each line of a file. The
        output of this mode is format-compatible with the output of
        &#8216;svn blame&#8217; by default. Like the SVN blame command,
        local uncommitted changes in the working tree are ignored;
        the version of the file in the HEAD revision is annotated. Unknown
        arguments are passed directly to <emphasis>git blame</emphasis>.
</simpara>
<variablelist>
<varlistentry>
<term>
--git-format
</term>
<listitem>
<simpara>
        Produce output in the same format as <emphasis>git blame</emphasis>, but with
        SVN revision numbers instead of Git commit hashes. In this mode,
        changes that haven&#8217;t been committed to SVN (including local
        working-copy edits) are shown as revision 0.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>find-rev</emphasis>
</term>
<listitem>
<simpara>
        When given an SVN revision number of the form <emphasis>rN</emphasis>, returns the
        corresponding Git commit hash (this can optionally be followed by a
        tree-ish to specify which branch should be searched).  When given a
        tree-ish, returns the corresponding SVN revision number.
</simpara>
<variablelist>
<varlistentry>
<term>
-B
</term>
<term>
--before
</term>
<listitem>
<simpara>
        Don&#8217;t require an exact match if given an SVN revision, instead find
        the commit corresponding to the state of the SVN repository (on the
        current branch) at the specified revision.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-A
</term>
<term>
--after
</term>
<listitem>
<simpara>
        Don&#8217;t require an exact match if given an SVN revision; if there is
        not an exact match return the closest match searching forward in the
        history.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>set-tree</emphasis>
</term>
<listitem>
<simpara>
        You should consider using <emphasis>dcommit</emphasis> instead of this command.
        Commit specified commit or tree objects to SVN.  This relies on
        your imported fetch data being up to date.  This makes
        absolutely no attempts to do patching when committing to SVN, it
        simply overwrites files with those specified in the tree or
        commit.  All merging is assumed to have taken place
        independently of <emphasis>git svn</emphasis> functions.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>create-ignore</emphasis>
</term>
<listitem>
<simpara>
        Recursively finds the svn:ignore property on directories and
        creates matching .gitignore files. The resulting files are staged to
        be committed, but are not committed. Use -r/--revision to refer to a
        specific revision.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>show-ignore</emphasis>
</term>
<listitem>
<simpara>
        Recursively finds and lists the svn:ignore property on
        directories.  The output is suitable for appending to
        the $GIT_DIR/info/exclude file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>mkdirs</emphasis>
</term>
<listitem>
<simpara>
        Attempts to recreate empty directories that core Git cannot track
        based on information in $GIT_DIR/svn/&lt;refname&gt;/unhandled.log files.
        Empty directories are automatically recreated when using
        "git svn clone" and "git svn rebase", so "mkdirs" is intended
        for use after commands like "git checkout" or "git reset".
        (See the svn-remote.&lt;name&gt;.automkdirs config file option for
        more information.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>commit-diff</emphasis>
</term>
<listitem>
<simpara>
        Commits the diff of two tree-ish arguments from the
        command-line.  This command does not rely on being inside a <literal>git svn
        init</literal>-ed repository.  This command takes three arguments, (a) the
        original tree to diff against, (b) the new tree result, (c) the
        URL of the target Subversion repository.  The final argument
        (URL) may be omitted if you are working from a <emphasis>git svn</emphasis>-aware
        repository (that has been <literal>init</literal>-ed with <emphasis>git svn</emphasis>).
        The -r&lt;revision&gt; option is required for this.
</simpara>
<simpara>The commit message is supplied either directly with the <literal>-m</literal> or <literal>-F</literal>
option, or indirectly from the tag or commit when the second tree-ish
denotes such an object, or it is requested by invoking an editor (see
<literal>--edit</literal> option below).</simpara>
<variablelist>
<varlistentry>
<term>
-m &lt;msg&gt;
</term>
<term>
--message=&lt;msg&gt;
</term>
<listitem>
<simpara>
        Use the given <literal>msg</literal> as the commit message. This option
        disables the <literal>--edit</literal> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-F &lt;filename&gt;
</term>
<term>
--file=&lt;filename&gt;
</term>
<listitem>
<simpara>
        Take the commit message from the given file. This option
        disables the <literal>--edit</literal> option.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>info</emphasis>
</term>
<listitem>
<simpara>
        Shows information about a file or directory similar to what
        &#8216;svn info&#8217; provides.  Does not currently support a -r/--revision
        argument.  Use the --url option to output only the value of the
        <emphasis>URL:</emphasis> field.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>proplist</emphasis>
</term>
<listitem>
<simpara>
        Lists the properties stored in the Subversion repository about a
        given file or directory.  Use -r/--revision to refer to a specific
        Subversion revision.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>propget</emphasis>
</term>
<listitem>
<simpara>
        Gets the Subversion property given as the first argument, for a
        file.  A specific revision can be specified with -r/--revision.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>propset</emphasis>
</term>
<listitem>
<simpara>
        Sets the Subversion property given as the first argument, to the
        value given as the second argument for the file given as the
        third argument.
</simpara>
<simpara>Example:</simpara>
<literallayout class="monospaced">git svn propset svn:keywords "FreeBSD=%H" devel/py-tipper/Makefile</literallayout><simpara></simpara>
<simpara>This will set the property <emphasis>svn:keywords</emphasis> to <emphasis>FreeBSD=%H</emphasis> for the file
<emphasis>devel/py-tipper/Makefile</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>show-externals</emphasis>
</term>
<listitem>
<simpara>
        Shows the Subversion externals.  Use -r/--revision to specify a
        specific revision.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>gc</emphasis>
</term>
<listitem>
<simpara>
        Compress $GIT_DIR/svn/&lt;refname&gt;/unhandled.log files and remove
        $GIT_DIR/svn/&lt;refname&gt;/index files.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>reset</emphasis>
</term>
<listitem>
<simpara>
        Undoes the effects of <emphasis>fetch</emphasis> back to the specified revision.
        This allows you to re-<emphasis>fetch</emphasis> an SVN revision.  Normally the
        contents of an SVN revision should never change and <emphasis>reset</emphasis>
        should not be necessary.  However, if SVN permissions change,
        or if you alter your --ignore-paths option, a <emphasis>fetch</emphasis> may fail
        with "not found in commit" (file not previously visible) or
        "checksum mismatch" (missed a modification).  If the problem
        file cannot be ignored forever (with --ignore-paths) the only
        way to repair the repo is to use <emphasis>reset</emphasis>.
</simpara>
<simpara>Only the rev_map and refs/remotes/git-svn are changed (see
<emphasis>$GIT_DIR/svn/**/.rev_map.*</emphasis> in the FILES section below for details).
Follow <emphasis>reset</emphasis> with a <emphasis>fetch</emphasis> and then <emphasis>git reset</emphasis> or <emphasis>git rebase</emphasis> to
move local branches onto the new tree.</simpara>
<variablelist>
<varlistentry>
<term>
-r &lt;n&gt;
</term>
<term>
--revision=&lt;n&gt;
</term>
<listitem>
<simpara>
        Specify the most recent revision to keep.  All later revisions
        are discarded.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-p
</term>
<term>
--parent
</term>
<listitem>
<simpara>
        Discard the specified revision as well, keeping the nearest
        parent instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Example:
</term>
<listitem>
<simpara>
Assume you have local changes in "master", but you need to refetch "r2".
</simpara>
<literallayout class="monospaced">    r1---r2---r3 remotes/git-svn
                \
                 A---B master</literallayout><simpara></simpara>
<simpara>Fix the ignore-paths or SVN permissions problem that caused "r2" to
be incomplete in the first place.  Then:</simpara>
<literallayout>git svn reset -r2 -p
git svn fetch</literallayout>
<simpara></simpara>
<literallayout class="monospaced">    r1---r2'--r3' remotes/git-svn
      \
       r2---r3---A---B master</literallayout><simpara></simpara>
<simpara>Then fixup "master" with <emphasis>git rebase</emphasis>.
Do NOT use <emphasis>git merge</emphasis> or your history will not be compatible with a
future <emphasis>dcommit</emphasis>!</simpara>
<literallayout>git rebase --onto remotes/git-svn A^ master</literallayout>
<simpara></simpara>
<literallayout class="monospaced">    r1---r2'--r3' remotes/git-svn
                \
                 A'--B' master</literallayout><simpara></simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--shared[=(false|true|umask|group|all|world|everybody)]
</term>
<term>
--template=&lt;template_directory&gt;
</term>
<listitem>
<simpara>
        Only used with the <emphasis>init</emphasis> command.
        These are passed directly to <emphasis>git init</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-r &lt;arg&gt;
</term>
<term>
--revision &lt;arg&gt;
</term>
<listitem>
<simpara>
           Used with the <emphasis>fetch</emphasis> command.
</simpara>
<simpara>This allows revision ranges for partial/cauterized history
to be supported.  $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges),
$NUMBER:HEAD, and BASE:$NUMBER are all supported.</simpara>
<simpara>This can allow you to make partial mirrors when running fetch;
but is generally not recommended because history will be skipped
and lost.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-
</term>
<term>
--stdin
</term>
<listitem>
<simpara>
        Only used with the <emphasis>set-tree</emphasis> command.
</simpara>
<simpara>Read a list of commits from stdin and commit them in reverse
order.  Only the leading sha1 is read from each line, so
<emphasis>git rev-list --pretty=oneline</emphasis> output can be used.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--rmdir
</term>
<listitem>
<simpara>
        Only used with the <emphasis>dcommit</emphasis>, <emphasis>set-tree</emphasis> and <emphasis>commit-diff</emphasis> commands.
</simpara>
<simpara>Remove directories from the SVN tree if there are no files left
behind.  SVN can version empty directories, and they are not
removed by default if there are no files left in them.  Git
cannot version empty directories.  Enabling this flag will make
the commit to SVN act like Git.</simpara>
<literallayout>config key: svn.rmdir</literallayout>
<simpara></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-e
</term>
<term>
--edit
</term>
<listitem>
<simpara>
        Only used with the <emphasis>dcommit</emphasis>, <emphasis>set-tree</emphasis> and <emphasis>commit-diff</emphasis> commands.
</simpara>
<simpara>Edit the commit message before committing to SVN.  This is off by
default for objects that are commits, and forced on when committing
tree objects.</simpara>
<literallayout>config key: svn.edit</literallayout>
<simpara></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-l&lt;num&gt;
</term>
<term>
--find-copies-harder
</term>
<listitem>
<simpara>
        Only used with the <emphasis>dcommit</emphasis>, <emphasis>set-tree</emphasis> and <emphasis>commit-diff</emphasis> commands.
</simpara>
<simpara>They are both passed directly to <emphasis>git diff-tree</emphasis>; see
<citerefentry>
<refentrytitle>git-diff-tree</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more information.</simpara>
<literallayout>config key: svn.l
config key: svn.findcopiesharder</literallayout>
<simpara></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-A&lt;filename&gt;
</term>
<term>
--authors-file=&lt;filename&gt;
</term>
<listitem>
<simpara>
        Syntax is compatible with the file used by <emphasis>git cvsimport</emphasis> but
        an empty email address can be supplied with <emphasis>&lt;&gt;</emphasis>:
</simpara>
<literallayout class="monospaced">        loginname = Joe User &lt;user@example.com&gt;</literallayout><simpara></simpara>
<simpara>If this option is specified and <emphasis>git svn</emphasis> encounters an SVN
committer name that does not exist in the authors-file, <emphasis>git svn</emphasis>
will abort operation. The user will then have to add the
appropriate entry.  Re-running the previous <emphasis>git svn</emphasis> command
after the authors-file is modified should continue operation.</simpara>
<literallayout>config key: svn.authorsfile</literallayout>
<simpara></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--authors-prog=&lt;filename&gt;
</term>
<listitem>
<simpara>
        If this option is specified, for each SVN committer name that
        does not exist in the authors file, the given file is executed
        with the committer name as the first argument.  The program is
        expected to return a single line of the form "Name &lt;email&gt;" or
        "Name &lt;&gt;", which will be treated as if included in the authors
        file.
</simpara>
<simpara>Due to historical reasons a relative <emphasis>filename</emphasis> is first searched
relative to the current directory for <emphasis>init</emphasis> and <emphasis>clone</emphasis> and relative
to the root of the working tree for <emphasis>fetch</emphasis>. If <emphasis>filename</emphasis> is
not found, it is searched like any other command in <emphasis>$PATH</emphasis>.</simpara>
<literallayout>config key: svn.authorsProg</literallayout>
<simpara></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        Make <emphasis>git svn</emphasis> less verbose. Specify a second time to make it
        even less verbose.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-m
</term>
<term>
--merge
</term>
<term>
-s&lt;strategy&gt;
</term>
<term>
--strategy=&lt;strategy&gt;
</term>
<term>
-p
</term>
<term>
--rebase-merges
</term>
<listitem>
<simpara>
        These are only used with the <emphasis>dcommit</emphasis> and <emphasis>rebase</emphasis> commands.
</simpara>
<simpara>Passed directly to <emphasis>git rebase</emphasis> when using <emphasis>dcommit</emphasis> if a
<emphasis>git reset</emphasis> cannot be used (see <emphasis>dcommit</emphasis>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--dry-run
</term>
<listitem>
<simpara>
        This can be used with the <emphasis>dcommit</emphasis>, <emphasis>rebase</emphasis>, <emphasis>branch</emphasis> and
        <emphasis>tag</emphasis> commands.
</simpara>
<simpara>For <emphasis>dcommit</emphasis>, print out the series of Git arguments that would show
which diffs would be committed to SVN.</simpara>
<simpara>For <emphasis>rebase</emphasis>, display the local branch associated with the upstream svn
repository associated with the current branch and the URL of svn
repository that will be fetched from.</simpara>
<simpara>For <emphasis>branch</emphasis> and <emphasis>tag</emphasis>, display the urls that will be used for copying when
creating the branch or tag.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--use-log-author
</term>
<listitem>
<simpara>
        When retrieving svn commits into Git (as part of <emphasis>fetch</emphasis>, <emphasis>rebase</emphasis>, or
        <emphasis>dcommit</emphasis> operations), look for the first <literal>From:</literal> line or <literal>Signed-off-by</literal> trailer
        in the log message and use that as the author string.
</simpara>
<literallayout>config key: svn.useLogAuthor</literallayout>
<simpara></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--add-author-from
</term>
<listitem>
<simpara>
        When committing to svn from Git (as part of <emphasis>set-tree</emphasis> or <emphasis>dcommit</emphasis>
        operations), if the existing log message doesn&#8217;t already have a
        <literal>From:</literal> or <literal>Signed-off-by</literal> trailer, append a <literal>From:</literal> line based on the
        Git commit&#8217;s author string.  If you use this, then <literal>--use-log-author</literal>
        will retrieve a valid author string for all commits.
</simpara>
<literallayout>config key: svn.addAuthorFrom</literallayout>
<simpara></simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_advanced_options">
<title>ADVANCED OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-i&lt;GIT_SVN_ID&gt;
</term>
<term>
--id &lt;GIT_SVN_ID&gt;
</term>
<listitem>
<simpara>
        This sets GIT_SVN_ID (instead of using the environment).  This
        allows the user to override the default refname to fetch from
        when tracking a single URL.  The <emphasis>log</emphasis> and <emphasis>dcommit</emphasis> commands
        no longer require this switch as an argument.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-R&lt;remote name&gt;
</term>
<term>
--svn-remote &lt;remote name&gt;
</term>
<listitem>
<simpara>
        Specify the [svn-remote "&lt;remote name&gt;"] section to use,
        this allows SVN multiple repositories to be tracked.
        Default: "svn"
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--follow-parent
</term>
<listitem>
<simpara>
        This option is only relevant if we are tracking branches (using
        one of the repository layout options --trunk, --tags,
        --branches, --stdlayout). For each tracked branch, try to find
        out where its revision was copied from, and set
        a suitable parent in the first Git commit for the branch.
        This is especially helpful when we&#8217;re tracking a directory
        that has been moved around within the repository.  If this
        feature is disabled, the branches created by <emphasis>git svn</emphasis> will all
        be linear and not share any history, meaning that there will be
        no information on where branches were branched off or merged.
        However, following long/convoluted histories can take a long
        time, so disabling this feature may speed up the cloning
        process. This feature is enabled by default, use
        --no-follow-parent to disable it.
</simpara>
<literallayout>config key: svn.followparent</literallayout>
<simpara></simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_config_file_only_options">
<title>CONFIG FILE-ONLY OPTIONS</title>
<variablelist>
<varlistentry>
<term>
svn.noMetadata
</term>
<term>
svn-remote.&lt;name&gt;.noMetadata
</term>
<listitem>
<simpara>
        This gets rid of the <emphasis>git-svn-id:</emphasis> lines at the end of every commit.
</simpara>
<simpara>This option can only be used for one-shot imports as <emphasis>git svn</emphasis>
will not be able to fetch again without metadata. Additionally,
if you lose your <emphasis>$GIT_DIR/svn/**/.rev_map.*</emphasis> files, <emphasis>git svn</emphasis> will not
be able to rebuild them.</simpara>
<simpara>The <emphasis>git svn log</emphasis> command will not work on repositories using
this, either.  Using this conflicts with the <emphasis>useSvmProps</emphasis>
option for (hopefully) obvious reasons.</simpara>
<simpara>This option is NOT recommended as it makes it difficult to track down
old references to SVN revision numbers in existing documentation, bug
reports, and archives.  If you plan to eventually migrate from SVN to
Git and are certain about dropping SVN history, consider
<ulink url="https://github.com/newren/git-filter-repo">git-filter-repo</ulink> instead.
filter-repo also allows reformatting of metadata for ease-of-reading
and rewriting authorship info for non-"svn.authorsFile" users.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
svn.useSvmProps
</term>
<term>
svn-remote.&lt;name&gt;.useSvmProps
</term>
<listitem>
<simpara>
        This allows <emphasis>git svn</emphasis> to re-map repository URLs and UUIDs from
        mirrors created using SVN::Mirror (or svk) for metadata.
</simpara>
<simpara>If an SVN revision has a property, "svm:headrev", it is likely
that the revision was created by SVN::Mirror (also used by SVK).
The property contains a repository UUID and a revision.  We want
to make it look like we are mirroring the original URL, so
introduce a helper function that returns the original identity
URL and UUID, and use it when generating metadata in commit
messages.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
svn.useSvnsyncProps
</term>
<term>
svn-remote.&lt;name&gt;.useSvnsyncprops
</term>
<listitem>
<simpara>
        Similar to the useSvmProps option; this is for users
        of the svnsync(1) command distributed with SVN 1.4.x and
        later.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
svn-remote.&lt;name&gt;.rewriteRoot
</term>
<listitem>
<simpara>
        This allows users to create repositories from alternate
        URLs.  For example, an administrator could run <emphasis>git svn</emphasis> on the
        server locally (accessing via file://) but wish to distribute
        the repository with a public http:// or svn:// URL in the
        metadata so users of it will see the public URL.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
svn-remote.&lt;name&gt;.rewriteUUID
</term>
<listitem>
<simpara>
        Similar to the useSvmProps option; this is for users who need
        to remap the UUID manually. This may be useful in situations
        where the original UUID is not available via either useSvmProps
        or useSvnsyncProps.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
svn-remote.&lt;name&gt;.pushurl
</term>
<listitem>
<simpara>
        Similar to Git&#8217;s <literal>remote.&lt;name&gt;.pushurl</literal>, this key is designed
        to be used in cases where <emphasis>url</emphasis> points to an SVN repository
        via a read-only transport, to provide an alternate read/write
        transport. It is assumed that both keys point to the same
        repository. Unlike <emphasis>commiturl</emphasis>, <emphasis>pushurl</emphasis> is a base path. If
        either <emphasis>commiturl</emphasis> or <emphasis>pushurl</emphasis> could be used, <emphasis>commiturl</emphasis>
        takes precedence.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
svn.brokenSymlinkWorkaround
</term>
<listitem>
<simpara>
        This disables potentially expensive checks to workaround
        broken symlinks checked into SVN by broken clients.  Set this
        option to "false" if you track a SVN repository with many
        empty blobs that are not symlinks.  This option may be changed
        while <emphasis>git svn</emphasis> is running and take effect on the next
        revision fetched.  If unset, <emphasis>git svn</emphasis> assumes this option to
        be "true".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
svn.pathnameencoding
</term>
<listitem>
<simpara>
        This instructs git svn to recode pathnames to a given encoding.
        It can be used by windows users and by those who work in non-utf8
        locales to avoid corrupted file names with non-ASCII characters.
        Valid encodings are the ones supported by Perl&#8217;s Encode module.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
svn-remote.&lt;name&gt;.automkdirs
</term>
<listitem>
<simpara>
        Normally, the "git svn clone" and "git svn rebase" commands
        attempt to recreate empty directories that are in the
        Subversion repository.  If this option is set to "false", then
        empty directories will only be created if the "git svn mkdirs"
        command is run explicitly.  If unset, <emphasis>git svn</emphasis> assumes this
        option to be "true".
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Since the noMetadata, rewriteRoot, rewriteUUID, useSvnsyncProps and useSvmProps
options all affect the metadata generated and used by <emphasis>git svn</emphasis>; they
<emphasis role="strong">must</emphasis> be set in the configuration file before any history is imported
and these settings should never be changed once they are set.</simpara>
<simpara>Additionally, only one of these options can be used per svn-remote
section because they affect the <emphasis>git-svn-id:</emphasis> metadata line, except
for rewriteRoot and rewriteUUID which can be used together.</simpara>
</refsect1>
<refsect1 id="_basic_examples">
<title>BASIC EXAMPLES</title>
<simpara>Tracking and contributing to the trunk of a Subversion-managed project
(ignoring tags and branches):</simpara>
<literallayout class="monospaced"># Clone a repo (like git clone):
        git svn clone http://svn.example.com/project/trunk
# Enter the newly cloned directory:
        cd trunk
# You should be on master branch, double-check with 'git branch'
        git branch
# Do some work and commit locally to Git:
        git commit ...
# Something is committed to SVN, rebase your local changes against the
# latest changes in SVN:
        git svn rebase
# Now commit your changes (that were committed previously using Git) to SVN,
# as well as automatically updating your working HEAD:
        git svn dcommit
# Append svn:ignore settings to the default Git exclude file:
        git svn show-ignore &gt;&gt; .git/info/exclude</literallayout><simpara></simpara>
<simpara>Tracking and contributing to an entire Subversion-managed project
(complete with a trunk, tags and branches):</simpara>
<literallayout class="monospaced"># Clone a repo with standard SVN directory layout (like git clone):
        git svn clone http://svn.example.com/project --stdlayout --prefix svn/
# Or, if the repo uses a non-standard directory layout:
        git svn clone http://svn.example.com/project -T tr -b branch -t tag --prefix svn/
# View all branches and tags you have cloned:
        git branch -r
# Create a new branch in SVN
        git svn branch waldo
# Reset your master to trunk (or any other branch, replacing 'trunk'
# with the appropriate name):
        git reset --hard svn/trunk
# You may only dcommit to one branch/tag/trunk at a time.  The usage
# of dcommit/rebase/show-ignore should be the same as above.</literallayout><simpara></simpara>
<simpara>The initial <emphasis>git svn clone</emphasis> can be quite time-consuming
(especially for large Subversion repositories). If multiple
people (or one person with multiple machines) want to use
<emphasis>git svn</emphasis> to interact with the same Subversion repository, you can
do the initial <emphasis>git svn clone</emphasis> to a repository on a server and
have each person clone that repository with <emphasis>git clone</emphasis>:</simpara>
<literallayout class="monospaced"># Do the initial import on a server
        ssh server "cd /pub &amp;&amp; git svn clone http://svn.example.com/project [options...]"
# Clone locally - make sure the refs/remotes/ space matches the server
        mkdir project
        cd project
        git init
        git remote add origin server:/pub/project
        git config --replace-all remote.origin.fetch '+refs/remotes/*:refs/remotes/*'
        git fetch
# Prevent fetch/pull from remote Git server in the future,
# we only want to use git svn for future updates
        git config --remove-section remote.origin
# Create a local branch from one of the branches just fetched
        git checkout -b master FETCH_HEAD
# Initialize 'git svn' locally (be sure to use the same URL and
# --stdlayout/-T/-b/-t/--prefix options as were used on server)
        git svn init http://svn.example.com/project [options...]
# Pull the latest changes from Subversion
        git svn rebase</literallayout><simpara></simpara>
</refsect1>
<refsect1 id="_rebase_vs_pull_merge">
<title>REBASE VS. PULL/MERGE</title>
<simpara>Prefer to use <emphasis>git svn rebase</emphasis> or <emphasis>git rebase</emphasis>, rather than
<emphasis>git pull</emphasis> or <emphasis>git merge</emphasis> to synchronize unintegrated commits with a <emphasis>git svn</emphasis>
branch. Doing so will keep the history of unintegrated commits linear with
respect to the upstream SVN repository and allow the use of the preferred
<emphasis>git svn dcommit</emphasis> subcommand to push unintegrated commits back into SVN.</simpara>
<simpara>Originally, <emphasis>git svn</emphasis> recommended that developers pulled or merged from
the <emphasis>git svn</emphasis> branch.  This was because the author favored
<literal>git svn set-tree B</literal> to commit a single head rather than the
<literal>git svn set-tree A..B</literal> notation to commit multiple commits. Use of
<emphasis>git pull</emphasis> or <emphasis>git merge</emphasis> with <literal>git svn set-tree A..B</literal> will cause non-linear
history to be flattened when committing into SVN and this can lead to merge
commits unexpectedly reversing previous commits in SVN.</simpara>
</refsect1>
<refsect1 id="_merge_tracking">
<title>MERGE TRACKING</title>
<simpara>While <emphasis>git svn</emphasis> can track
copy history (including branches and tags) for repositories adopting a
standard layout, it cannot yet represent merge history that happened
inside git back upstream to SVN users.  Therefore it is advised that
users keep history as linear as possible inside Git to ease
compatibility with SVN (see the CAVEATS section below).</simpara>
</refsect1>
<refsect1 id="_handling_of_svn_branches">
<title>HANDLING OF SVN BRANCHES</title>
<simpara>If <emphasis>git svn</emphasis> is configured to fetch branches (and --follow-branches
is in effect), it sometimes creates multiple Git branches for one
SVN branch, where the additional branches have names of the form
<emphasis>branchname@nnn</emphasis> (with nnn an SVN revision number).  These additional
branches are created if <emphasis>git svn</emphasis> cannot find a parent commit for the
first commit in an SVN branch, to connect the branch to the history of
the other branches.</simpara>
<simpara>Normally, the first commit in an SVN branch consists
of a copy operation. <emphasis>git svn</emphasis> will read this commit to get the SVN
revision the branch was created from. It will then try to find the
Git commit that corresponds to this SVN revision, and use that as the
parent of the branch. However, it is possible that there is no suitable
Git commit to serve as parent.  This will happen, among other reasons,
if the SVN branch is a copy of a revision that was not fetched by <emphasis>git
svn</emphasis> (e.g. because it is an old revision that was skipped with
<literal>--revision</literal>), or if in SVN a directory was copied that is not tracked
by <emphasis>git svn</emphasis> (such as a branch that is not tracked at all, or a
subdirectory of a tracked branch). In these cases, <emphasis>git svn</emphasis> will still
create a Git branch, but instead of using an existing Git commit as the
parent of the branch, it will read the SVN history of the directory the
branch was copied from and create appropriate Git commits.  This is
indicated by the message "Initializing parent: &lt;branchname&gt;".</simpara>
<simpara>Additionally, it will create a special branch named
<emphasis>&lt;branchname&gt;@&lt;SVN-Revision&gt;</emphasis>, where &lt;SVN-Revision&gt; is the SVN revision
number the branch was copied from.  This branch will point to the newly
created parent commit of the branch.  If in SVN the branch was deleted
and later recreated from a different version, there will be multiple
such branches with an <emphasis>@</emphasis>.</simpara>
<simpara>Note that this may mean that multiple Git commits are created for a
single SVN revision.</simpara>
<simpara>An example: in an SVN repository with a standard
trunk/tags/branches layout, a directory trunk/sub is created in r.100.
In r.200, trunk/sub is branched by copying it to branches/. <emphasis>git svn
clone -s</emphasis> will then create a branch <emphasis>sub</emphasis>. It will also create new Git
commits for r.100 through r.199 and use these as the history of branch
<emphasis>sub</emphasis>. Thus there will be two Git commits for each revision from r.100
to r.199 (one containing trunk/, one containing trunk/sub/). Finally,
it will create a branch <emphasis>sub@200</emphasis> pointing to the new parent commit of
branch <emphasis>sub</emphasis> (i.e. the commit for r.200 and trunk/sub/).</simpara>
</refsect1>
<refsect1 id="_caveats">
<title>CAVEATS</title>
<simpara>For the sake of simplicity and interoperating with Subversion,
it is recommended that all <emphasis>git svn</emphasis> users clone, fetch and dcommit
directly from the SVN server, and avoid all <emphasis>git clone</emphasis>/<emphasis>pull</emphasis>/<emphasis>merge</emphasis>/<emphasis>push</emphasis>
operations between Git repositories and branches.  The recommended
method of exchanging code between Git branches and users is
<emphasis>git format-patch</emphasis> and <emphasis>git am</emphasis>, or just 'dcommit&#8217;ing to the SVN repository.</simpara>
<simpara>Running <emphasis>git merge</emphasis> or <emphasis>git pull</emphasis> is NOT recommended on a branch you
plan to <emphasis>dcommit</emphasis> from because Subversion users cannot see any
merges you&#8217;ve made.  Furthermore, if you merge or pull from a Git branch
that is a mirror of an SVN branch, <emphasis>dcommit</emphasis> may commit to the wrong
branch.</simpara>
<simpara>If you do merge, note the following rule: <emphasis>git svn dcommit</emphasis> will
attempt to commit on top of the SVN commit named in</simpara>
<literallayout class="monospaced">git log --grep=^git-svn-id: --first-parent -1</literallayout><simpara></simpara>
<simpara>You <emphasis>must</emphasis> therefore ensure that the most recent commit of the branch
you want to dcommit to is the <emphasis>first</emphasis> parent of the merge.  Chaos will
ensue otherwise, especially if the first parent is an older commit on
the same SVN branch.</simpara>
<simpara><emphasis>git clone</emphasis> does not clone branches under the refs/remotes/ hierarchy or
any <emphasis>git svn</emphasis> metadata, or config.  So repositories created and managed with
using <emphasis>git svn</emphasis> should use <emphasis>rsync</emphasis> for cloning, if cloning is to be done
at all.</simpara>
<simpara>Since <emphasis>dcommit</emphasis> uses rebase internally, any Git branches you <emphasis>git push</emphasis> to
before <emphasis>dcommit</emphasis> on will require forcing an overwrite of the existing ref
on the remote repository.  This is generally considered bad practice,
see the <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> documentation for details.</simpara>
<simpara>Do not use the --amend option of <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> on a change you&#8217;ve
already dcommitted.  It is considered bad practice to --amend commits
you&#8217;ve already pushed to a remote repository for other users, and
dcommit with SVN is analogous to that.</simpara>
<simpara>When cloning an SVN repository, if none of the options for describing
the repository layout is used (--trunk, --tags, --branches,
--stdlayout), <emphasis>git svn clone</emphasis> will create a Git repository with
completely linear history, where branches and tags appear as separate
directories in the working copy.  While this is the easiest way to get a
copy of a complete repository, for projects with many branches it will
lead to a working copy many times larger than just the trunk. Thus for
projects using the standard directory structure (trunk/branches/tags),
it is recommended to clone with option <literal>--stdlayout</literal>. If the project
uses a non-standard structure, and/or if branches and tags are not
required, it is easiest to only clone one directory (typically trunk),
without giving any repository layout options.  If the full history with
branches and tags is required, the options <literal>--trunk</literal> / <literal>--branches</literal> /
<literal>--tags</literal> must be used.</simpara>
<simpara>When using multiple --branches or --tags, <emphasis>git svn</emphasis> does not automatically
handle name collisions (for example, if two branches from different paths have
the same name, or if a branch and a tag have the same name).  In these cases,
use <emphasis>init</emphasis> to set up your Git repository then, before your first <emphasis>fetch</emphasis>, edit
the $GIT_DIR/config file so that the branches and tags are associated
with different name spaces.  For example:</simpara>
<literallayout class="monospaced">branches = stable/*:refs/remotes/svn/stable/*
branches = debug/*:refs/remotes/svn/debug/*</literallayout>
</refsect1>
<refsect1 id="_configuration">
<title>CONFIGURATION</title>
<simpara><emphasis>git svn</emphasis> stores [svn-remote] configuration information in the
repository $GIT_DIR/config file.  It is similar the core Git
[remote] sections except <emphasis>fetch</emphasis> keys do not accept glob
arguments; but they are instead handled by the <emphasis>branches</emphasis>
and <emphasis>tags</emphasis> keys.  Since some SVN repositories are oddly
configured with multiple projects glob expansions such those
listed below are allowed:</simpara>
<literallayout class="monospaced">[svn-remote "project-a"]
        url = http://server.org/svn
        fetch = trunk/project-a:refs/remotes/project-a/trunk
        branches = branches/*/project-a:refs/remotes/project-a/branches/*
        branches = branches/release_*:refs/remotes/project-a/branches/release_*
        branches = branches/re*se:refs/remotes/project-a/branches/*
        tags = tags/*/project-a:refs/remotes/project-a/tags/*</literallayout><simpara></simpara>
<simpara>Keep in mind that the <literal>*</literal> (asterisk) wildcard of the local ref
(right of the <literal>:</literal>) <emphasis role="strong">must</emphasis> be the farthest right path component;
however the remote wildcard may be anywhere as long as it&#8217;s an
independent path component (surrounded by <literal>/</literal> or EOL).   This
type of configuration is not automatically created by <emphasis>init</emphasis> and
should be manually entered with a text-editor or using <emphasis>git config</emphasis>.</simpara>
<simpara>Also note that only one asterisk is allowed per word. For example:</simpara>
<literallayout class="monospaced">branches = branches/re*se:refs/remotes/project-a/branches/*</literallayout>
<simpara>will match branches <emphasis>release</emphasis>, <emphasis>rese</emphasis>, <emphasis>re123se</emphasis>, however</simpara>
<literallayout class="monospaced">branches = branches/re*s*e:refs/remotes/project-a/branches/*</literallayout>
<simpara>will produce an error.</simpara>
<simpara>It is also possible to fetch a subset of branches or tags by using a
comma-separated list of names within braces. For example:</simpara>
<literallayout class="monospaced">[svn-remote "huge-project"]
        url = http://server.org/svn
        fetch = trunk/src:refs/remotes/trunk
        branches = branches/{red,green}/src:refs/remotes/project-a/branches/*
        tags = tags/{1.0,2.0}/src:refs/remotes/project-a/tags/*</literallayout><simpara></simpara>
<simpara>Multiple fetch, branches, and tags keys are supported:</simpara>
<literallayout class="monospaced">[svn-remote "messy-repo"]
        url = http://server.org/svn
        fetch = trunk/project-a:refs/remotes/project-a/trunk
        fetch = branches/demos/june-project-a-demo:refs/remotes/project-a/demos/june-demo
        branches = branches/server/*:refs/remotes/project-a/branches/*
        branches = branches/demos/2011/*:refs/remotes/project-a/2011-demos/*
        tags = tags/server/*:refs/remotes/project-a/tags/*</literallayout><simpara></simpara>
<simpara>Creating a branch in such a configuration requires disambiguating which
location to use using the -d or --destination flag:</simpara>
<literallayout class="monospaced">$ git svn branch -d branches/server release-2-3-0</literallayout><simpara></simpara>
<simpara>Note that git-svn keeps track of the highest revision in which a branch
or tag has appeared. If the subset of branches or tags is changed after
fetching, then $GIT_DIR/svn/.metadata must be manually edited to remove
(or reset) branches-maxRev and/or tags-maxRev as appropriate.</simpara>
</refsect1>
<refsect1 id="_files">
<title>FILES</title>
<variablelist>
<varlistentry>
<term>
$GIT_DIR/svn/**/.rev_map.*
</term>
<listitem>
<simpara>
        Mapping between Subversion revision numbers and Git commit
        names.  In a repository where the noMetadata option is not set,
        this can be rebuilt from the git-svn-id: lines that are at the
        end of every commit (see the <emphasis>svn.noMetadata</emphasis> section above for
        details).
</simpara>
<simpara><emphasis>git svn fetch</emphasis> and <emphasis>git svn rebase</emphasis> automatically update the rev_map
if it is missing or not up to date.  <emphasis>git svn reset</emphasis> automatically
rewinds it.</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_bugs">
<title>BUGS</title>
<simpara>We ignore all SVN properties except svn:executable.  Any unhandled
properties are logged to $GIT_DIR/svn/&lt;refname&gt;/unhandled.log</simpara>
<simpara>Renamed and copied directories are not detected by Git and hence not
tracked when committing to SVN.  I do not plan on adding support for
this as it&#8217;s quite difficult and time-consuming to get working for all
the possible corner cases (Git doesn&#8217;t do it, either).  Committing
renamed and copied files is fully supported if they&#8217;re similar enough
for Git to detect them.</simpara>
<simpara>In SVN, it is possible (though discouraged) to commit changes to a tag
(because a tag is just a directory copy, thus technically the same as a
branch). When cloning an SVN repository, <emphasis>git svn</emphasis> cannot know if such a
commit to a tag will happen in the future. Thus it acts conservatively
and imports all SVN tags as branches, prefixing the tag name with <emphasis>tags/</emphasis>.</simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>git-rebase</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
