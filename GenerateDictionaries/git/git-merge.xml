<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-merge</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-merge</refname>
  <refpurpose>Join two or more development histories together</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git merge</emphasis> [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]
        [--no-verify] [-s &lt;strategy&gt;] [-X &lt;strategy-option&gt;] [-S[&lt;keyid&gt;]]
        [--[no-]allow-unrelated-histories]
        [--[no-]rerere-autoupdate] [-m &lt;msg&gt;] [-F &lt;file&gt;] [&lt;commit&gt;&#8230;]
<emphasis>git merge</emphasis> (--continue | --abort | --quit)</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Incorporates changes from the named commits (since the time their
histories diverged from the current branch) into the current
branch.  This command is used by <emphasis>git pull</emphasis> to incorporate changes
from another repository and can be used by hand to merge changes
from one branch into another.</simpara>
<simpara>Assume the following history exists and the current branch is
"<literal>master</literal>":</simpara>
<literallayout class="monospaced">          A---B---C topic
         /
    D---E---F---G master</literallayout><simpara></simpara>
<simpara>Then "<literal>git merge topic</literal>" will replay the changes made on the
<literal>topic</literal> branch since it diverged from <literal>master</literal> (i.e., <literal>E</literal>) until
its current commit (<literal>C</literal>) on top of <literal>master</literal>, and record the result
in a new commit along with the names of the two parent commits and
a log message from the user describing the changes.</simpara>
<literallayout class="monospaced">          A---B---C topic
         /         \
    D---E---F---G---H master</literallayout><simpara></simpara>
<simpara>The second syntax ("<literal>git merge --abort</literal>") can only be run after the
merge has resulted in conflicts. <emphasis>git merge --abort</emphasis> will abort the
merge process and try to reconstruct the pre-merge state. However,
if there were uncommitted changes when the merge started (and
especially if those changes were further modified after the merge
was started), <emphasis>git merge --abort</emphasis> will in some cases be unable to
reconstruct the original (pre-merge) changes. Therefore:</simpara>
<simpara><emphasis role="strong">Warning</emphasis>: Running <emphasis>git merge</emphasis> with non-trivial uncommitted changes is
discouraged: while possible, it may leave you in a state that is hard to
back out of in the case of a conflict.</simpara>
<simpara>The third syntax ("<literal>git merge --continue</literal>") can only be run after the
merge has resulted in conflicts.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--commit
</term>
<term>
--no-commit
</term>
<listitem>
<simpara>
        Perform the merge and commit the result. This option can
        be used to override --no-commit.
</simpara>
<simpara>With --no-commit perform the merge and stop just before creating
a merge commit, to give the user a chance to inspect and further
tweak the merge result before committing.</simpara>
<simpara>Note that fast-forward updates do not create a merge commit and
therefore there is no way to stop those merges with --no-commit.
Thus, if you want to ensure your branch is not changed or updated
by the merge command, use --no-ff with --no-commit.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--edit
</term>
<term>
-e
</term>
<term>
--no-edit
</term>
<listitem>
<simpara>
        Invoke an editor before committing successful mechanical merge to
        further edit the auto-generated merge message, so that the user
        can explain and justify the merge. The <literal>--no-edit</literal> option can be
        used to accept the auto-generated message (this is generally
        discouraged).
The <literal>--edit</literal> (or <literal>-e</literal>) option is still useful if you are
giving a draft message with the <literal>-m</literal> option from the command line
and want to edit it in the editor.
</simpara>
<simpara>Older scripts may depend on the historical behaviour of not allowing the
user to edit the merge log message. They will see an editor opened when
they run <literal>git merge</literal>. To make it easier to adjust such scripts to the
updated behaviour, the environment variable <literal>GIT_MERGE_AUTOEDIT</literal> can be
set to <literal>no</literal> at the beginning of them.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--cleanup=&lt;mode&gt;
</term>
<listitem>
<simpara>
        This option determines how the merge message will be cleaned up before
        committing. See <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more details. In addition, if
        the <emphasis>&lt;mode&gt;</emphasis> is given a value of <literal>scissors</literal>, scissors will be appended
        to <literal>MERGE_MSG</literal> before being passed on to the commit machinery in the
        case of a merge conflict.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ff
</term>
<term>
--no-ff
</term>
<term>
--ff-only
</term>
<listitem>
<simpara>
        Specifies how a merge is handled when the merged-in history is
        already a descendant of the current history.  <literal>--ff</literal> is the
        default unless merging an annotated (and possibly signed) tag
        that is not stored in its natural place in the <literal>refs/tags/</literal>
        hierarchy, in which case <literal>--no-ff</literal> is assumed.
</simpara>
<simpara>With <literal>--ff</literal>, when possible resolve the merge as a fast-forward (only
update the branch pointer to match the merged branch; do not create a
merge commit).  When not possible (when the merged-in history is not a
descendant of the current history), create a merge commit.</simpara>
<simpara>With <literal>--no-ff</literal>, create a merge commit in all cases, even when the merge
could instead be resolved as a fast-forward.</simpara>
<simpara>With <literal>--ff-only</literal>, resolve the merge as a fast-forward when possible.
When not possible, refuse to merge and exit with a non-zero status.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-S[&lt;keyid&gt;]
</term>
<term>
--gpg-sign[=&lt;keyid&gt;]
</term>
<term>
--no-gpg-sign
</term>
<listitem>
<simpara>
        GPG-sign the resulting merge commit. The <literal>keyid</literal> argument is
        optional and defaults to the committer identity; if specified,
        it must be stuck to the option without a space. <literal>--no-gpg-sign</literal>
        is useful to countermand both <literal>commit.gpgSign</literal> configuration variable,
        and earlier <literal>--gpg-sign</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--log[=&lt;n&gt;]
</term>
<term>
--no-log
</term>
<listitem>
<simpara>
        In addition to branch names, populate the log message with
        one-line descriptions from at most &lt;n&gt; actual commits that are being
        merged. See also <citerefentry>
<refentrytitle>git-fmt-merge-msg</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
<simpara>With --no-log do not list one-line descriptions from the
actual commits being merged.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--signoff
</term>
<term>
--no-signoff
</term>
<listitem>
<simpara>
        Add a <literal>Signed-off-by</literal> trailer by the committer at the end of the commit
        log message.  The meaning of a signoff depends on the project
        to which you&#8217;re committing.  For example, it may certify that
        the committer has the rights to submit the work under the
        project&#8217;s license or agrees to some contributor representation,
        such as a Developer Certificate of Origin.
        (See <ulink url="http://developercertificate.org">http://developercertificate.org</ulink> for the one used by the
        Linux kernel and Git projects.)  Consult the documentation or
        leadership of the project to which you&#8217;re contributing to
        understand how the signoffs are used in that project.
</simpara>
<simpara>The --no-signoff option can be used to countermand an earlier --signoff
option on the command line.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--stat
</term>
<term>
-n
</term>
<term>
--no-stat
</term>
<listitem>
<simpara>
        Show a diffstat at the end of the merge. The diffstat is also
        controlled by the configuration option merge.stat.
</simpara>
<simpara>With -n or --no-stat do not show a diffstat at the end of the
merge.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--squash
</term>
<term>
--no-squash
</term>
<listitem>
<simpara>
        Produce the working tree and index state as if a real merge
        happened (except for the merge information), but do not actually
        make a commit, move the <literal>HEAD</literal>, or record <literal>$GIT_DIR/MERGE_HEAD</literal>
        (to cause the next <literal>git commit</literal> command to create a merge
        commit).  This allows you to create a single commit on top of
        the current branch whose effect is the same as merging another
        branch (or more in case of an octopus).
</simpara>
<simpara>With --no-squash perform the merge and commit the result. This
option can be used to override --squash.</simpara>
<simpara>With --squash, --commit is not allowed, and will fail.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]verify
</term>
<listitem>
<simpara>
        By default, the pre-merge and commit-msg hooks are run.
        When <literal>--no-verify</literal> is given, these are bypassed.
        See also <citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-s &lt;strategy&gt;
</term>
<term>
--strategy=&lt;strategy&gt;
</term>
<listitem>
<simpara>
        Use the given merge strategy; can be supplied more than
        once to specify them in the order they should be tried.
        If there is no <literal>-s</literal> option, a built-in list of strategies
        is used instead (<literal>ort</literal> when merging a single head,
        <literal>octopus</literal> otherwise).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-X &lt;option&gt;
</term>
<term>
--strategy-option=&lt;option&gt;
</term>
<listitem>
<simpara>
        Pass merge strategy specific option through to the merge
        strategy.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--verify-signatures
</term>
<term>
--no-verify-signatures
</term>
<listitem>
<simpara>
        Verify that the tip commit of the side branch being merged is
        signed with a valid key, i.e. a key that has a valid uid: in the
        default trust model, this means the signing key has been signed by
        a trusted key.  If the tip commit of the side branch is not signed
        with a valid key, the merge is aborted.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--summary
</term>
<term>
--no-summary
</term>
<listitem>
<simpara>
        Synonyms to --stat and --no-stat; these are deprecated and will be
        removed in the future.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        Operate quietly. Implies --no-progress.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Be verbose.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--progress
</term>
<term>
--no-progress
</term>
<listitem>
<simpara>
        Turn progress on/off explicitly. If neither is specified,
        progress is shown if standard error is connected to a terminal.
        Note that not all merge strategies may support progress
        reporting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--autostash
</term>
<term>
--no-autostash
</term>
<listitem>
<simpara>
        Automatically create a temporary stash entry before the operation
        begins, record it in the special ref <literal>MERGE_AUTOSTASH</literal>
        and apply it after the operation ends.  This means
        that you can run the operation on a dirty worktree.  However, use
        with care: the final stash application after a successful
        merge might result in non-trivial conflicts.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--allow-unrelated-histories
</term>
<listitem>
<simpara>
        By default, <literal>git merge</literal> command refuses to merge histories
        that do not share a common ancestor.  This option can be
        used to override this safety when merging histories of two
        projects that started their lives independently. As that is
        a very rare occasion, no configuration variable to enable
        this by default exists and will not be added.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-m &lt;msg&gt;
</term>
<listitem>
<simpara>
        Set the commit message to be used for the merge commit (in
        case one is created).
</simpara>
<simpara>If <literal>--log</literal> is specified, a shortlog of the commits being merged
will be appended to the specified message.</simpara>
<simpara>The <emphasis>git fmt-merge-msg</emphasis> command can be
used to give a good default for automated <emphasis>git merge</emphasis>
invocations. The automated message can include the branch description.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-F &lt;file&gt;
</term>
<term>
--file=&lt;file&gt;
</term>
<listitem>
<simpara>
        Read the commit message to be used for the merge commit (in
        case one is created).
</simpara>
<simpara>If <literal>--log</literal> is specified, a shortlog of the commits being merged
will be appended to the specified message.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--rerere-autoupdate
</term>
<term>
--no-rerere-autoupdate
</term>
<listitem>
<simpara>
        Allow the rerere mechanism to update the index with the
        result of auto-conflict resolution if possible.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--overwrite-ignore
</term>
<term>
--no-overwrite-ignore
</term>
<listitem>
<simpara>
        Silently overwrite ignored files from the merge result. This
        is the default behavior. Use <literal>--no-overwrite-ignore</literal> to abort.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--abort
</term>
<listitem>
<simpara>
        Abort the current conflict resolution process, and
        try to reconstruct the pre-merge state. If an autostash entry is
        present, apply it to the worktree.
</simpara>
<simpara>If there were uncommitted worktree changes present when the merge
started, <emphasis>git merge --abort</emphasis> will in some cases be unable to
reconstruct these changes. It is therefore recommended to always
commit or stash your changes before running <emphasis>git merge</emphasis>.</simpara>
<simpara><emphasis>git merge --abort</emphasis> is equivalent to <emphasis>git reset --merge</emphasis> when
<literal>MERGE_HEAD</literal> is present unless <literal>MERGE_AUTOSTASH</literal> is also present in
which case <emphasis>git merge --abort</emphasis> applies the stash entry to the worktree
whereas <emphasis>git reset --merge</emphasis> will save the stashed changes in the stash
list.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--quit
</term>
<listitem>
<simpara>
        Forget about the current merge in progress. Leave the index
        and the working tree as-is. If <literal>MERGE_AUTOSTASH</literal> is present, the
        stash entry will be saved to the stash list.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--continue
</term>
<listitem>
<simpara>
        After a <emphasis>git merge</emphasis> stops due to conflicts you can conclude the
        merge by running <emphasis>git merge --continue</emphasis> (see "HOW TO RESOLVE
        CONFLICTS" section below).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;commit&gt;&#8230;
</term>
<listitem>
<simpara>
        Commits, usually other branch heads, to merge into our branch.
        Specifying more than one commit will create a merge with
        more than two parents (affectionately called an Octopus merge).
</simpara>
<simpara>If no commit is given from the command line, merge the remote-tracking
branches that the current branch is configured to use as its upstream.
See also the configuration section of this manual page.</simpara>
<simpara>When <literal>FETCH_HEAD</literal> (and no other commit) is specified, the branches
recorded in the <literal>.git/FETCH_HEAD</literal> file by the previous invocation
of <literal>git fetch</literal> for merging are merged to the current branch.</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_pre_merge_checks">
<title>PRE-MERGE CHECKS</title>
<simpara>Before applying outside changes, you should get your own work in
good shape and committed locally, so it will not be clobbered if
there are conflicts.  See also <citerefentry>
<refentrytitle>git-stash</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
<emphasis>git pull</emphasis> and <emphasis>git merge</emphasis> will stop without doing anything when
local uncommitted changes overlap with files that <emphasis>git pull</emphasis>/<emphasis>git
merge</emphasis> may need to update.</simpara>
<simpara>To avoid recording unrelated changes in the merge commit,
<emphasis>git pull</emphasis> and <emphasis>git merge</emphasis> will also abort if there are any changes
registered in the index relative to the <literal>HEAD</literal> commit.  (Special
narrow exceptions to this rule may exist depending on which merge
strategy is in use, but generally, the index must match HEAD.)</simpara>
<simpara>If all named commits are already ancestors of <literal>HEAD</literal>, <emphasis>git merge</emphasis>
will exit early with the message "Already up to date."</simpara>
</refsect1>
<refsect1 id="_fast_forward_merge">
<title>FAST-FORWARD MERGE</title>
<simpara>Often the current branch head is an ancestor of the named commit.
This is the most common case especially when invoked from <emphasis>git
pull</emphasis>: you are tracking an upstream repository, you have committed
no local changes, and now you want to update to a newer upstream
revision.  In this case, a new commit is not needed to store the
combined history; instead, the <literal>HEAD</literal> (along with the index) is
updated to point at the named commit, without creating an extra
merge commit.</simpara>
<simpara>This behavior can be suppressed with the <literal>--no-ff</literal> option.</simpara>
</refsect1>
<refsect1 id="_true_merge">
<title>TRUE MERGE</title>
<simpara>Except in a fast-forward merge (see above), the branches to be
merged must be tied together by a merge commit that has both of them
as its parents.</simpara>
<simpara>A merged version reconciling the changes from all branches to be
merged is committed, and your <literal>HEAD</literal>, index, and working tree are
updated to it.  It is possible to have modifications in the working
tree as long as they do not overlap; the update will preserve them.</simpara>
<simpara>When it is not obvious how to reconcile the changes, the following
happens:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
The <literal>HEAD</literal> pointer stays the same.
</simpara>
</listitem>
<listitem>
<simpara>
The <literal>MERGE_HEAD</literal> ref is set to point to the other branch head.
</simpara>
</listitem>
<listitem>
<simpara>
Paths that merged cleanly are updated both in the index file and
   in your working tree.
</simpara>
</listitem>
<listitem>
<simpara>
For conflicting paths, the index file records up to three
   versions: stage 1 stores the version from the common ancestor,
   stage 2 from <literal>HEAD</literal>, and stage 3 from <literal>MERGE_HEAD</literal> (you
   can inspect the stages with <literal>git ls-files -u</literal>).  The working
   tree files contain the result of the "merge" program; i.e. 3-way
   merge results with familiar conflict markers <literal>&lt;&lt;&lt;</literal> <literal>===</literal> <literal>&gt;&gt;&gt;</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
No other changes are made.  In particular, the local
   modifications you had before you started merge will stay the
   same and the index entries for them stay as they were,
   i.e. matching <literal>HEAD</literal>.
</simpara>
</listitem>
</orderedlist>
<simpara>If you tried a merge which resulted in complex conflicts and
want to start over, you can recover with <literal>git merge --abort</literal>.</simpara>
</refsect1>
<refsect1 id="_merging_tag">
<title>MERGING TAG</title>
<simpara>When merging an annotated (and possibly signed) tag, Git always
creates a merge commit even if a fast-forward merge is possible, and
the commit message template is prepared with the tag message.
Additionally, if the tag is signed, the signature check is reported
as a comment in the message template. See also <citerefentry>
<refentrytitle>git-tag</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
<simpara>When you want to just integrate with the work leading to the commit
that happens to be tagged, e.g. synchronizing with an upstream
release point, you may not want to make an unnecessary merge commit.</simpara>
<simpara>In such a case, you can "unwrap" the tag yourself before feeding it
to <literal>git merge</literal>, or pass <literal>--ff-only</literal> when you do not have any work on
your own. e.g.</simpara>
<literallayout class="monospaced">git fetch origin
git merge v1.2.3^0
git merge --ff-only v1.2.3</literallayout><simpara></simpara>
</refsect1>
<refsect1 id="_how_conflicts_are_presented">
<title>HOW CONFLICTS ARE PRESENTED</title>
<simpara>During a merge, the working tree files are updated to reflect the result
of the merge.  Among the changes made to the common ancestor&#8217;s version,
non-overlapping ones (that is, you changed an area of the file while the
other side left that area intact, or vice versa) are incorporated in the
final result verbatim.  When both sides made changes to the same area,
however, Git cannot randomly pick one side over the other, and asks you to
resolve it by leaving what both sides did to that area.</simpara>
<simpara>By default, Git uses the same style as the one used by the "merge" program
from the RCS suite to present such a conflicted hunk, like this:</simpara>
<literallayout class="monospaced">Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed.
&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt
Conflict resolution is hard;
let's go shopping.
=======
Git makes conflict resolution easy.
&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt
And here is another line that is cleanly resolved or unmodified.</literallayout><simpara></simpara>
<simpara>The area where a pair of conflicting changes happened is marked with markers
<literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal>, <literal>=======</literal>, and <literal>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</literal>.  The part before the <literal>=======</literal>
is typically your side, and the part afterwards is typically their side.</simpara>
<simpara>The default format does not show what the original said in the conflicting
area.  You cannot tell how many lines are deleted and replaced with
Barbie&#8217;s remark on your side.  The only thing you can tell is that your
side wants to say it is hard and you&#8217;d prefer to go shopping, while the
other side wants to claim it is easy.</simpara>
<simpara>An alternative style can be used by setting the "merge.conflictStyle"
configuration variable to "diff3".  In "diff3" style, the above conflict
may look like this:</simpara>
<literallayout class="monospaced">Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed.
&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt
Conflict resolution is hard;
let's go shopping.
|||||||
Conflict resolution is hard.
=======
Git makes conflict resolution easy.
&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt
And here is another line that is cleanly resolved or unmodified.</literallayout><simpara></simpara>
<simpara>In addition to the <literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal>, <literal>=======</literal>, and <literal>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</literal> markers, it uses
another <literal>|||||||</literal> marker that is followed by the original text.  You can
tell that the original just stated a fact, and your side simply gave in to
that statement and gave up, while the other side tried to have a more
positive attitude.  You can sometimes come up with a better resolution by
viewing the original.</simpara>
</refsect1>
<refsect1 id="_how_to_resolve_conflicts">
<title>HOW TO RESOLVE CONFLICTS</title>
<simpara>After seeing a conflict, you can do two things:</simpara>
<itemizedlist>
<listitem>
<simpara>
Decide not to merge.  The only clean-ups you need are to reset
   the index file to the <literal>HEAD</literal> commit to reverse 2. and to clean
   up working tree changes made by 2. and 3.; <literal>git merge --abort</literal>
   can be used for this.
</simpara>
</listitem>
<listitem>
<simpara>
Resolve the conflicts.  Git will mark the conflicts in
   the working tree.  Edit the files into shape and
   <emphasis>git add</emphasis> them to the index.  Use <emphasis>git commit</emphasis> or
   <emphasis>git merge --continue</emphasis> to seal the deal. The latter command
   checks whether there is a (interrupted) merge in progress
   before calling <emphasis>git commit</emphasis>.
</simpara>
</listitem>
</itemizedlist>
<simpara>You can work through the conflict with a number of tools:</simpara>
<itemizedlist>
<listitem>
<simpara>
Use a mergetool.  <literal>git mergetool</literal> to launch a graphical
   mergetool which will work you through the merge.
</simpara>
</listitem>
<listitem>
<simpara>
Look at the diffs.  <literal>git diff</literal> will show a three-way diff,
   highlighting changes from both the <literal>HEAD</literal> and <literal>MERGE_HEAD</literal>
   versions.
</simpara>
</listitem>
<listitem>
<simpara>
Look at the diffs from each branch. <literal>git log --merge -p &lt;path&gt;</literal>
   will show diffs first for the <literal>HEAD</literal> version and then the
   <literal>MERGE_HEAD</literal> version.
</simpara>
</listitem>
<listitem>
<simpara>
Look at the originals.  <literal>git show :1:filename</literal> shows the
   common ancestor, <literal>git show :2:filename</literal> shows the <literal>HEAD</literal>
   version, and <literal>git show :3:filename</literal> shows the <literal>MERGE_HEAD</literal>
   version.
</simpara>
</listitem>
</itemizedlist>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<itemizedlist>
<listitem>
<simpara>
Merge branches <literal>fixes</literal> and <literal>enhancements</literal> on top of
  the current branch, making an octopus merge:
</simpara>
<literallayout class="monospaced">$ git merge fixes enhancements</literallayout><simpara></simpara>
</listitem>
<listitem>
<simpara>
Merge branch <literal>obsolete</literal> into the current branch, using <literal>ours</literal>
  merge strategy:
</simpara>
<literallayout class="monospaced">$ git merge -s ours obsolete</literallayout><simpara></simpara>
</listitem>
<listitem>
<simpara>
Merge branch <literal>maint</literal> into the current branch, but do not make
  a new commit automatically:
</simpara>
<literallayout class="monospaced">$ git merge --no-commit maint</literallayout><simpara></simpara>
<simpara>This can be used when you want to include further changes to the
merge, or want to write your own merge commit message.</simpara>
<simpara>You should refrain from abusing this option to sneak substantial
changes into a merge commit.  Small fixups like bumping
release/version name would be acceptable.</simpara>
</listitem>
</itemizedlist>
</refsect1>
<refsect1 id="_merge_strategies">
<title>MERGE STRATEGIES</title>
<simpara>The merge mechanism (<literal>git merge</literal> and <literal>git pull</literal> commands) allows the
backend <emphasis>merge strategies</emphasis> to be chosen with <literal>-s</literal> option.  Some strategies
can also take their own options, which can be passed by giving <literal>-X&lt;option&gt;</literal>
arguments to <literal>git merge</literal> and/or <literal>git pull</literal>.</simpara>
<variablelist>
<varlistentry>
<term>
ort
</term>
<listitem>
<simpara>
        This is the default merge strategy when pulling or merging one
        branch.  This strategy can only resolve two heads using a
        3-way merge algorithm.  When there is more than one common
        ancestor that can be used for 3-way merge, it creates a merged
        tree of the common ancestors and uses that as the reference
        tree for the 3-way merge.  This has been reported to result in
        fewer merge conflicts without causing mismerges by tests done
        on actual merge commits taken from Linux 2.6 kernel
        development history.  Additionally this strategy can detect
        and handle merges involving renames.  It does not make use of
        detected copies.  The name for this algorithm is an acronym
        ("Ostensibly Recursive&#8217;s Twin") and came from the fact that it
        was written as a replacement for the previous default
        algorithm, <literal>recursive</literal>.
</simpara>
<simpara>The <emphasis>ort</emphasis> strategy can take the following options:</simpara>
<variablelist>
<varlistentry>
<term>
ours
</term>
<listitem>
<simpara>
        This option forces conflicting hunks to be auto-resolved cleanly by
        favoring <emphasis>our</emphasis> version.  Changes from the other tree that do not
        conflict with our side are reflected in the merge result.
        For a binary file, the entire contents are taken from our side.
</simpara>
<simpara>This should not be confused with the <emphasis>ours</emphasis> merge strategy, which does not
even look at what the other tree contains at all.  It discards everything
the other tree did, declaring <emphasis>our</emphasis> history contains all that happened in it.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
theirs
</term>
<listitem>
<simpara>
        This is the opposite of <emphasis>ours</emphasis>; note that, unlike <emphasis>ours</emphasis>, there is
        no <emphasis>theirs</emphasis> merge strategy to confuse this merge option with.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
ignore-space-change
</term>
<term>
ignore-all-space
</term>
<term>
ignore-space-at-eol
</term>
<term>
ignore-cr-at-eol
</term>
<listitem>
<simpara>
        Treats lines with the indicated type of whitespace change as
        unchanged for the sake of a three-way merge.  Whitespace
        changes mixed with other changes to a line are not ignored.
        See also <citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> <literal>-b</literal>, <literal>-w</literal>,
        <literal>--ignore-space-at-eol</literal>, and <literal>--ignore-cr-at-eol</literal>.
</simpara>
<itemizedlist>
<listitem>
<simpara>
If <emphasis>their</emphasis> version only introduces whitespace changes to a line,
  <emphasis>our</emphasis> version is used;
</simpara>
</listitem>
<listitem>
<simpara>
If <emphasis>our</emphasis> version introduces whitespace changes but <emphasis>their</emphasis>
  version includes a substantial change, <emphasis>their</emphasis> version is used;
</simpara>
</listitem>
<listitem>
<simpara>
Otherwise, the merge proceeds in the usual way.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
renormalize
</term>
<listitem>
<simpara>
        This runs a virtual check-out and check-in of all three stages
        of a file when resolving a three-way merge.  This option is
        meant to be used when merging branches with different clean
        filters or end-of-line normalization rules.  See "Merging
        branches with differing checkin/checkout attributes" in
        <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
no-renormalize
</term>
<listitem>
<simpara>
        Disables the <literal>renormalize</literal> option.  This overrides the
        <literal>merge.renormalize</literal> configuration variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
find-renames[=&lt;n&gt;]
</term>
<listitem>
<simpara>
        Turn on rename detection, optionally setting the similarity
        threshold.  This is the default. This overrides the
        <emphasis>merge.renames</emphasis> configuration variable.
        See also <citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> <literal>--find-renames</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rename-threshold=&lt;n&gt;
</term>
<listitem>
<simpara>
        Deprecated synonym for <literal>find-renames=&lt;n&gt;</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
subtree[=&lt;path&gt;]
</term>
<listitem>
<simpara>
        This option is a more advanced form of <emphasis>subtree</emphasis> strategy, where
        the strategy makes a guess on how two trees must be shifted to
        match with each other when merging.  Instead, the specified path
        is prefixed (or stripped from the beginning) to make the shape of
        two trees to match.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
recursive
</term>
<listitem>
<simpara>
        This can only resolve two heads using a 3-way merge
        algorithm.  When there is more than one common
        ancestor that can be used for 3-way merge, it creates a
        merged tree of the common ancestors and uses that as
        the reference tree for the 3-way merge.  This has been
        reported to result in fewer merge conflicts without
        causing mismerges by tests done on actual merge commits
        taken from Linux 2.6 kernel development history.
        Additionally this can detect and handle merges involving
        renames.  It does not make use of detected copies.  This was
        the default strategy for resolving two heads from Git v0.99.9k
        until v2.33.0.
</simpara>
<simpara>The <emphasis>recursive</emphasis> strategy takes the same options as <emphasis>ort</emphasis>.  However,
there are three additional options that <emphasis>ort</emphasis> ignores (not documented
above) that are potentially useful with the <emphasis>recursive</emphasis> strategy:</simpara>
<variablelist>
<varlistentry>
<term>
patience
</term>
<listitem>
<simpara>
        Deprecated synonym for <literal>diff-algorithm=patience</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff-algorithm=[patience|minimal|histogram|myers]
</term>
<listitem>
<simpara>
        Use a different diff algorithm while merging, which can help
        avoid mismerges that occur due to unimportant matching lines
        (such as braces from distinct functions).  See also
        <citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> <literal>--diff-algorithm</literal>.  Note that <literal>ort</literal>
        specifically uses <literal>diff-algorithm=histogram</literal>, while <literal>recursive</literal>
        defaults to the <literal>diff.algorithm</literal> config setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
no-renames
</term>
<listitem>
<simpara>
        Turn off rename detection. This overrides the <literal>merge.renames</literal>
        configuration variable.
        See also <citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> <literal>--no-renames</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
resolve
</term>
<listitem>
<simpara>
        This can only resolve two heads (i.e. the current branch
        and another branch you pulled from) using a 3-way merge
        algorithm.  It tries to carefully detect criss-cross
        merge ambiguities.  It does not handle renames.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
octopus
</term>
<listitem>
<simpara>
        This resolves cases with more than two heads, but refuses to do
        a complex merge that needs manual resolution.  It is
        primarily meant to be used for bundling topic branch
        heads together.  This is the default merge strategy when
        pulling or merging more than one branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
ours
</term>
<listitem>
<simpara>
        This resolves any number of heads, but the resulting tree of the
        merge is always that of the current branch head, effectively
        ignoring all changes from all other branches.  It is meant to
        be used to supersede old development history of side
        branches.  Note that this is different from the -Xours option to
        the <emphasis>recursive</emphasis> merge strategy.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
subtree
</term>
<listitem>
<simpara>
        This is a modified <literal>ort</literal> strategy. When merging trees A and
        B, if B corresponds to a subtree of A, B is first adjusted to
        match the tree structure of A, instead of reading the trees at
        the same level. This adjustment is also done to the common
        ancestor tree.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>With the strategies that use 3-way merge (including the default, <emphasis>ort</emphasis>),
if a change is made on both branches, but later reverted on one of the
branches, that change will be present in the merged result; some people find
this behavior confusing.  It occurs because only the heads and the merge base
are considered when performing a merge, not the individual commits.  The merge
algorithm therefore considers the reverted change as no change at all, and
substitutes the changed version instead.</simpara>
</refsect1>
<refsect1 id="_configuration">
<title>CONFIGURATION</title>
<variablelist>
<varlistentry>
<term>
merge.conflictStyle
</term>
<listitem>
<simpara>
        Specify the style in which conflicted hunks are written out to
        working tree files upon merge.  The default is "merge", which
        shows a <literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal> conflict marker, changes made by one side,
        a <literal>=======</literal> marker, changes made by the other side, and then
        a <literal>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</literal> marker.  An alternate style, "diff3", adds a <literal>|||||||</literal>
        marker and the original text before the <literal>=======</literal> marker.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.defaultToUpstream
</term>
<listitem>
<simpara>
        If merge is called without any commit argument, merge the upstream
        branches configured for the current branch by using their last
        observed values stored in their remote-tracking branches.
        The values of the <literal>branch.&lt;current branch&gt;.merge</literal> that name the
        branches at the remote named by <literal>branch.&lt;current branch&gt;.remote</literal>
        are consulted, and then they are mapped via <literal>remote.&lt;remote&gt;.fetch</literal>
        to their corresponding remote-tracking branches, and the tips of
        these tracking branches are merged. Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.ff
</term>
<listitem>
<simpara>
        By default, Git does not create an extra merge commit when merging
        a commit that is a descendant of the current commit. Instead, the
        tip of the current branch is fast-forwarded. When set to <literal>false</literal>,
        this variable tells Git to create an extra merge commit in such
        a case (equivalent to giving the <literal>--no-ff</literal> option from the command
        line). When set to <literal>only</literal>, only such fast-forward merges are
        allowed (equivalent to giving the <literal>--ff-only</literal> option from the
        command line).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.verifySignatures
</term>
<listitem>
<simpara>
        If true, this is equivalent to the --verify-signatures command
        line option. See <citerefentry>
<refentrytitle>git-merge</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.branchdesc
</term>
<listitem>
<simpara>
        In addition to branch names, populate the log message with
        the branch description text associated with them.  Defaults
        to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.log
</term>
<listitem>
<simpara>
        In addition to branch names, populate the log message with at
        most the specified number of one-line descriptions from the
        actual commits that are being merged.  Defaults to false, and
        true is a synonym for 20.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.suppressDest
</term>
<listitem>
<simpara>
        By adding a glob that matches the names of integration
        branches to this multi-valued configuration variable, the
        default merge message computed for merges into these
        integration branches will omit "into &lt;branch name&gt;" from
        its title.
</simpara>
<simpara>An element with an empty value can be used to clear the list
of globs accumulated from previous configuration entries.
When there is no <literal>merge.suppressDest</literal> variable defined, the
default value of <literal>master</literal> is used for backward compatibility.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.renameLimit
</term>
<listitem>
<simpara>
        The number of files to consider in the exhaustive portion of
        rename detection during a merge.  If not specified, defaults
        to the value of diff.renameLimit.  If neither
        merge.renameLimit nor diff.renameLimit are specified,
        currently defaults to 7000.  This setting has no effect if
        rename detection is turned off.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.renames
</term>
<listitem>
<simpara>
        Whether Git detects renames.  If set to "false", rename detection
        is disabled. If set to "true", basic rename detection is enabled.
        Defaults to the value of diff.renames.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.directoryRenames
</term>
<listitem>
<simpara>
        Whether Git detects directory renames, affecting what happens at
        merge time to new files added to a directory on one side of
        history when that directory was renamed on the other side of
        history.  If merge.directoryRenames is set to "false", directory
        rename detection is disabled, meaning that such new files will be
        left behind in the old directory.  If set to "true", directory
        rename detection is enabled, meaning that such new files will be
        moved into the new directory.  If set to "conflict", a conflict
        will be reported for such paths.  If merge.renames is false,
        merge.directoryRenames is ignored and treated as false.  Defaults
        to "conflict".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.renormalize
</term>
<listitem>
<simpara>
        Tell Git that canonical representation of files in the
        repository has changed over time (e.g. earlier commits record
        text files with CRLF line endings, but recent ones use LF line
        endings).  In such a repository, Git can convert the data
        recorded in commits to a canonical form before performing a
        merge to reduce unnecessary conflicts.  For more information,
        see section "Merging branches with differing checkin/checkout
        attributes" in <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.stat
</term>
<listitem>
<simpara>
        Whether to print the diffstat between ORIG_HEAD and the merge result
        at the end of the merge.  True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.autoStash
</term>
<listitem>
<simpara>
        When set to true, automatically create a temporary stash entry
        before the operation begins, and apply it after the operation
        ends.  This means that you can run merge on a dirty worktree.
        However, use with care: the final stash application after a
        successful merge might result in non-trivial conflicts.
        This option can be overridden by the <literal>--no-autostash</literal> and
        <literal>--autostash</literal> options of <citerefentry>
<refentrytitle>git-merge</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.tool
</term>
<listitem>
<simpara>
        Controls which merge tool is used by <citerefentry>
<refentrytitle>git-mergetool</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        The list below shows the valid built-in values.
        Any other value is treated as a custom merge tool and requires
        that a corresponding mergetool.&lt;tool&gt;.cmd variable is defined.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.guitool
</term>
<listitem>
<simpara>
        Controls which merge tool is used by <citerefentry>
<refentrytitle>git-mergetool</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> when the
        -g/--gui flag is specified. The list below shows the valid built-in values.
        Any other value is treated as a custom merge tool and requires that a
        corresponding mergetool.&lt;guitool&gt;.cmd variable is defined.
</simpara>
<itemizedlist>
<listitem>
<simpara>
araxis
</simpara>
</listitem>
<listitem>
<simpara>
bc
</simpara>
</listitem>
<listitem>
<simpara>
bc3
</simpara>
</listitem>
<listitem>
<simpara>
bc4
</simpara>
</listitem>
<listitem>
<simpara>
codecompare
</simpara>
</listitem>
<listitem>
<simpara>
deltawalker
</simpara>
</listitem>
<listitem>
<simpara>
diffmerge
</simpara>
</listitem>
<listitem>
<simpara>
diffuse
</simpara>
</listitem>
<listitem>
<simpara>
ecmerge
</simpara>
</listitem>
<listitem>
<simpara>
emerge
</simpara>
</listitem>
<listitem>
<simpara>
examdiff
</simpara>
</listitem>
<listitem>
<simpara>
guiffy
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff1
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff2
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff3
</simpara>
</listitem>
<listitem>
<simpara>
kdiff3
</simpara>
</listitem>
<listitem>
<simpara>
meld
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff1
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff2
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff3
</simpara>
</listitem>
<listitem>
<simpara>
opendiff
</simpara>
</listitem>
<listitem>
<simpara>
p4merge
</simpara>
</listitem>
<listitem>
<simpara>
smerge
</simpara>
</listitem>
<listitem>
<simpara>
tkdiff
</simpara>
</listitem>
<listitem>
<simpara>
tortoisemerge
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff1
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff2
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff3
</simpara>
</listitem>
<listitem>
<simpara>
winmerge
</simpara>
</listitem>
<listitem>
<simpara>
xxdiff
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.verbosity
</term>
<listitem>
<simpara>
        Controls the amount of output shown by the recursive merge
        strategy.  Level 0 outputs nothing except a final error
        message if conflicts were detected. Level 1 outputs only
        conflicts, 2 outputs conflicts and file changes.  Level 5 and
        above outputs debugging information.  The default is level 2.
        Can be overridden by the <literal>GIT_MERGE_VERBOSITY</literal> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.name
</term>
<listitem>
<simpara>
        Defines a human-readable name for a custom low-level
        merge driver.  See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.driver
</term>
<listitem>
<simpara>
        Defines the command that implements a custom low-level
        merge driver.  See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.recursive
</term>
<listitem>
<simpara>
        Names a low-level merge driver to be used when
        performing an internal merge between common ancestors.
        See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.mergeOptions
</term>
<listitem>
<simpara>
        Sets default options for merging into branch &lt;name&gt;. The syntax and
        supported options are the same as those of <emphasis>git merge</emphasis>, but option
        values containing whitespace characters are currently not supported.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>git-fmt-merge-msg</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-pull</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-reset</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-ls-files</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-rm</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-mergetool</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
