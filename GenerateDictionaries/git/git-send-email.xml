<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-send-email</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-send-email</refname>
  <refpurpose>Send a collection of patches as emails</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git send-email</emphasis> [&lt;options&gt;] &lt;file|directory|rev-list options&gt;&#8230;
<emphasis>git send-email</emphasis> --dump-aliases</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Takes the patches given on the command line and emails them out.
Patches can be specified as files, directories (which will send all
files in the directory), or directly as a revision list.  In the
last case, any format accepted by <citerefentry>
<refentrytitle>git-format-patch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> can
be passed to git send-email.</simpara>
<simpara>The header of the email is configurable via command-line options.  If not
specified on the command line, the user will be prompted with a ReadLine
enabled interface to provide the necessary information.</simpara>
<simpara>There are two formats accepted for patch files:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
mbox format files
</simpara>
<simpara>This is what <citerefentry>
<refentrytitle>git-format-patch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> generates.  Most headers and MIME
formatting are ignored.</simpara>
</listitem>
<listitem>
<simpara>
The original format used by Greg Kroah-Hartman&#8217;s <emphasis>send_lots_of_email.pl</emphasis>
   script
</simpara>
<simpara>This format expects the first line of the file to contain the "Cc:" value
and the "Subject:" of the message as the second line.</simpara>
</listitem>
</orderedlist>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<refsect2 id="_composing">
<title>Composing</title>
<variablelist>
<varlistentry>
<term>
--annotate
</term>
<listitem>
<simpara>
        Review and edit each patch you&#8217;re about to send. Default is the value
        of <literal>sendemail.annotate</literal>. See the CONFIGURATION section for
        <literal>sendemail.multiEdit</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--bcc=&lt;address&gt;,&#8230;
</term>
<listitem>
<simpara>
        Specify a "Bcc:" value for each email. Default is the value of
        <literal>sendemail.bcc</literal>.
</simpara>
<simpara>This option may be specified multiple times.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--cc=&lt;address&gt;,&#8230;
</term>
<listitem>
<simpara>
        Specify a starting "Cc:" value for each email.
        Default is the value of <literal>sendemail.cc</literal>.
</simpara>
<simpara>This option may be specified multiple times.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--compose
</term>
<listitem>
<simpara>
        Invoke a text editor (see GIT_EDITOR in <citerefentry>
<refentrytitle>git-var</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)
        to edit an introductory message for the patch series.
</simpara>
<simpara>When <literal>--compose</literal> is used, git send-email will use the From, Subject, and
In-Reply-To headers specified in the message. If the body of the message
(what you type after the headers and a blank line) only contains blank
(or Git: prefixed) lines, the summary won&#8217;t be sent, but From, Subject,
and In-Reply-To headers will be used unless they are removed.</simpara>
<simpara>Missing From or In-Reply-To headers will be prompted for.</simpara>
<simpara>See the CONFIGURATION section for <literal>sendemail.multiEdit</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--from=&lt;address&gt;
</term>
<listitem>
<simpara>
        Specify the sender of the emails.  If not specified on the command line,
        the value of the <literal>sendemail.from</literal> configuration option is used.  If
        neither the command-line option nor <literal>sendemail.from</literal> are set, then the
        user will be prompted for the value.  The default for the prompt will be
        the value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not
        set, as returned by "git var -l".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--reply-to=&lt;address&gt;
</term>
<listitem>
<simpara>
        Specify the address where replies from recipients should go to.
        Use this if replies to messages should go to another address than what
        is specified with the --from parameter.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--in-reply-to=&lt;identifier&gt;
</term>
<listitem>
<simpara>
        Make the first mail (or all the mails with <literal>--no-thread</literal>) appear as a
        reply to the given Message-Id, which avoids breaking threads to
        provide a new patch series.
        The second and subsequent emails will be sent as replies according to
        the <literal>--[no-]chain-reply-to</literal> setting.
</simpara>
<simpara>So for example when <literal>--thread</literal> and <literal>--no-chain-reply-to</literal> are specified, the
second and subsequent patches will be replies to the first one like in the
illustration below where <literal>[PATCH v2 0/3]</literal> is in reply to <literal>[PATCH 0/2]</literal>:</simpara>
<literallayout class="monospaced">[PATCH 0/2] Here is what I did...
  [PATCH 1/2] Clean up and tests
  [PATCH 2/2] Implementation
  [PATCH v2 0/3] Here is a reroll
    [PATCH v2 1/3] Clean up
    [PATCH v2 2/3] New tests
    [PATCH v2 3/3] Implementation</literallayout>
<simpara>Only necessary if --compose is also set.  If --compose
is not set, this will be prompted for.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--subject=&lt;string&gt;
</term>
<listitem>
<simpara>
        Specify the initial subject of the email thread.
        Only necessary if --compose is also set.  If --compose
        is not set, this will be prompted for.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--to=&lt;address&gt;,&#8230;
</term>
<listitem>
<simpara>
        Specify the primary recipient of the emails generated. Generally, this
        will be the upstream maintainer of the project involved. Default is the
        value of the <literal>sendemail.to</literal> configuration value; if that is unspecified,
        and --to-cmd is not specified, this will be prompted for.
</simpara>
<simpara>This option may be specified multiple times.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--8bit-encoding=&lt;encoding&gt;
</term>
<listitem>
<simpara>
        When encountering a non-ASCII message or subject that does not
        declare its encoding, add headers/quoting to indicate it is
        encoded in &lt;encoding&gt;.  Default is the value of the
        <emphasis>sendemail.assume8bitEncoding</emphasis>; if that is unspecified, this
        will be prompted for if any non-ASCII files are encountered.
</simpara>
<simpara>Note that no attempts whatsoever are made to validate the encoding.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--compose-encoding=&lt;encoding&gt;
</term>
<listitem>
<simpara>
        Specify encoding of compose message. Default is the value of the
        <emphasis>sendemail.composeencoding</emphasis>; if that is unspecified, UTF-8 is assumed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--transfer-encoding=(7bit|8bit|quoted-printable|base64|auto)
</term>
<listitem>
<simpara>
        Specify the transfer encoding to be used to send the message over SMTP.
        7bit will fail upon encountering a non-ASCII message.  quoted-printable
        can be useful when the repository contains files that contain carriage
        returns, but makes the raw patch email file (as saved from a MUA) much
        harder to inspect manually.  base64 is even more fool proof, but also
        even more opaque.  auto will use 8bit when possible, and quoted-printable
        otherwise.
</simpara>
<simpara>Default is the value of the <literal>sendemail.transferEncoding</literal> configuration
value; if that is unspecified, default to <literal>auto</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--xmailer
</term>
<term>
--no-xmailer
</term>
<listitem>
<simpara>
        Add (or prevent adding) the "X-Mailer:" header.  By default,
        the header is added, but it can be turned off by setting the
        <literal>sendemail.xmailer</literal> configuration variable to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
<refsect2 id="_sending">
<title>Sending</title>
<variablelist>
<varlistentry>
<term>
--envelope-sender=&lt;address&gt;
</term>
<listitem>
<simpara>
        Specify the envelope sender used to send the emails.
        This is useful if your default address is not the address that is
        subscribed to a list. In order to use the <emphasis>From</emphasis> address, set the
        value to "auto". If you use the sendmail binary, you must have
        suitable privileges for the -f parameter.  Default is the value of the
        <literal>sendemail.envelopeSender</literal> configuration variable; if that is
        unspecified, choosing the envelope sender is left to your MTA.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--sendmail-cmd=&lt;command&gt;
</term>
<listitem>
<simpara>
        Specify a command to run to send the email. The command should
        be sendmail-like; specifically, it must support the <literal>-i</literal> option.
        The command will be executed in the shell if necessary.  Default
        is the value of <literal>sendemail.sendmailcmd</literal>.  If unspecified, and if
        --smtp-server is also unspecified, git-send-email will search
        for <literal>sendmail</literal> in <literal>/usr/sbin</literal>, <literal>/usr/lib</literal> and $PATH.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--smtp-encryption=&lt;encryption&gt;
</term>
<listitem>
<simpara>
        Specify the encryption to use, either <emphasis>ssl</emphasis> or <emphasis>tls</emphasis>.  Any other
        value reverts to plain SMTP.  Default is the value of
        <literal>sendemail.smtpEncryption</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--smtp-domain=&lt;FQDN&gt;
</term>
<listitem>
<simpara>
        Specifies the Fully Qualified Domain Name (FQDN) used in the
        HELO/EHLO command to the SMTP server.  Some servers require the
        FQDN to match your IP address.  If not set, git send-email attempts
        to determine your FQDN automatically.  Default is the value of
        <literal>sendemail.smtpDomain</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--smtp-auth=&lt;mechanisms&gt;
</term>
<listitem>
<simpara>
        Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting
        forces using only the listed mechanisms. Example:
</simpara>
<literallayout class="monospaced">$ git send-email --smtp-auth="PLAIN LOGIN GSSAPI" ...</literallayout><simpara></simpara>
<simpara>If at least one of the specified mechanisms matches the ones advertised by the
SMTP server and if it is supported by the utilized SASL library, the mechanism
is used for authentication. If neither <emphasis>sendemail.smtpAuth</emphasis> nor <literal>--smtp-auth</literal>
is specified, all mechanisms supported by the SASL library can be used. The
special value <emphasis>none</emphasis> maybe specified to completely disable authentication
independently of <literal>--smtp-user</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--smtp-pass[=&lt;password&gt;]
</term>
<listitem>
<simpara>
        Password for SMTP-AUTH. The argument is optional: If no
        argument is specified, then the empty string is used as
        the password. Default is the value of <literal>sendemail.smtpPass</literal>,
        however <literal>--smtp-pass</literal> always overrides this value.
</simpara>
<simpara>Furthermore, passwords need not be specified in configuration files
or on the command line. If a username has been specified (with
<literal>--smtp-user</literal> or a <literal>sendemail.smtpUser</literal>), but no password has been
specified (with <literal>--smtp-pass</literal> or <literal>sendemail.smtpPass</literal>), then
a password is obtained using <emphasis>git-credential</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-smtp-auth
</term>
<listitem>
<simpara>
        Disable SMTP authentication. Short hand for <literal>--smtp-auth=none</literal>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--smtp-server=&lt;host&gt;
</term>
<listitem>
<simpara>
        If set, specifies the outgoing SMTP server to use (e.g.
        <literal>smtp.example.com</literal> or a raw IP address).  If unspecified, and if
        <literal>--sendmail-cmd</literal> is also unspecified, the default is to search
        for <literal>sendmail</literal> in <literal>/usr/sbin</literal>, <literal>/usr/lib</literal> and $PATH if such a
        program is available, falling back to <literal>localhost</literal> otherwise.
</simpara>
<simpara>For backward compatibility, this option can also specify a full pathname
of a sendmail-like program instead; the program must support the <literal>-i</literal>
option.  This method does not support passing arguments or using plain
command names.  For those use cases, consider using <literal>--sendmail-cmd</literal>
instead.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--smtp-server-port=&lt;port&gt;
</term>
<listitem>
<simpara>
        Specifies a port different from the default port (SMTP
        servers typically listen to smtp port 25, but may also listen to
        submission port 587, or the common SSL smtp port 465);
        symbolic port names (e.g. "submission" instead of 587)
        are also accepted. The port can also be set with the
        <literal>sendemail.smtpServerPort</literal> configuration variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--smtp-server-option=&lt;option&gt;
</term>
<listitem>
<simpara>
        If set, specifies the outgoing SMTP server option to use.
        Default value can be specified by the <literal>sendemail.smtpServerOption</literal>
        configuration option.
</simpara>
<simpara>The --smtp-server-option option must be repeated for each option you want
to pass to the server. Likewise, different lines in the configuration files
must be used for each option.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--smtp-ssl
</term>
<listitem>
<simpara>
        Legacy alias for <emphasis>--smtp-encryption ssl</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--smtp-ssl-cert-path
</term>
<listitem>
<simpara>
        Path to a store of trusted CA certificates for SMTP SSL/TLS
        certificate validation (either a directory that has been processed
        by <emphasis>c_rehash</emphasis>, or a single file containing one or more PEM format
        certificates concatenated together: see verify(1) -CAfile and
        -CApath for more information on these). Set it to an empty string
        to disable certificate verification. Defaults to the value of the
        <literal>sendemail.smtpsslcertpath</literal> configuration variable, if set, or the
        backing SSL library&#8217;s compiled-in default otherwise (which should
        be the best choice on most platforms).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--smtp-user=&lt;user&gt;
</term>
<listitem>
<simpara>
        Username for SMTP-AUTH. Default is the value of <literal>sendemail.smtpUser</literal>;
        if a username is not specified (with <literal>--smtp-user</literal> or <literal>sendemail.smtpUser</literal>),
        then authentication is not attempted.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--smtp-debug=0|1
</term>
<listitem>
<simpara>
        Enable (1) or disable (0) debug output. If enabled, SMTP
        commands and replies will be printed. Useful to debug TLS
        connection and authentication problems.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--batch-size=&lt;num&gt;
</term>
<listitem>
<simpara>
        Some email servers (e.g. smtp.163.com) limit the number emails to be
        sent per session (connection) and this will lead to a failure when
        sending many messages.  With this option, send-email will disconnect after
        sending $&lt;num&gt; messages and wait for a few seconds (see --relogin-delay)
        and reconnect, to work around such a limit.  You may want to
        use some form of credential helper to avoid having to retype
        your password every time this happens.  Defaults to the
        <literal>sendemail.smtpBatchSize</literal> configuration variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--relogin-delay=&lt;int&gt;
</term>
<listitem>
<simpara>
        Waiting $&lt;int&gt; seconds before reconnecting to SMTP server. Used together
        with --batch-size option.  Defaults to the <literal>sendemail.smtpReloginDelay</literal>
        configuration variable.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
<refsect2 id="_automating">
<title>Automating</title>
<variablelist>
<varlistentry>
<term>
--no-[to|cc|bcc]
</term>
<listitem>
<simpara>
        Clears any list of "To:", "Cc:", "Bcc:" addresses previously
        set via config.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-identity
</term>
<listitem>
<simpara>
        Clears the previously read value of <literal>sendemail.identity</literal> set
        via config, if any.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--to-cmd=&lt;command&gt;
</term>
<listitem>
<simpara>
        Specify a command to execute once per patch file which
        should generate patch file specific "To:" entries.
        Output of this command must be single email address per line.
        Default is the value of <emphasis>sendemail.tocmd</emphasis> configuration value.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--cc-cmd=&lt;command&gt;
</term>
<listitem>
<simpara>
        Specify a command to execute once per patch file which
        should generate patch file specific "Cc:" entries.
        Output of this command must be single email address per line.
        Default is the value of <literal>sendemail.ccCmd</literal> configuration value.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]chain-reply-to
</term>
<listitem>
<simpara>
        If this is set, each email will be sent as a reply to the previous
        email sent.  If disabled with "--no-chain-reply-to", all emails after
        the first will be sent as replies to the first email sent.  When using
        this, it is recommended that the first file given be an overview of the
        entire patch series. Disabled by default, but the <literal>sendemail.chainReplyTo</literal>
        configuration variable can be used to enable it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--identity=&lt;identity&gt;
</term>
<listitem>
<simpara>
        A configuration identity. When given, causes values in the
        <emphasis>sendemail.&lt;identity&gt;</emphasis> subsection to take precedence over
        values in the <emphasis>sendemail</emphasis> section. The default identity is
        the value of <literal>sendemail.identity</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]signed-off-by-cc
</term>
<listitem>
<simpara>
        If this is set, add emails found in the <literal>Signed-off-by</literal> trailer or Cc: lines to the
        cc list. Default is the value of <literal>sendemail.signedoffbycc</literal> configuration
        value; if that is unspecified, default to --signed-off-by-cc.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]cc-cover
</term>
<listitem>
<simpara>
        If this is set, emails found in Cc: headers in the first patch of
        the series (typically the cover letter) are added to the cc list
        for each email set. Default is the value of <emphasis>sendemail.cccover</emphasis>
        configuration value; if that is unspecified, default to --no-cc-cover.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]to-cover
</term>
<listitem>
<simpara>
        If this is set, emails found in To: headers in the first patch of
        the series (typically the cover letter) are added to the to list
        for each email set. Default is the value of <emphasis>sendemail.tocover</emphasis>
        configuration value; if that is unspecified, default to --no-to-cover.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--suppress-cc=&lt;category&gt;
</term>
<listitem>
<simpara>
        Specify an additional category of recipients to suppress the
        auto-cc of:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>author</emphasis> will avoid including the patch author.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>self</emphasis> will avoid including the sender.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>cc</emphasis> will avoid including anyone mentioned in Cc lines in the patch header
  except for self (use <emphasis>self</emphasis> for that).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>bodycc</emphasis> will avoid including anyone mentioned in Cc lines in the
  patch body (commit message) except for self (use <emphasis>self</emphasis> for that).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>sob</emphasis> will avoid including anyone mentioned in the Signed-off-by trailers except
  for self (use <emphasis>self</emphasis> for that).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>misc-by</emphasis> will avoid including anyone mentioned in Acked-by,
  Reviewed-by, Tested-by and other "-by" lines in the patch body,
  except Signed-off-by (use <emphasis>sob</emphasis> for that).
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>cccmd</emphasis> will avoid running the --cc-cmd.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>body</emphasis> is equivalent to <emphasis>sob</emphasis> + <emphasis>bodycc</emphasis> + <emphasis>misc-by</emphasis>.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>all</emphasis> will suppress all auto cc values.
</simpara>
</listitem>
</itemizedlist>
<simpara>Default is the value of <literal>sendemail.suppresscc</literal> configuration value; if
that is unspecified, default to <emphasis>self</emphasis> if --suppress-from is
specified, as well as <emphasis>body</emphasis> if --no-signed-off-cc is specified.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]suppress-from
</term>
<listitem>
<simpara>
        If this is set, do not add the From: address to the cc: list.
        Default is the value of <literal>sendemail.suppressFrom</literal> configuration
        value; if that is unspecified, default to --no-suppress-from.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]thread
</term>
<listitem>
<simpara>
        If this is set, the In-Reply-To and References headers will be
        added to each email sent.  Whether each mail refers to the
        previous email (<literal>deep</literal> threading per <emphasis>git format-patch</emphasis>
        wording) or to the first email (<literal>shallow</literal> threading) is
        governed by "--[no-]chain-reply-to".
</simpara>
<simpara>If disabled with "--no-thread", those headers will not be added
(unless specified with --in-reply-to).  Default is the value of the
<literal>sendemail.thread</literal> configuration value; if that is unspecified,
default to --thread.</simpara>
<simpara>It is up to the user to ensure that no In-Reply-To header already
exists when <emphasis>git send-email</emphasis> is asked to add it (especially note that
<emphasis>git format-patch</emphasis> can be configured to do the threading itself).
Failure to do so may not produce the expected result in the
recipient&#8217;s MUA.</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
<refsect2 id="_administering">
<title>Administering</title>
<variablelist>
<varlistentry>
<term>
--confirm=&lt;mode&gt;
</term>
<listitem>
<simpara>
        Confirm just before sending:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>always</emphasis> will always confirm before sending
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>never</emphasis> will never confirm before sending
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>cc</emphasis> will confirm before sending when send-email has automatically
  added addresses from the patch to the Cc list
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>compose</emphasis> will confirm before sending the first message when using --compose.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>auto</emphasis> is equivalent to <emphasis>cc</emphasis> + <emphasis>compose</emphasis>
</simpara>
</listitem>
</itemizedlist>
<simpara>Default is the value of <literal>sendemail.confirm</literal> configuration value; if that
is unspecified, default to <emphasis>auto</emphasis> unless any of the suppress options
have been specified, in which case default to <emphasis>compose</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--dry-run
</term>
<listitem>
<simpara>
        Do everything except actually send the emails.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]format-patch
</term>
<listitem>
<simpara>
        When an argument may be understood either as a reference or as a file name,
        choose to understand it as a format-patch argument (<literal>--format-patch</literal>)
        or as a file name (<literal>--no-format-patch</literal>). By default, when such a conflict
        occurs, git send-email will fail.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--quiet
</term>
<listitem>
<simpara>
        Make git-send-email less verbose.  One line per email should be
        all that is output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]validate
</term>
<listitem>
<simpara>
        Perform sanity checks on patches.
        Currently, validation means the following:
</simpara>
<itemizedlist>
<listitem>
<simpara>
Invoke the sendemail-validate hook if present (see <citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>).
</simpara>
</listitem>
<listitem>
<simpara>
Warn of patches that contain lines longer than
                        998 characters unless a suitable transfer encoding
                        (<emphasis>auto</emphasis>, <emphasis>base64</emphasis>, or <emphasis>quoted-printable</emphasis>) is used;
                        this is due to SMTP limits as described by
                        <ulink url="http://www.ietf.org/rfc/rfc5322.txt">http://www.ietf.org/rfc/rfc5322.txt</ulink>.
</simpara>
</listitem>
</itemizedlist>
<simpara>Default is the value of <literal>sendemail.validate</literal>; if this is not set,
default to <literal>--validate</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--force
</term>
<listitem>
<simpara>
        Send emails even if safety checks would prevent it.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
<refsect2 id="_information">
<title>Information</title>
<variablelist>
<varlistentry>
<term>
--dump-aliases
</term>
<listitem>
<simpara>
        Instead of the normal operation, dump the shorthand alias names from
        the configured alias file(s), one per line in alphabetical order. Note,
        this only includes the alias name and not its expanded email addresses.
        See <emphasis>sendemail.aliasesfile</emphasis> for more information about aliases.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
</refsect1>
<refsect1 id="_configuration">
<title>CONFIGURATION</title>
<variablelist>
<varlistentry>
<term>
sendemail.aliasesFile
</term>
<listitem>
<simpara>
        To avoid typing long email addresses, point this to one or more
        email aliases files.  You must also supply <literal>sendemail.aliasFileType</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.aliasFileType
</term>
<listitem>
<simpara>
        Format of the file(s) specified in sendemail.aliasesFile. Must be
        one of <emphasis>mutt</emphasis>, <emphasis>mailrc</emphasis>, <emphasis>pine</emphasis>, <emphasis>elm</emphasis>, or <emphasis>gnus</emphasis>, or <emphasis>sendmail</emphasis>.
</simpara>
<simpara>What an alias file in each format looks like can be found in
the documentation of the email program of the same name. The
differences and limitations from the standard formats are
described below:</simpara>
<variablelist>
<varlistentry>
<term>
sendmail
</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>
Quoted aliases and quoted addresses are not supported: lines that
        contain a <literal>"</literal> symbol are ignored.
</simpara>
</listitem>
<listitem>
<simpara>
Redirection to a file (<literal>/path/name</literal>) or pipe (<literal>|command</literal>) is not
        supported.
</simpara>
</listitem>
<listitem>
<simpara>
File inclusion (<literal>:include: /path/name</literal>) is not supported.
</simpara>
</listitem>
<listitem>
<simpara>
Warnings are printed on the standard error output for any
        explicitly unsupported constructs, and any other lines that are not
        recognized by the parser.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.multiEdit
</term>
<listitem>
<simpara>
        If true (default), a single editor instance will be spawned to edit
        files you have to edit (patches when <literal>--annotate</literal> is used, and the
        summary when <literal>--compose</literal> is used). If false, files will be edited one
        after the other, spawning a new editor each time.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.confirm
</term>
<listitem>
<simpara>
        Sets the default for whether to confirm before sending. Must be
        one of <emphasis>always</emphasis>, <emphasis>never</emphasis>, <emphasis>cc</emphasis>, <emphasis>compose</emphasis>, or <emphasis>auto</emphasis>. See <literal>--confirm</literal>
        in the previous section for the meaning of these values.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<refsect2 id="_use_gmail_as_the_smtp_server">
<title>Use gmail as the smtp server</title>
<simpara>To use <emphasis>git send-email</emphasis> to send your patches through the GMail SMTP server,
edit ~/.gitconfig to specify your account settings:</simpara>
<literallayout class="monospaced">[sendemail]
        smtpEncryption = tls
        smtpServer = smtp.gmail.com
        smtpUser = yourname@gmail.com
        smtpServerPort = 587</literallayout><simpara></simpara>
<simpara>If you have multi-factor authentication set up on your Gmail account, you will
need to generate an app-specific password for use with <emphasis>git send-email</emphasis>. Visit
<ulink url="https://security.google.com/settings/security/apppasswords">https://security.google.com/settings/security/apppasswords</ulink> to create it.</simpara>
<simpara>If you do not have multi-factor authentication set up on your Gmail account,
you will need to allow less secure app access. Visit
<ulink url="https://myaccount.google.com/lesssecureapps">https://myaccount.google.com/lesssecureapps</ulink> to enable it.</simpara>
<simpara>Once your commits are ready to be sent to the mailing list, run the
following commands:</simpara>
<literallayout class="monospaced">$ git format-patch --cover-letter -M origin/master -o outgoing/
$ edit outgoing/0000-*
$ git send-email outgoing/*</literallayout>
<simpara>The first time you run it, you will be prompted for your credentials.  Enter the
app-specific or your regular password as appropriate.  If you have credential
helper configured (see <citerefentry>
<refentrytitle>git-credential</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>), the password will be saved in
the credential store so you won&#8217;t have to type it the next time.</simpara>
<simpara>Note: the following core Perl modules that may be installed with your
distribution of Perl are required:
MIME::Base64, MIME::QuotedPrint, Net::Domain and Net::SMTP.
These additional Perl modules are also required:
Authen::SASL and Mail::Address.</simpara>
</refsect2>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>git-format-patch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-imap-send</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, mbox(5)</simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
