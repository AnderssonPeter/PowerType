<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-patch-id</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-patch-id</refname>
  <refpurpose>Compute unique ID for a patch</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git patch-id</emphasis> [--stable | --unstable]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Read a patch from the standard input and compute the patch ID for it.</simpara>
<simpara>A "patch ID" is nothing but a sum of SHA-1 of the file diffs associated with a
patch, with whitespace and line numbers ignored.  As such, it&#8217;s "reasonably
stable", but at the same time also reasonably unique, i.e., two patches that
have the same "patch ID" are almost guaranteed to be the same thing.</simpara>
<simpara>IOW, you can use this thing to look for likely duplicate commits.</simpara>
<simpara>When dealing with <emphasis>git diff-tree</emphasis> output, it takes advantage of
the fact that the patch is prefixed with the object name of the
commit, and outputs two 40-byte hexadecimal strings.  The first
string is the patch ID, and the second string is the commit ID.
This can be used to make a mapping from patch ID to commit ID.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--stable
</term>
<listitem>
<simpara>
        Use a "stable" sum of hashes as the patch ID. With this option:
</simpara>
<itemizedlist>
<listitem>
<simpara>
Reordering file diffs that make up a patch does not affect the ID.
           In particular, two patches produced by comparing the same two trees
           with two different settings for "-O&lt;orderfile&gt;" result in the same
           patch ID signature, thereby allowing the computed result to be used
           as a key to index some meta-information about the change between
           the two trees;
</simpara>
</listitem>
<listitem>
<simpara>
Result is different from the value produced by git 1.9 and older
           or produced when an "unstable" hash (see --unstable below) is
           configured - even when used on a diff output taken without any use
           of "-O&lt;orderfile&gt;", thereby making existing databases storing such
           "unstable" or historical patch-ids unusable.
</simpara>
<literallayout class="monospaced">This is the default if patchid.stable is set to true.</literallayout>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unstable
</term>
<listitem>
<simpara>
        Use an "unstable" hash as the patch ID. With this option,
        the result produced is compatible with the patch-id value produced
        by git 1.9 and older.  Users with pre-existing databases storing
        patch-ids produced by git 1.9 and older (who do not deal with reordered
        patches) may want to use this option.
</simpara>
<literallayout class="monospaced">This is the default.</literallayout>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
