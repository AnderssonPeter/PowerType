<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-push</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-push</refname>
  <refpurpose>Update remote refs along with associated objects</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git push</emphasis> [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=&lt;git-receive-pack&gt;]
           [--repo=&lt;repository&gt;] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]
           [-u | --set-upstream] [-o &lt;string&gt; | --push-option=&lt;string&gt;]
           [--[no-]signed|--signed=(true|false|if-asked)]
           [--force-with-lease[=&lt;refname&gt;[:&lt;expect&gt;]] [--force-if-includes]]
           [--no-verify] [&lt;repository&gt; [&lt;refspec&gt;&#8230;]]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Updates remote refs using local refs, while sending objects
necessary to complete the given refs.</simpara>
<simpara>You can make interesting things happen to a repository
every time you push into it, by setting up <emphasis>hooks</emphasis> there.  See
documentation for <citerefentry>
<refentrytitle>git-receive-pack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
<simpara>When the command line does not specify where to push with the
<literal>&lt;repository&gt;</literal> argument, <literal>branch.*.remote</literal> configuration for the
current branch is consulted to determine where to push.  If the
configuration is missing, it defaults to <emphasis>origin</emphasis>.</simpara>
<simpara>When the command line does not specify what to push with <literal>&lt;refspec&gt;...</literal>
arguments or <literal>--all</literal>, <literal>--mirror</literal>, <literal>--tags</literal> options, the command finds
the default <literal>&lt;refspec&gt;</literal> by consulting <literal>remote.*.push</literal> configuration,
and if it is not found, honors <literal>push.default</literal> configuration to decide
what to push (See <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for the meaning of <literal>push.default</literal>).</simpara>
<simpara>When neither the command-line nor the configuration specify what to
push, the default behavior is used, which corresponds to the <literal>simple</literal>
value for <literal>push.default</literal>: the current branch is pushed to the
corresponding upstream branch, but as a safety measure, the push is
aborted if the upstream branch does not have the same name as the
local one.</simpara>
</refsect1>
<refsect1 id="_options_anchor_id_options_xreflabel_options">
<title>OPTIONS<anchor id="OPTIONS" xreflabel="[OPTIONS]"/></title>
<variablelist>
<varlistentry>
<term>
&lt;repository&gt;
</term>
<listitem>
<simpara>
        The "remote" repository that is destination of a push
        operation.  This parameter can be either a URL
        (see the section <link linkend="URLS">GIT URLS</link> below) or the name
        of a remote (see the section <link linkend="REMOTES">REMOTES</link> below).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;refspec&gt;&#8230;
</term>
<listitem>
<simpara>
        Specify what destination ref to update with what source object.
        The format of a &lt;refspec&gt; parameter is an optional plus
        <literal>+</literal>, followed by the source object &lt;src&gt;, followed
        by a colon <literal>:</literal>, followed by the destination ref &lt;dst&gt;.
</simpara>
<simpara>The &lt;src&gt; is often the name of the branch you would want to push, but
it can be any arbitrary "SHA-1 expression", such as <literal>master~4</literal> or
<literal>HEAD</literal> (see <citerefentry>
<refentrytitle>gitrevisions</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>).</simpara>
<simpara>The &lt;dst&gt; tells which ref on the remote side is updated with this
push. Arbitrary expressions cannot be used here, an actual ref must
be named.
If <literal>git push [&lt;repository&gt;]</literal> without any <literal>&lt;refspec&gt;</literal> argument is set to
update some ref at the destination with <literal>&lt;src&gt;</literal> with
<literal>remote.&lt;repository&gt;.push</literal> configuration variable, <literal>:&lt;dst&gt;</literal> part can
be omitted&#8212;such a push will update a ref that <literal>&lt;src&gt;</literal> normally updates
without any <literal>&lt;refspec&gt;</literal> on the command line.  Otherwise, missing
<literal>:&lt;dst&gt;</literal> means to update the same ref as the <literal>&lt;src&gt;</literal>.</simpara>
<simpara>If &lt;dst&gt; doesn&#8217;t start with <literal>refs/</literal> (e.g. <literal>refs/heads/master</literal>) we will
try to infer where in <literal>refs/*</literal> on the destination &lt;repository&gt; it
belongs based on the type of &lt;src&gt; being pushed and whether &lt;dst&gt;
is ambiguous.</simpara>
<itemizedlist>
<listitem>
<simpara>
If &lt;dst&gt; unambiguously refers to a ref on the &lt;repository&gt; remote,
  then push to that ref.
</simpara>
</listitem>
<listitem>
<simpara>
If &lt;src&gt; resolves to a ref starting with refs/heads/ or refs/tags/,
  then prepend that to &lt;dst&gt;.
</simpara>
</listitem>
<listitem>
<simpara>
Other ambiguity resolutions might be added in the future, but for
  now any other cases will error out with an error indicating what we
  tried, and depending on the <literal>advice.pushUnqualifiedRefname</literal>
  configuration (see <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>) suggest what refs/
  namespace you may have wanted to push to.
</simpara>
</listitem>
</itemizedlist>
<simpara>The object referenced by &lt;src&gt; is used to update the &lt;dst&gt; reference
on the remote side. Whether this is allowed depends on where in
<literal>refs/*</literal> the &lt;dst&gt; reference lives as described in detail below, in
those sections "update" means any modifications except deletes, which
as noted after the next few sections are treated differently.</simpara>
<simpara>The <literal>refs/heads/*</literal> namespace will only accept commit objects, and
updates only if they can be fast-forwarded.</simpara>
<simpara>The <literal>refs/tags/*</literal> namespace will accept any kind of object (as
commits, trees and blobs can be tagged), and any updates to them will
be rejected.</simpara>
<simpara>It&#8217;s possible to push any type of object to any namespace outside of
<literal>refs/{tags,heads}/*</literal>. In the case of tags and commits, these will be
treated as if they were the commits inside <literal>refs/heads/*</literal> for the
purposes of whether the update is allowed.</simpara>
<simpara>I.e. a fast-forward of commits and tags outside <literal>refs/{tags,heads}/*</literal>
is allowed, even in cases where what&#8217;s being fast-forwarded is not a
commit, but a tag object which happens to point to a new commit which
is a fast-forward of the commit the last tag (or commit) it&#8217;s
replacing. Replacing a tag with an entirely different tag is also
allowed, if it points to the same commit, as well as pushing a peeled
tag, i.e. pushing the commit that existing tag object points to, or a
new tag object which an existing commit points to.</simpara>
<simpara>Tree and blob objects outside of <literal>refs/{tags,heads}/*</literal> will be treated
the same way as if they were inside <literal>refs/tags/*</literal>, any update of them
will be rejected.</simpara>
<simpara>All of the rules described above about what&#8217;s not allowed as an update
can be overridden by adding an the optional leading <literal>+</literal> to a refspec
(or using <literal>--force</literal> command line option). The only exception to this
is that no amount of forcing will make the <literal>refs/heads/*</literal> namespace
accept a non-commit object. Hooks and configuration can also override
or amend these rules, see e.g. <literal>receive.denyNonFastForwards</literal> in
<citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <literal>pre-receive</literal> and <literal>update</literal> in
<citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.</simpara>
<simpara>Pushing an empty &lt;src&gt; allows you to delete the &lt;dst&gt; ref from the
remote repository. Deletions are always accepted without a leading <literal>+</literal>
in the refspec (or <literal>--force</literal>), except when forbidden by configuration
or hooks. See <literal>receive.denyDeletes</literal> in <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and
<literal>pre-receive</literal> and <literal>update</literal> in <citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.</simpara>
<simpara>The special refspec <literal>:</literal> (or <literal>+:</literal> to allow non-fast-forward updates)
directs Git to push "matching" branches: for every branch that exists on
the local side, the remote side is updated if a branch of the same name
already exists on the remote side.</simpara>
<simpara><literal>tag &lt;tag&gt;</literal> means the same as <literal>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--all
</term>
<listitem>
<simpara>
        Push all branches (i.e. refs under <literal>refs/heads/</literal>); cannot be
        used with other &lt;refspec&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--prune
</term>
<listitem>
<simpara>
        Remove remote branches that don&#8217;t have a local counterpart. For example
        a remote branch <literal>tmp</literal> will be removed if a local branch with the same
        name doesn&#8217;t exist any more. This also respects refspecs, e.g.
        <literal>git push --prune remote refs/heads/*:refs/tmp/*</literal> would
        make sure that remote <literal>refs/tmp/foo</literal> will be removed if <literal>refs/heads/foo</literal>
        doesn&#8217;t exist.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--mirror
</term>
<listitem>
<simpara>
        Instead of naming each ref to push, specifies that all
        refs under <literal>refs/</literal> (which includes but is not
        limited to <literal>refs/heads/</literal>, <literal>refs/remotes/</literal>, and <literal>refs/tags/</literal>)
        be mirrored to the remote repository.  Newly created local
        refs will be pushed to the remote end, locally updated refs
        will be force updated on the remote end, and deleted refs
        will be removed from the remote end.  This is the default
        if the configuration option <literal>remote.&lt;remote&gt;.mirror</literal> is
        set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--dry-run
</term>
<listitem>
<simpara>
        Do everything except actually send the updates.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--porcelain
</term>
<listitem>
<simpara>
        Produce machine-readable output.  The output status line for each ref
        will be tab-separated and sent to stdout instead of stderr.  The full
        symbolic names of the refs will be given.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-d
</term>
<term>
--delete
</term>
<listitem>
<simpara>
        All listed refs are deleted from the remote repository. This is
        the same as prefixing all refs with a colon.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--tags
</term>
<listitem>
<simpara>
        All refs under <literal>refs/tags</literal> are pushed, in
        addition to refspecs explicitly listed on the command
        line.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--follow-tags
</term>
<listitem>
<simpara>
        Push all the refs that would be pushed without this option,
        and also push annotated tags in <literal>refs/tags</literal> that are missing
        from the remote but are pointing at commit-ish that are
        reachable from the refs being pushed.  This can also be specified
        with configuration variable <literal>push.followTags</literal>.  For more
        information, see <literal>push.followTags</literal> in <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]signed
</term>
<term>
--signed=(true|false|if-asked)
</term>
<listitem>
<simpara>
        GPG-sign the push request to update refs on the receiving
        side, to allow it to be checked by the hooks and/or be
        logged.  If <literal>false</literal> or <literal>--no-signed</literal>, no signing will be
        attempted.  If <literal>true</literal> or <literal>--signed</literal>, the push will fail if the
        server does not support signed pushes.  If set to <literal>if-asked</literal>,
        sign if and only if the server supports signed pushes.  The push
        will also fail if the actual call to <literal>gpg --sign</literal> fails.  See
        <citerefentry>
<refentrytitle>git-receive-pack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for the details on the receiving end.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]atomic
</term>
<listitem>
<simpara>
        Use an atomic transaction on the remote side if available.
        Either all refs are updated, or on error, no refs are updated.
        If the server does not support atomic pushes the push will fail.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-o &lt;option&gt;
</term>
<term>
--push-option=&lt;option&gt;
</term>
<listitem>
<simpara>
        Transmit the given string to the server, which passes them to
        the pre-receive as well as the post-receive hook. The given string
        must not contain a NUL or LF character.
        When multiple <literal>--push-option=&lt;option&gt;</literal> are given, they are
        all sent to the other side in the order listed on the
        command line.
        When no <literal>--push-option=&lt;option&gt;</literal> is given from the command
        line, the values of configuration variable <literal>push.pushOption</literal>
        are used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--receive-pack=&lt;git-receive-pack&gt;
</term>
<term>
--exec=&lt;git-receive-pack&gt;
</term>
<listitem>
<simpara>
        Path to the <emphasis>git-receive-pack</emphasis> program on the remote
        end.  Sometimes useful when pushing to a remote
        repository over ssh, and you do not have the program in
        a directory on the default $PATH.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]force-with-lease
</term>
<term>
--force-with-lease=&lt;refname&gt;
</term>
<term>
--force-with-lease=&lt;refname&gt;:&lt;expect&gt;
</term>
<listitem>
<simpara>
        Usually, "git push" refuses to update a remote ref that is
        not an ancestor of the local ref used to overwrite it.
</simpara>
<simpara>This option overrides this restriction if the current value of the
remote ref is the expected value.  "git push" fails otherwise.</simpara>
<simpara>Imagine that you have to rebase what you have already published.
You will have to bypass the "must fast-forward" rule in order to
replace the history you originally published with the rebased history.
If somebody else built on top of your original history while you are
rebasing, the tip of the branch at the remote may advance with their
commit, and blindly pushing with <literal>--force</literal> will lose their work.</simpara>
<simpara>This option allows you to say that you expect the history you are
updating is what you rebased and want to replace. If the remote ref
still points at the commit you specified, you can be sure that no
other people did anything to the ref. It is like taking a "lease" on
the ref without explicitly locking it, and the remote ref is updated
only if the "lease" is still valid.</simpara>
<simpara><literal>--force-with-lease</literal> alone, without specifying the details, will protect
all remote refs that are going to be updated by requiring their
current value to be the same as the remote-tracking branch we have
for them.</simpara>
<simpara><literal>--force-with-lease=&lt;refname&gt;</literal>, without specifying the expected value, will
protect the named ref (alone), if it is going to be updated, by
requiring its current value to be the same as the remote-tracking
branch we have for it.</simpara>
<simpara><literal>--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</literal> will protect the named ref (alone),
if it is going to be updated, by requiring its current value to be
the same as the specified value <literal>&lt;expect&gt;</literal> (which is allowed to be
different from the remote-tracking branch we have for the refname,
or we do not even have to have such a remote-tracking branch when
this form is used).  If <literal>&lt;expect&gt;</literal> is the empty string, then the named ref
must not already exist.</simpara>
<simpara>Note that all forms other than <literal>--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</literal>
that specifies the expected current value of the ref explicitly are
still experimental and their semantics may change as we gain experience
with this feature.</simpara>
<simpara>"--no-force-with-lease" will cancel all the previous --force-with-lease on the
command line.</simpara>
<simpara>A general note on safety: supplying this option without an expected
value, i.e. as <literal>--force-with-lease</literal> or <literal>--force-with-lease=&lt;refname&gt;</literal>
interacts very badly with anything that implicitly runs <literal>git fetch</literal> on
the remote to be pushed to in the background, e.g. <literal>git fetch origin</literal>
on your repository in a cronjob.</simpara>
<simpara>The protection it offers over <literal>--force</literal> is ensuring that subsequent
changes your work wasn&#8217;t based on aren&#8217;t clobbered, but this is
trivially defeated if some background process is updating refs in the
background. We don&#8217;t have anything except the remote tracking info to
go by as a heuristic for refs you&#8217;re expected to have seen &amp; are
willing to clobber.</simpara>
<simpara>If your editor or some other system is running <literal>git fetch</literal> in the
background for you a way to mitigate this is to simply set up another
remote:</simpara>
<literallayout class="monospaced">git remote add origin-push $(git config remote.origin.url)
git fetch origin-push</literallayout>
<simpara>Now when the background process runs <literal>git fetch origin</literal> the references
on <literal>origin-push</literal> won&#8217;t be updated, and thus commands like:</simpara>
<literallayout class="monospaced">git push --force-with-lease origin-push</literallayout>
<simpara>Will fail unless you manually run <literal>git fetch origin-push</literal>. This method
is of course entirely defeated by something that runs <literal>git fetch
--all</literal>, in that case you&#8217;d need to either disable it or do something
more tedious like:</simpara>
<literallayout class="monospaced">git fetch              # update 'master' from remote
git tag base master    # mark our base point
git rebase -i master   # rewrite some commits
git push --force-with-lease=master:base master:master</literallayout>
<simpara>I.e. create a <literal>base</literal> tag for versions of the upstream code that you&#8217;ve
seen and are willing to overwrite, then rewrite history, and finally
force push changes to <literal>master</literal> if the remote version is still at
<literal>base</literal>, regardless of what your local <literal>remotes/origin/master</literal> has been
updated to in the background.</simpara>
<simpara>Alternatively, specifying <literal>--force-if-includes</literal> as an ancillary option
along with <literal>--force-with-lease[=&lt;refname&gt;]</literal> (i.e., without saying what
exact commit the ref on the remote side must be pointing at, or which
refs on the remote side are being protected) at the time of "push" will
verify if updates from the remote-tracking refs that may have been
implicitly updated in the background are integrated locally before
allowing a forced update.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f
</term>
<term>
--force
</term>
<listitem>
<simpara>
        Usually, the command refuses to update a remote ref that is
        not an ancestor of the local ref used to overwrite it.
        Also, when <literal>--force-with-lease</literal> option is used, the command refuses
        to update a remote ref whose current value does not match
        what is expected.
</simpara>
<simpara>This flag disables these checks, and can cause the remote repository
to lose commits; use it with care.</simpara>
<simpara>Note that <literal>--force</literal> applies to all the refs that are pushed, hence
using it with <literal>push.default</literal> set to <literal>matching</literal> or with multiple push
destinations configured with <literal>remote.*.push</literal> may overwrite refs
other than the current branch (including local refs that are
strictly behind their remote counterpart).  To force a push to only
one branch, use a <literal>+</literal> in front of the refspec to push (e.g <literal>git push
origin +master</literal> to force a push to the <literal>master</literal> branch). See the
<literal>&lt;refspec&gt;...</literal> section above for details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]force-if-includes
</term>
<listitem>
<simpara>
        Force an update only if the tip of the remote-tracking ref
        has been integrated locally.
</simpara>
<simpara>This option enables a check that verifies if the tip of the
remote-tracking ref is reachable from one of the "reflog" entries of
the local branch based in it for a rewrite. The check ensures that any
updates from the remote have been incorporated locally by rejecting the
forced update if that is not the case.</simpara>
<simpara>If the option is passed without specifying <literal>--force-with-lease</literal>, or
specified along with <literal>--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</literal>, it is
a "no-op".</simpara>
<simpara>Specifying <literal>--no-force-if-includes</literal> disables this behavior.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--repo=&lt;repository&gt;
</term>
<listitem>
<simpara>
        This option is equivalent to the &lt;repository&gt; argument. If both
        are specified, the command-line argument takes precedence.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-u
</term>
<term>
--set-upstream
</term>
<listitem>
<simpara>
        For every branch that is up to date or successfully pushed, add
        upstream (tracking) reference, used by argument-less
        <citerefentry>
<refentrytitle>git-pull</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and other commands. For more information,
        see <literal>branch.&lt;name&gt;.merge</literal> in <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]thin
</term>
<listitem>
<simpara>
        These options are passed to <citerefentry>
<refentrytitle>git-send-pack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. A thin transfer
        significantly reduces the amount of sent data when the sender and
        receiver share many of the same objects in common. The default is
        <literal>--thin</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        Suppress all output, including the listing of updated refs,
        unless an error occurs. Progress is not reported to the standard
        error stream.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Run verbosely.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--progress
</term>
<listitem>
<simpara>
        Progress status is reported on the standard error stream
        by default when it is attached to a terminal, unless -q
        is specified. This flag forces progress status even if the
        standard error stream is not directed to a terminal.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-recurse-submodules
</term>
<term>
--recurse-submodules=check|on-demand|only|no
</term>
<listitem>
<simpara>
        May be used to make sure all submodule commits used by the
        revisions to be pushed are available on a remote-tracking branch.
        If <emphasis>check</emphasis> is used Git will verify that all submodule commits that
        changed in the revisions to be pushed are available on at least one
        remote of the submodule. If any commits are missing the push will
        be aborted and exit with non-zero status. If <emphasis>on-demand</emphasis> is used
        all submodules that changed in the revisions to be pushed will be
        pushed. If on-demand was not able to push all necessary revisions it will
        also be aborted and exit with non-zero status. If <emphasis>only</emphasis> is used all
        submodules will be recursively pushed while the superproject is left
        unpushed. A value of <emphasis>no</emphasis> or using <literal>--no-recurse-submodules</literal> can be used
        to override the push.recurseSubmodules configuration variable when no
        submodule recursion is required.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]verify
</term>
<listitem>
<simpara>
        Toggle the pre-push hook (see <citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>).  The
        default is --verify, giving the hook a chance to prevent the
        push.  With --no-verify, the hook is bypassed completely.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-4
</term>
<term>
--ipv4
</term>
<listitem>
<simpara>
        Use IPv4 addresses only, ignoring IPv6 addresses.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-6
</term>
<term>
--ipv6
</term>
<listitem>
<simpara>
        Use IPv6 addresses only, ignoring IPv4 addresses.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_git_urls_anchor_id_urls_xreflabel_urls">
<title>GIT URLS<anchor id="URLS" xreflabel="[URLS]"/></title>
<simpara>In general, URLs contain information about the transport protocol, the
address of the remote server, and the path to the repository.
Depending on the transport protocol, some of this information may be
absent.</simpara>
<simpara>Git supports ssh, git, http, and https protocols (in addition, ftp,
and ftps can be used for fetching, but this is inefficient and
deprecated; do not use it).</simpara>
<simpara>The native transport (i.e. git:// URL) does no authentication and
should be used with caution on unsecured networks.</simpara>
<simpara>The following syntaxes may be used with them:</simpara>
<itemizedlist>
<listitem>
<simpara>
ssh://&#91;user@&#93;host.xz&#91;:port&#93;/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
git://host.xz&#91;:port&#93;/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
http&#91;s&#93;://host.xz&#91;:port&#93;/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
ftp&#91;s&#93;://host.xz&#91;:port&#93;/path/to/repo.git/
</simpara>
</listitem>
</itemizedlist>
<simpara>An alternative scp-like syntax may also be used with the ssh protocol:</simpara>
<itemizedlist>
<listitem>
<simpara>
&#91;user@&#93;host.xz:path/to/repo.git/
</simpara>
</listitem>
</itemizedlist>
<simpara>This syntax is only recognized if there are no slashes before the
first colon. This helps differentiate a local path that contains a
colon. For example the local path <literal>foo:bar</literal> could be specified as an
absolute path or <literal>./foo:bar</literal> to avoid being misinterpreted as an ssh
url.</simpara>
<simpara>The ssh and git protocols additionally support ~username expansion:</simpara>
<itemizedlist>
<listitem>
<simpara>
ssh://&#91;user@&#93;host.xz&#91;:port&#93;/~&#91;user&#93;/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
git://host.xz&#91;:port&#93;/~&#91;user&#93;/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
&#91;user@&#93;host.xz:/~&#91;user&#93;/path/to/repo.git/
</simpara>
</listitem>
</itemizedlist>
<simpara>For local repositories, also supported by Git natively, the following
syntaxes may be used:</simpara>
<itemizedlist>
<listitem>
<simpara>
/path/to/repo.git/
</simpara>
</listitem>
<listitem>
<simpara>
file:///path/to/repo.git/
</simpara>
</listitem>
</itemizedlist>
<simpara>These two syntaxes are mostly equivalent, except when cloning, when
the former implies --local option. See <citerefentry>
<refentrytitle>git-clone</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for
details.</simpara>
<simpara><emphasis>git clone</emphasis>, <emphasis>git fetch</emphasis> and <emphasis>git pull</emphasis>, but not <emphasis>git push</emphasis>, will also
accept a suitable bundle file. See <citerefentry>
<refentrytitle>git-bundle</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
<simpara>When Git doesn&#8217;t know how to handle a certain transport protocol, it
attempts to use the <emphasis>remote-&lt;transport&gt;</emphasis> remote helper, if one
exists. To explicitly request a remote helper, the following syntax
may be used:</simpara>
<itemizedlist>
<listitem>
<simpara>
&lt;transport&gt;::&lt;address&gt;
</simpara>
</listitem>
</itemizedlist>
<simpara>where &lt;address&gt; may be a path, a server and path, or an arbitrary
URL-like string recognized by the specific remote helper being
invoked. See <citerefentry>
<refentrytitle>gitremote-helpers</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> for details.</simpara>
<simpara>If there are a large number of similarly-named remote repositories and
you want to use a different format for them (such that the URLs you
use will be rewritten into URLs that work), you can create a
configuration section of the form:</simpara>
<literallayout class="monospaced">        [url "&lt;actual url base&gt;"]
                insteadOf = &lt;other url base&gt;</literallayout><simpara></simpara>
<simpara>For example, with this:</simpara>
<literallayout class="monospaced">        [url "git://git.host.xz/"]
                insteadOf = host.xz:/path/to/
                insteadOf = work:</literallayout><simpara></simpara>
<simpara>a URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will be
rewritten in any context that takes a URL to be "git://git.host.xz/repo.git".</simpara>
<simpara>If you want to rewrite URLs for push only, you can create a
configuration section of the form:</simpara>
<literallayout class="monospaced">        [url "&lt;actual url base&gt;"]
                pushInsteadOf = &lt;other url base&gt;</literallayout><simpara></simpara>
<simpara>For example, with this:</simpara>
<literallayout class="monospaced">        [url "ssh://example.org/"]
                pushInsteadOf = git://example.org/</literallayout><simpara></simpara>
<simpara>a URL like "git://example.org/path/to/repo.git" will be rewritten to
"ssh://example.org/path/to/repo.git" for pushes, but pulls will still
use the original URL.</simpara>
</refsect1>
<refsect1 id="_remotes_anchor_id_remotes_xreflabel_remotes">
<title>REMOTES<anchor id="REMOTES" xreflabel="[REMOTES]"/></title>
<simpara>The name of one of the following can be used instead
of a URL as <literal>&lt;repository&gt;</literal> argument:</simpara>
<itemizedlist>
<listitem>
<simpara>
a remote in the Git configuration file: <literal>$GIT_DIR/config</literal>,
</simpara>
</listitem>
<listitem>
<simpara>
a file in the <literal>$GIT_DIR/remotes</literal> directory, or
</simpara>
</listitem>
<listitem>
<simpara>
a file in the <literal>$GIT_DIR/branches</literal> directory.
</simpara>
</listitem>
</itemizedlist>
<simpara>All of these also allow you to omit the refspec from the command line
because they each contain a refspec which git will use by default.</simpara>
<refsect2 id="_named_remote_in_configuration_file">
<title>Named remote in configuration file</title>
<simpara>You can choose to provide the name of a remote which you had previously
configured using <citerefentry>
<refentrytitle>git-remote</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
or even by a manual edit to the <literal>$GIT_DIR/config</literal> file.  The URL of
this remote will be used to access the repository.  The refspec
of this remote will be used by default when you do
not provide a refspec on the command line.  The entry in the
config file would appear like this:</simpara>
<literallayout class="monospaced">        [remote "&lt;name&gt;"]
                url = &lt;url&gt;
                pushurl = &lt;pushurl&gt;
                push = &lt;refspec&gt;
                fetch = &lt;refspec&gt;</literallayout><simpara></simpara>
<simpara>The <literal>&lt;pushurl&gt;</literal> is used for pushes only. It is optional and defaults
to <literal>&lt;url&gt;</literal>.</simpara>
</refsect2>
<refsect2 id="_named_file_in_literal_git_dir_remotes_literal">
<title>Named file in <literal>$GIT_DIR/remotes</literal></title>
<simpara>You can choose to provide the name of a
file in <literal>$GIT_DIR/remotes</literal>.  The URL
in this file will be used to access the repository.  The refspec
in this file will be used as default when you do not
provide a refspec on the command line.  This file should have the
following format:</simpara>
<literallayout class="monospaced">        URL: one of the above URL format
        Push: &lt;refspec&gt;
        Pull: &lt;refspec&gt;</literallayout><simpara></simpara>
<simpara><literal>Push:</literal> lines are used by <emphasis>git push</emphasis> and
<literal>Pull:</literal> lines are used by <emphasis>git pull</emphasis> and <emphasis>git fetch</emphasis>.
Multiple <literal>Push:</literal> and <literal>Pull:</literal> lines may
be specified for additional branch mappings.</simpara>
</refsect2>
<refsect2 id="_named_file_in_literal_git_dir_branches_literal">
<title>Named file in <literal>$GIT_DIR/branches</literal></title>
<simpara>You can choose to provide the name of a
file in <literal>$GIT_DIR/branches</literal>.
The URL in this file will be used to access the repository.
This file should have the following format:</simpara>
<literallayout class="monospaced">        &lt;url&gt;#&lt;head&gt;</literallayout><simpara></simpara>
<simpara><literal>&lt;url&gt;</literal> is required; <literal>#&lt;head&gt;</literal> is optional.</simpara>
<simpara>Depending on the operation, git will use one of the following
refspecs, if you don&#8217;t provide one on the command line.
<literal>&lt;branch&gt;</literal> is the name of this file in <literal>$GIT_DIR/branches</literal> and
<literal>&lt;head&gt;</literal> defaults to <literal>master</literal>.</simpara>
<simpara>git fetch uses:</simpara>
<literallayout class="monospaced">        refs/heads/&lt;head&gt;:refs/heads/&lt;branch&gt;</literallayout><simpara></simpara>
<simpara>git push uses:</simpara>
<literallayout class="monospaced">        HEAD:refs/heads/&lt;head&gt;</literallayout><simpara></simpara>
</refsect2>
</refsect1>
<refsect1 id="_output">
<title>OUTPUT</title>
<simpara>The output of "git push" depends on the transport method used; this
section describes the output when pushing over the Git protocol (either
locally or via ssh).</simpara>
<simpara>The status of the push is output in tabular form, with each line
representing the status of a single ref. Each line is of the form:</simpara>
<literallayout class="monospaced"> &lt;flag&gt; &lt;summary&gt; &lt;from&gt; -&gt; &lt;to&gt; (&lt;reason&gt;)</literallayout><simpara></simpara>
<simpara>If --porcelain is used, then each line of the output is of the form:</simpara>
<literallayout class="monospaced"> &lt;flag&gt; \t &lt;from&gt;:&lt;to&gt; \t &lt;summary&gt; (&lt;reason&gt;)</literallayout><simpara></simpara>
<simpara>The status of up-to-date refs is shown only if --porcelain or --verbose
option is used.</simpara>
<variablelist>
<varlistentry>
<term>
flag
</term>
<listitem>
<simpara>
        A single character indicating the status of the ref:
</simpara>
<variablelist>
<varlistentry>
<term>
(space)
</term>
<listitem>
<simpara>
for a successfully pushed fast-forward;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>+</literal>
</term>
<listitem>
<simpara>
for a successful forced update;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>-</literal>
</term>
<listitem>
<simpara>
for a successfully deleted ref;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>*</literal>
</term>
<listitem>
<simpara>
for a successfully pushed new ref;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>!</literal>
</term>
<listitem>
<simpara>
for a ref that was rejected or failed to push; and
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>=</literal>
</term>
<listitem>
<simpara>
for a ref that was up to date and did not need pushing.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
summary
</term>
<listitem>
<simpara>
        For a successfully pushed ref, the summary shows the old and new
        values of the ref in a form suitable for using as an argument to
        <literal>git log</literal> (this is <literal>&lt;old&gt;..&lt;new&gt;</literal> in most cases, and
        <literal>&lt;old&gt;...&lt;new&gt;</literal> for forced non-fast-forward updates).
</simpara>
<simpara>For a failed update, more details are given:</simpara>
<variablelist>
<varlistentry>
<term>
rejected
</term>
<listitem>
<simpara>
        Git did not try to send the ref at all, typically because it
        is not a fast-forward and you did not force the update.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote rejected
</term>
<listitem>
<simpara>
        The remote end refused the update.  Usually caused by a hook
        on the remote side, or because the remote repository has one
        of the following safety options in effect:
        <literal>receive.denyCurrentBranch</literal> (for pushes to the checked out
        branch), <literal>receive.denyNonFastForwards</literal> (for forced
        non-fast-forward updates), <literal>receive.denyDeletes</literal> or
        <literal>receive.denyDeleteCurrent</literal>.  See <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote failure
</term>
<listitem>
<simpara>
        The remote end did not report the successful update of the ref,
        perhaps because of a temporary error on the remote side, a
        break in the network connection, or other transient error.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
from
</term>
<listitem>
<simpara>
        The name of the local ref being pushed, minus its
        <literal>refs/&lt;type&gt;/</literal> prefix. In the case of deletion, the
        name of the local ref is omitted.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
to
</term>
<listitem>
<simpara>
        The name of the remote ref being updated, minus its
        <literal>refs/&lt;type&gt;/</literal> prefix.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
reason
</term>
<listitem>
<simpara>
        A human-readable explanation. In the case of successfully pushed
        refs, no explanation is needed. For a failed ref, the reason for
        failure is described.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_note_about_fast_forwards">
<title>NOTE ABOUT FAST-FORWARDS</title>
<simpara>When an update changes a branch (or more in general, a ref) that used to
point at commit A to point at another commit B, it is called a
fast-forward update if and only if B is a descendant of A.</simpara>
<simpara>In a fast-forward update from A to B, the set of commits that the original
commit A built on top of is a subset of the commits the new commit B
builds on top of.  Hence, it does not lose any history.</simpara>
<simpara>In contrast, a non-fast-forward update will lose history.  For example,
suppose you and somebody else started at the same commit X, and you built
a history leading to commit B while the other person built a history
leading to commit A.  The history looks like this:</simpara>
<literallayout class="monospaced">      B
     /
 ---X---A</literallayout><simpara></simpara>
<simpara>Further suppose that the other person already pushed changes leading to A
back to the original repository from which you two obtained the original
commit X.</simpara>
<simpara>The push done by the other person updated the branch that used to point at
commit X to point at commit A.  It is a fast-forward.</simpara>
<simpara>But if you try to push, you will attempt to update the branch (that
now points at A) with commit B.  This does <emphasis>not</emphasis> fast-forward.  If you did
so, the changes introduced by commit A will be lost, because everybody
will now start building on top of B.</simpara>
<simpara>The command by default does not allow an update that is not a fast-forward
to prevent such loss of history.</simpara>
<simpara>If you do not want to lose your work (history from X to B) or the work by
the other person (history from X to A), you would need to first fetch the
history from the repository, create a history that contains changes done
by both parties, and push the result back.</simpara>
<simpara>You can perform "git pull", resolve potential conflicts, and "git push"
the result.  A "git pull" will create a merge commit C between commits A
and B.</simpara>
<literallayout class="monospaced">      B---C
     /   /
 ---X---A</literallayout><simpara></simpara>
<simpara>Updating A with the resulting merge commit will fast-forward and your
push will be accepted.</simpara>
<simpara>Alternatively, you can rebase your change between X and B on top of A,
with "git pull --rebase", and push the result back.  The rebase will
create a new commit D that builds the change between X and B on top of
A.</simpara>
<literallayout class="monospaced">      B   D
     /   /
 ---X---A</literallayout><simpara></simpara>
<simpara>Again, updating A with this commit will fast-forward and your push will be
accepted.</simpara>
<simpara>There is another common situation where you may encounter non-fast-forward
rejection when you try to push, and it is possible even when you are
pushing into a repository nobody else pushes into. After you push commit
A yourself (in the first picture in this section), replace it with "git
commit --amend" to produce commit B, and you try to push it out, because
forgot that you have pushed A out already. In such a case, and only if
you are certain that nobody in the meantime fetched your earlier commit A
(and started building on top of it), you can run "git push --force" to
overwrite it. In other words, "git push --force" is a method reserved for
a case where you do mean to lose history.</simpara>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<variablelist>
<varlistentry>
<term>
<literal>git push</literal>
</term>
<listitem>
<simpara>
        Works like <literal>git push &lt;remote&gt;</literal>, where &lt;remote&gt; is the
        current branch&#8217;s remote (or <literal>origin</literal>, if no remote is
        configured for the current branch).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git push origin</literal>
</term>
<listitem>
<simpara>
        Without additional configuration, pushes the current branch to
        the configured upstream (<literal>branch.&lt;name&gt;.merge</literal> configuration
        variable) if it has the same name as the current branch, and
        errors out without pushing otherwise.
</simpara>
<simpara>The default behavior of this command when no &lt;refspec&gt; is given can be
configured by setting the <literal>push</literal> option of the remote, or the <literal>push.default</literal>
configuration variable.</simpara>
<simpara>For example, to default to pushing only the current branch to <literal>origin</literal>
use <literal>git config remote.origin.push HEAD</literal>.  Any valid &lt;refspec&gt; (like
the ones in the examples below) can be configured as the default for
<literal>git push origin</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git push origin :</literal>
</term>
<listitem>
<simpara>
        Push "matching" branches to <literal>origin</literal>. See
        &lt;refspec&gt; in the <link linkend="OPTIONS">OPTIONS</link> section above for a
        description of "matching" branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git push origin master</literal>
</term>
<listitem>
<simpara>
        Find a ref that matches <literal>master</literal> in the source repository
        (most likely, it would find <literal>refs/heads/master</literal>), and update
        the same ref (e.g. <literal>refs/heads/master</literal>) in <literal>origin</literal> repository
        with it.  If <literal>master</literal> did not exist remotely, it would be
        created.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git push origin HEAD</literal>
</term>
<listitem>
<simpara>
        A handy way to push the current branch to the same name on the
        remote.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git push mothership master:satellite/master dev:satellite/dev</literal>
</term>
<listitem>
<simpara>
        Use the source ref that matches <literal>master</literal> (e.g. <literal>refs/heads/master</literal>)
        to update the ref that matches <literal>satellite/master</literal> (most probably
        <literal>refs/remotes/satellite/master</literal>) in the <literal>mothership</literal> repository;
        do the same for <literal>dev</literal> and <literal>satellite/dev</literal>.
</simpara>
<simpara>See the section describing <literal>&lt;refspec&gt;...</literal> above for a discussion of
the matching semantics.</simpara>
<simpara>This is to emulate <literal>git fetch</literal> run on the <literal>mothership</literal> using <literal>git
push</literal> that is run in the opposite direction in order to integrate
the work done on <literal>satellite</literal>, and is often necessary when you can
only make connection in one way (i.e. satellite can ssh into
mothership but mothership cannot initiate connection to satellite
because the latter is behind a firewall or does not run sshd).</simpara>
<simpara>After running this <literal>git push</literal> on the <literal>satellite</literal> machine, you would
ssh into the <literal>mothership</literal> and run <literal>git merge</literal> there to complete the
emulation of <literal>git pull</literal> that were run on <literal>mothership</literal> to pull changes
made on <literal>satellite</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git push origin HEAD:master</literal>
</term>
<listitem>
<simpara>
        Push the current branch to the remote ref matching <literal>master</literal> in the
        <literal>origin</literal> repository. This form is convenient to push the current
        branch without thinking about its local name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git push origin master:refs/heads/experimental</literal>
</term>
<listitem>
<simpara>
        Create the branch <literal>experimental</literal> in the <literal>origin</literal> repository
        by copying the current <literal>master</literal> branch.  This form is only
        needed to create a new branch or tag in the remote repository when
        the local name and the remote name are different; otherwise,
        the ref name on its own will work.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git push origin :experimental</literal>
</term>
<listitem>
<simpara>
        Find a ref that matches <literal>experimental</literal> in the <literal>origin</literal> repository
        (e.g. <literal>refs/heads/experimental</literal>), and delete it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git push origin +dev:master</literal>
</term>
<listitem>
<simpara>
        Update the origin repository&#8217;s master branch with the dev branch,
        allowing non-fast-forward updates.  <emphasis role="strong">This can leave unreferenced
        commits dangling in the origin repository.</emphasis>  Consider the
        following situation, where a fast-forward is not possible:
</simpara>
<literallayout class="monospaced">            o---o---o---A---B  origin/master
                     \
                      X---Y---Z  dev</literallayout><simpara></simpara>
<simpara>The above command would change the origin repository to</simpara>
<literallayout class="monospaced">                      A---B  (unnamed branch)
                     /
            o---o---o---X---Y---Z  master</literallayout><simpara></simpara>
<simpara>Commits A and B would no longer belong to a branch with a symbolic name,
and so would be unreachable.  As such, these commits would be removed by
a <literal>git gc</literal> command on the origin repository.</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_security">
<title>SECURITY</title>
<simpara>The fetch and push protocols are not designed to prevent one side from
stealing data from the other repository that was not intended to be
shared. If you have private data that you need to protect from a malicious
peer, your best option is to store it in another repository. This applies
to both clients and servers. In particular, namespaces on a server are not
effective for read access control; you should only grant read access to a
namespace to clients that you would trust with read access to the entire
repository.</simpara>
<simpara>The known attack vectors are as follows:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
The victim sends "have" lines advertising the IDs of objects it has that
  are not explicitly intended to be shared but can be used to optimize the
  transfer if the peer also has them. The attacker chooses an object ID X
  to steal and sends a ref to X, but isn&#8217;t required to send the content of
  X because the victim already has it. Now the victim believes that the
  attacker has X, and it sends the content of X back to the attacker
  later. (This attack is most straightforward for a client to perform on a
  server, by creating a ref to X in the namespace the client has access
  to and then fetching it. The most likely way for a server to perform it
  on a client is to "merge" X into a public branch and hope that the user
  does additional work on this branch and pushes it back to the server
  without noticing the merge.)
</simpara>
</listitem>
<listitem>
<simpara>
As in #1, the attacker chooses an object ID X to steal. The victim sends
  an object Y that the attacker already has, and the attacker falsely
  claims to have X and not Y, so the victim sends Y as a delta against X.
  The delta reveals regions of X that are similar to Y to the attacker.
</simpara>
</listitem>
</orderedlist>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
