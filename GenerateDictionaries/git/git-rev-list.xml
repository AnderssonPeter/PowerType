<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-rev-list</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-rev-list</refname>
  <refpurpose>Lists commit objects in reverse chronological order</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git rev-list</emphasis> [&lt;options&gt;] &lt;commit&gt;&#8230; [[--] &lt;path&gt;&#8230;]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>List commits that are reachable by following the <literal>parent</literal> links from the
given commit(s), but exclude commits that are reachable from the one(s)
given with a <emphasis>&#94;</emphasis> in front of them.  The output is given in reverse
chronological order by default.</simpara>
<simpara>You can think of this as a set operation. Commits reachable from any of
the commits given on the command line form a set, and then commits reachable
from any of the ones given with <emphasis>&#94;</emphasis> in front are subtracted from that
set.  The remaining commits are what comes out in the command&#8217;s output.
Various other options and paths parameters can be used to further limit the
result.</simpara>
<simpara>Thus, the following command:</simpara>
<literallayout class="monospaced">$ git rev-list foo bar ^baz</literallayout><simpara></simpara>
<simpara>means "list all the commits which are reachable from <emphasis>foo</emphasis> or <emphasis>bar</emphasis>, but
not from <emphasis>baz</emphasis>".</simpara>
<simpara>A special notation "<emphasis>&lt;commit1&gt;</emphasis>..<emphasis>&lt;commit2&gt;</emphasis>" can be used as a
short-hand for "^<emphasis>&lt;commit1&gt;</emphasis> <emphasis>&lt;commit2&gt;</emphasis>". For example, either of
the following may be used interchangeably:</simpara>
<literallayout class="monospaced">$ git rev-list origin..HEAD
$ git rev-list HEAD ^origin</literallayout><simpara></simpara>
<simpara>Another special notation is "<emphasis>&lt;commit1&gt;</emphasis>&#8230;<emphasis>&lt;commit2&gt;</emphasis>" which is useful
for merges.  The resulting set of commits is the symmetric difference
between the two operands.  The following two commands are equivalent:</simpara>
<literallayout class="monospaced">$ git rev-list A B --not $(git merge-base --all A B)
$ git rev-list A...B</literallayout><simpara></simpara>
<simpara><emphasis>rev-list</emphasis> is a very essential Git command, since it
provides the ability to build and traverse commit ancestry graphs. For
this reason, it has a lot of different options that enables it to be
used by commands as different as <emphasis>git bisect</emphasis> and
<emphasis>git repack</emphasis>.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<refsect2 id="_commit_limiting">
<title>Commit Limiting</title>
<simpara>Besides specifying a range of commits that should be listed using the
special notations explained in the description, additional commit
limiting may be applied.</simpara>
<simpara>Using more options generally further limits the output (e.g.
<literal>--since=&lt;date1&gt;</literal> limits to commits newer than <literal>&lt;date1&gt;</literal>, and using it
with <literal>--grep=&lt;pattern&gt;</literal> further limits to commits whose log message
has a line that matches <literal>&lt;pattern&gt;</literal>), unless otherwise noted.</simpara>
<simpara>Note that these are applied before commit
ordering and formatting options, such as <literal>--reverse</literal>.</simpara>
<variablelist>
<varlistentry>
<term>
-&lt;number&gt;
</term>
<term>
-n &lt;number&gt;
</term>
<term>
--max-count=&lt;number&gt;
</term>
<listitem>
<simpara>
        Limit the number of commits to output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--skip=&lt;number&gt;
</term>
<listitem>
<simpara>
        Skip <emphasis>number</emphasis> commits before starting to show the commit output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--since=&lt;date&gt;
</term>
<term>
--after=&lt;date&gt;
</term>
<listitem>
<simpara>
        Show commits more recent than a specific date.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--until=&lt;date&gt;
</term>
<term>
--before=&lt;date&gt;
</term>
<listitem>
<simpara>
        Show commits older than a specific date.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--max-age=&lt;timestamp&gt;
</term>
<term>
--min-age=&lt;timestamp&gt;
</term>
<listitem>
<simpara>
        Limit the commits output to specified time range.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--author=&lt;pattern&gt;
</term>
<term>
--committer=&lt;pattern&gt;
</term>
<listitem>
<simpara>
        Limit the commits output to ones with author/committer
        header lines that match the specified pattern (regular
        expression).  With more than one <literal>--author=&lt;pattern&gt;</literal>,
        commits whose author matches any of the given patterns are
        chosen (similarly for multiple <literal>--committer=&lt;pattern&gt;</literal>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--grep-reflog=&lt;pattern&gt;
</term>
<listitem>
<simpara>
        Limit the commits output to ones with reflog entries that
        match the specified pattern (regular expression). With
        more than one <literal>--grep-reflog</literal>, commits whose reflog message
        matches any of the given patterns are chosen.  It is an
        error to use this option unless <literal>--walk-reflogs</literal> is in use.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--grep=&lt;pattern&gt;
</term>
<listitem>
<simpara>
        Limit the commits output to ones with log message that
        matches the specified pattern (regular expression).  With
        more than one <literal>--grep=&lt;pattern&gt;</literal>, commits whose message
        matches any of the given patterns are chosen (but see
        <literal>--all-match</literal>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--all-match
</term>
<listitem>
<simpara>
        Limit the commits output to ones that match all given <literal>--grep</literal>,
        instead of ones that match at least one.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--invert-grep
</term>
<listitem>
<simpara>
        Limit the commits output to ones with log message that do not
        match the pattern specified with <literal>--grep=&lt;pattern&gt;</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-i
</term>
<term>
--regexp-ignore-case
</term>
<listitem>
<simpara>
        Match the regular expression limiting patterns without regard to letter
        case.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--basic-regexp
</term>
<listitem>
<simpara>
        Consider the limiting patterns to be basic regular expressions;
        this is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-E
</term>
<term>
--extended-regexp
</term>
<listitem>
<simpara>
        Consider the limiting patterns to be extended regular expressions
        instead of the default basic regular expressions.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-F
</term>
<term>
--fixed-strings
</term>
<listitem>
<simpara>
        Consider the limiting patterns to be fixed strings (don&#8217;t interpret
        pattern as a regular expression).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-P
</term>
<term>
--perl-regexp
</term>
<listitem>
<simpara>
        Consider the limiting patterns to be Perl-compatible regular
        expressions.
</simpara>
<simpara>Support for these types of regular expressions is an optional
compile-time dependency. If Git wasn&#8217;t compiled with support for them
providing this option will cause it to die.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--remove-empty
</term>
<listitem>
<simpara>
        Stop when a given path disappears from the tree.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--merges
</term>
<listitem>
<simpara>
        Print only merge commits. This is exactly the same as <literal>--min-parents=2</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-merges
</term>
<listitem>
<simpara>
        Do not print commits with more than one parent. This is
        exactly the same as <literal>--max-parents=1</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--min-parents=&lt;number&gt;
</term>
<term>
--max-parents=&lt;number&gt;
</term>
<term>
--no-min-parents
</term>
<term>
--no-max-parents
</term>
<listitem>
<simpara>
        Show only commits which have at least (or at most) that many parent
        commits. In particular, <literal>--max-parents=1</literal> is the same as <literal>--no-merges</literal>,
        <literal>--min-parents=2</literal> is the same as <literal>--merges</literal>.  <literal>--max-parents=0</literal>
        gives all root commits and <literal>--min-parents=3</literal> all octopus merges.
</simpara>
<simpara><literal>--no-min-parents</literal> and <literal>--no-max-parents</literal> reset these limits (to no limit)
again.  Equivalent forms are <literal>--min-parents=0</literal> (any commit has 0 or more
parents) and <literal>--max-parents=-1</literal> (negative numbers denote no upper limit).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--first-parent
</term>
<listitem>
<simpara>
        Follow only the first parent commit upon seeing a merge
        commit.  This option can give a better overview when
        viewing the evolution of a particular topic branch,
        because merges into a topic branch tend to be only about
        adjusting to updated upstream from time to time, and
        this option allows you to ignore the individual commits
        brought in to your history by such a merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--not
</term>
<listitem>
<simpara>
        Reverses the meaning of the <emphasis>&#94;</emphasis> prefix (or lack thereof)
        for all following revision specifiers, up to the next <literal>--not</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--all
</term>
<listitem>
<simpara>
        Pretend as if all the refs in <literal>refs/</literal>, along with <literal>HEAD</literal>, are
        listed on the command line as <emphasis>&lt;commit&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--branches[=&lt;pattern&gt;]
</term>
<listitem>
<simpara>
        Pretend as if all the refs in <literal>refs/heads</literal> are listed
        on the command line as <emphasis>&lt;commit&gt;</emphasis>. If <emphasis>&lt;pattern&gt;</emphasis> is given, limit
        branches to ones matching given shell glob. If pattern lacks <emphasis>?</emphasis>,
        <emphasis>&#42;</emphasis>, or <emphasis>[</emphasis>, <emphasis>/&#42;</emphasis> at the end is implied.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--tags[=&lt;pattern&gt;]
</term>
<listitem>
<simpara>
        Pretend as if all the refs in <literal>refs/tags</literal> are listed
        on the command line as <emphasis>&lt;commit&gt;</emphasis>. If <emphasis>&lt;pattern&gt;</emphasis> is given, limit
        tags to ones matching given shell glob. If pattern lacks <emphasis>?</emphasis>, <emphasis>&#42;</emphasis>,
        or <emphasis>[</emphasis>, <emphasis>/&#42;</emphasis> at the end is implied.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--remotes[=&lt;pattern&gt;]
</term>
<listitem>
<simpara>
        Pretend as if all the refs in <literal>refs/remotes</literal> are listed
        on the command line as <emphasis>&lt;commit&gt;</emphasis>. If <emphasis>&lt;pattern&gt;</emphasis> is given, limit
        remote-tracking branches to ones matching given shell glob.
        If pattern lacks <emphasis>?</emphasis>, <emphasis>&#42;</emphasis>, or <emphasis>[</emphasis>, <emphasis>/&#42;</emphasis> at the end is implied.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--glob=&lt;glob-pattern&gt;
</term>
<listitem>
<simpara>
        Pretend as if all the refs matching shell glob <emphasis>&lt;glob-pattern&gt;</emphasis>
        are listed on the command line as <emphasis>&lt;commit&gt;</emphasis>. Leading <emphasis>refs/</emphasis>,
        is automatically prepended if missing. If pattern lacks <emphasis>?</emphasis>, <emphasis>&#42;</emphasis>,
        or <emphasis>[</emphasis>, <emphasis>/&#42;</emphasis> at the end is implied.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--exclude=&lt;glob-pattern&gt;
</term>
<listitem>
<simpara>
        Do not include refs matching <emphasis>&lt;glob-pattern&gt;</emphasis> that the next <literal>--all</literal>,
        <literal>--branches</literal>, <literal>--tags</literal>, <literal>--remotes</literal>, or <literal>--glob</literal> would otherwise
        consider. Repetitions of this option accumulate exclusion patterns
        up to the next <literal>--all</literal>, <literal>--branches</literal>, <literal>--tags</literal>, <literal>--remotes</literal>, or
        <literal>--glob</literal> option (other options or arguments do not clear
        accumulated patterns).
</simpara>
<simpara>The patterns given should not begin with <literal>refs/heads</literal>, <literal>refs/tags</literal>, or
<literal>refs/remotes</literal> when applied to <literal>--branches</literal>, <literal>--tags</literal>, or <literal>--remotes</literal>,
respectively, and they must begin with <literal>refs/</literal> when applied to <literal>--glob</literal>
or <literal>--all</literal>. If a trailing <emphasis>/&#42;</emphasis> is intended, it must be given
explicitly.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--reflog
</term>
<listitem>
<simpara>
        Pretend as if all objects mentioned by reflogs are listed on the
        command line as <literal>&lt;commit&gt;</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--alternate-refs
</term>
<listitem>
<simpara>
        Pretend as if all objects mentioned as ref tips of alternate
        repositories were listed on the command line. An alternate
        repository is any repository whose object directory is specified
        in <literal>objects/info/alternates</literal>.  The set of included objects may
        be modified by <literal>core.alternateRefsCommand</literal>, etc. See
        <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--single-worktree
</term>
<listitem>
<simpara>
        By default, all working trees will be examined by the
        following options when there are more than one (see
        <citerefentry>
<refentrytitle>git-worktree</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>): <literal>--all</literal>, <literal>--reflog</literal> and
        <literal>--indexed-objects</literal>.
        This option forces them to examine the current working tree
        only.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignore-missing
</term>
<listitem>
<simpara>
        Upon seeing an invalid object name in the input, pretend as if
        the bad input was not given.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--stdin
</term>
<listitem>
<simpara>
        In addition to the <emphasis>&lt;commit&gt;</emphasis> listed on the command
        line, read them from the standard input. If a <literal>--</literal> separator is
        seen, stop reading commits and start reading paths to limit the
        result.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--quiet
</term>
<listitem>
<simpara>
        Don&#8217;t print anything to standard output.  This form
        is primarily meant to allow the caller to
        test the exit status to see if a range of objects is fully
        connected (or not).  It is faster than redirecting stdout
        to <literal>/dev/null</literal> as the output does not have to be formatted.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--disk-usage
</term>
<listitem>
<simpara>
        Suppress normal output; instead, print the sum of the bytes used
        for on-disk storage by the selected commits or objects. This is
        equivalent to piping the output into <literal>git cat-file
        --batch-check='%(objectsize:disk)'</literal>, except that it runs much
        faster (especially with <literal>--use-bitmap-index</literal>). See the <literal>CAVEATS</literal>
        section in <citerefentry>
<refentrytitle>git-cat-file</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for the limitations of what
        "on-disk storage" means.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--cherry-mark
</term>
<listitem>
<simpara>
        Like <literal>--cherry-pick</literal> (see below) but mark equivalent commits
        with <literal>=</literal> rather than omitting them, and inequivalent ones with <literal>+</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--cherry-pick
</term>
<listitem>
<simpara>
        Omit any commit that introduces the same change as
        another commit on the &#8220;other side&#8221; when the set of
        commits are limited with symmetric difference.
</simpara>
<simpara>For example, if you have two branches, <literal>A</literal> and <literal>B</literal>, a usual way
to list all commits on only one side of them is with
<literal>--left-right</literal> (see the example below in the description of
the <literal>--left-right</literal> option). However, it shows the commits that were
cherry-picked from the other branch (for example, &#8220;3rd on b&#8221; may be
cherry-picked from branch A). With this option, such pairs of commits are
excluded from the output.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--left-only
</term>
<term>
--right-only
</term>
<listitem>
<simpara>
        List only commits on the respective side of a symmetric difference,
        i.e. only those which would be marked <literal>&lt;</literal> resp. <literal>&gt;</literal> by
        <literal>--left-right</literal>.
</simpara>
<simpara>For example, <literal>--cherry-pick --right-only A...B</literal> omits those
commits from <literal>B</literal> which are in <literal>A</literal> or are patch-equivalent to a commit in
<literal>A</literal>. In other words, this lists the <literal>+</literal> commits from <literal>git cherry A B</literal>.
More precisely, <literal>--cherry-pick --right-only --no-merges</literal> gives the exact
list.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--cherry
</term>
<listitem>
<simpara>
        A synonym for <literal>--right-only --cherry-mark --no-merges</literal>; useful to
        limit the output to the commits on our side and mark those that
        have been applied to the other side of a forked history with
        <literal>git log --cherry upstream...mybranch</literal>, similar to
        <literal>git cherry upstream mybranch</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-g
</term>
<term>
--walk-reflogs
</term>
<listitem>
<simpara>
        Instead of walking the commit ancestry chain, walk
        reflog entries from the most recent one to older ones.
        When this option is used you cannot specify commits to
        exclude (that is, <emphasis>&#94;commit</emphasis>, <emphasis>commit1..commit2</emphasis>,
        and <emphasis>commit1...commit2</emphasis> notations cannot be used).
</simpara>
<simpara>With <literal>--pretty</literal> format other than <literal>oneline</literal> and <literal>reference</literal> (for obvious reasons),
this causes the output to have two extra lines of information
taken from the reflog.  The reflog designator in the output may be shown
as <literal>ref@{Nth}</literal> (where <literal>Nth</literal> is the reverse-chronological index in the
reflog) or as <literal>ref@{timestamp}</literal> (with the timestamp for that entry),
depending on a few rules:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
If the starting point is specified as <literal>ref@{Nth}</literal>, show the index
   format.
</simpara>
</listitem>
<listitem>
<simpara>
If the starting point was specified as <literal>ref@{now}</literal>, show the
   timestamp format.
</simpara>
</listitem>
<listitem>
<simpara>
If neither was used, but <literal>--date</literal> was given on the command line, show
   the timestamp in the format requested by <literal>--date</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
Otherwise, show the index format.
</simpara>
</listitem>
</orderedlist>
<simpara>Under <literal>--pretty=oneline</literal>, the commit message is
prefixed with this information on the same line.
This option cannot be combined with <literal>--reverse</literal>.
See also <citerefentry>
<refentrytitle>git-reflog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
<simpara>Under <literal>--pretty=reference</literal>, this information will not be shown at all.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--merge
</term>
<listitem>
<simpara>
        After a failed merge, show refs that touch files having a
        conflict and don&#8217;t exist on all heads to merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--boundary
</term>
<listitem>
<simpara>
        Output excluded boundary commits. Boundary commits are
        prefixed with <literal>-</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--use-bitmap-index
</term>
<listitem>
<simpara>
        Try to speed up the traversal using the pack bitmap index (if
        one is available). Note that when traversing with <literal>--objects</literal>,
        trees and blobs will not have their associated path printed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--progress=&lt;header&gt;
</term>
<listitem>
<simpara>
        Show progress reports on stderr as objects are considered. The
        <literal>&lt;header&gt;</literal> text will be printed with each progress update.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
<refsect2 id="_history_simplification">
<title>History Simplification</title>
<simpara>Sometimes you are only interested in parts of the history, for example the
commits modifying a particular &lt;path&gt;. But there are two parts of
<emphasis>History Simplification</emphasis>, one part is selecting the commits and the other
is how to do it, as there are various strategies to simplify the history.</simpara>
<simpara>The following options select the commits to be shown:</simpara>
<variablelist>
<varlistentry>
<term>
&lt;paths&gt;
</term>
<listitem>
<simpara>
        Commits modifying the given &lt;paths&gt; are selected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--simplify-by-decoration
</term>
<listitem>
<simpara>
        Commits that are referred by some branch or tag are selected.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Note that extra commits can be shown to give a meaningful history.</simpara>
<simpara>The following options affect the way the simplification is performed:</simpara>
<variablelist>
<varlistentry>
<term>
Default mode
</term>
<listitem>
<simpara>
        Simplifies the history to the simplest history explaining the
        final state of the tree. Simplest because it prunes some side
        branches if the end result is the same (i.e. merging branches
        with the same content)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-pulls
</term>
<listitem>
<simpara>
        Include all commits from the default mode, but also any merge
        commits that are not TREESAME to the first parent but are
        TREESAME to a later parent. This mode is helpful for showing
        the merge commits that "first introduced" a change to a branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--full-history
</term>
<listitem>
<simpara>
        Same as the default mode, but does not prune some history.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--dense
</term>
<listitem>
<simpara>
        Only the selected commits are shown, plus some to have a
        meaningful history.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--sparse
</term>
<listitem>
<simpara>
        All commits in the simplified history are shown.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--simplify-merges
</term>
<listitem>
<simpara>
        Additional option to <literal>--full-history</literal> to remove some needless
        merges from the resulting history, as there are no selected
        commits contributing to this merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ancestry-path
</term>
<listitem>
<simpara>
        When given a range of commits to display (e.g. <emphasis>commit1..commit2</emphasis>
        or <emphasis>commit2 &#94;commit1</emphasis>), only display commits that exist
        directly on the ancestry chain between the <emphasis>commit1</emphasis> and
        <emphasis>commit2</emphasis>, i.e. commits that are both descendants of <emphasis>commit1</emphasis>,
        and ancestors of <emphasis>commit2</emphasis>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>A more detailed explanation follows.</simpara>
<simpara>Suppose you specified <literal>foo</literal> as the &lt;paths&gt;.  We shall call commits
that modify <literal>foo</literal> !TREESAME, and the rest TREESAME.  (In a diff
filtered for <literal>foo</literal>, they look different and equal, respectively.)</simpara>
<simpara>In the following, we will always refer to the same example history to
illustrate the differences between simplification settings.  We assume
that you are filtering for a file <literal>foo</literal> in this commit graph:</simpara>
<literallayout class="monospaced">          .-A---M---N---O---P---Q
         /     /   /   /   /   /
        I     B   C   D   E   Y
         \   /   /   /   /   /
          `-------------'   X</literallayout><simpara></simpara>
<simpara>The horizontal line of history A---Q is taken to be the first parent of
each merge.  The commits are:</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>I</literal> is the initial commit, in which <literal>foo</literal> exists with contents
  &#8220;asdf&#8221;, and a file <literal>quux</literal> exists with contents &#8220;quux&#8221;. Initial
  commits are compared to an empty tree, so <literal>I</literal> is !TREESAME.
</simpara>
</listitem>
<listitem>
<simpara>
In <literal>A</literal>, <literal>foo</literal> contains just &#8220;foo&#8221;.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>B</literal> contains the same change as <literal>A</literal>.  Its merge <literal>M</literal> is trivial and
  hence TREESAME to all parents.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>C</literal> does not change <literal>foo</literal>, but its merge <literal>N</literal> changes it to &#8220;foobar&#8221;,
  so it is not TREESAME to any parent.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>D</literal> sets <literal>foo</literal> to &#8220;baz&#8221;. Its merge <literal>O</literal> combines the strings from
  <literal>N</literal> and <literal>D</literal> to &#8220;foobarbaz&#8221;; i.e., it is not TREESAME to any parent.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>E</literal> changes <literal>quux</literal> to &#8220;xyzzy&#8221;, and its merge <literal>P</literal> combines the
  strings to &#8220;quux xyzzy&#8221;. <literal>P</literal> is TREESAME to <literal>O</literal>, but not to <literal>E</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>X</literal> is an independent root commit that added a new file <literal>side</literal>, and <literal>Y</literal>
  modified it. <literal>Y</literal> is TREESAME to <literal>X</literal>. Its merge <literal>Q</literal> added <literal>side</literal> to <literal>P</literal>, and
  <literal>Q</literal> is TREESAME to <literal>P</literal>, but not to <literal>Y</literal>.
</simpara>
</listitem>
</itemizedlist>
<simpara><literal>rev-list</literal> walks backwards through history, including or excluding
commits based on whether <literal>--full-history</literal> and/or parent rewriting
(via <literal>--parents</literal> or <literal>--children</literal>) are used. The following settings
are available.</simpara>
<variablelist>
<varlistentry>
<term>
Default mode
</term>
<listitem>
<simpara>
        Commits are included if they are not TREESAME to any parent
        (though this can be changed, see <literal>--sparse</literal> below).  If the
        commit was a merge, and it was TREESAME to one parent, follow
        only that parent.  (Even if there are several TREESAME
        parents, follow only one of them.)  Otherwise, follow all
        parents.
</simpara>
<simpara>This results in:</simpara>
<literallayout class="monospaced">          .-A---N---O
         /     /   /
        I---------D</literallayout><simpara></simpara>
<simpara>Note how the rule to only follow the TREESAME parent, if one is
available, removed <literal>B</literal> from consideration entirely.  <literal>C</literal> was
considered via <literal>N</literal>, but is TREESAME.  Root commits are compared to an
empty tree, so <literal>I</literal> is !TREESAME.</simpara>
<simpara>Parent/child relations are only visible with <literal>--parents</literal>, but that does
not affect the commits selected in default mode, so we have shown the
parent lines.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--full-history without parent rewriting
</term>
<listitem>
<simpara>
        This mode differs from the default in one point: always follow
        all parents of a merge, even if it is TREESAME to one of them.
        Even if more than one side of the merge has commits that are
        included, this does not imply that the merge itself is!  In
        the example, we get
</simpara>
<literallayout class="monospaced">        I  A  B  N  D  O  P  Q</literallayout><simpara></simpara>
<simpara><literal>M</literal> was excluded because it is TREESAME to both parents.  <literal>E</literal>,
<literal>C</literal> and <literal>B</literal> were all walked, but only <literal>B</literal> was !TREESAME, so the others
do not appear.</simpara>
<simpara>Note that without parent rewriting, it is not really possible to talk
about the parent/child relationships between the commits, so we show
them disconnected.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--full-history with parent rewriting
</term>
<listitem>
<simpara>
        Ordinary commits are only included if they are !TREESAME
        (though this can be changed, see <literal>--sparse</literal> below).
</simpara>
<simpara>Merges are always included.  However, their parent list is rewritten:
Along each parent, prune away commits that are not included
themselves.  This results in</simpara>
<literallayout class="monospaced">          .-A---M---N---O---P---Q
         /     /   /   /   /
        I     B   /   D   /
         \   /   /   /   /
          `-------------'</literallayout><simpara></simpara>
<simpara>Compare to <literal>--full-history</literal> without rewriting above.  Note that <literal>E</literal>
was pruned away because it is TREESAME, but the parent list of P was
rewritten to contain <literal>E</literal>'s parent <literal>I</literal>.  The same happened for <literal>C</literal> and
<literal>N</literal>, and <literal>X</literal>, <literal>Y</literal> and <literal>Q</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>In addition to the above settings, you can change whether TREESAME
affects inclusion:</simpara>
<variablelist>
<varlistentry>
<term>
--dense
</term>
<listitem>
<simpara>
        Commits that are walked are included if they are not TREESAME
        to any parent.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--sparse
</term>
<listitem>
<simpara>
        All commits that are walked are included.
</simpara>
<simpara>Note that without <literal>--full-history</literal>, this still simplifies merges: if
one of the parents is TREESAME, we follow only that one, so the other
sides of the merge are never walked.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--simplify-merges
</term>
<listitem>
<simpara>
        First, build a history graph in the same way that
        <literal>--full-history</literal> with parent rewriting does (see above).
</simpara>
<simpara>Then simplify each commit <literal>C</literal> to its replacement <literal>C'</literal> in the final
history according to the following rules:</simpara>
<itemizedlist>
<listitem>
<simpara>
Set <literal>C'</literal> to <literal>C</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
Replace each parent <literal>P</literal> of <literal>C'</literal> with its simplification <literal>P'</literal>.  In
  the process, drop parents that are ancestors of other parents or that are
  root commits TREESAME to an empty tree, and remove duplicates, but take care
  to never drop all parents that we are TREESAME to.
</simpara>
</listitem>
<listitem>
<simpara>
If after this parent rewriting, <literal>C'</literal> is a root or merge commit (has
  zero or &gt;1 parents), a boundary commit, or !TREESAME, it remains.
  Otherwise, it is replaced with its only parent.
</simpara>
</listitem>
</itemizedlist>
<simpara>The effect of this is best shown by way of comparing to
<literal>--full-history</literal> with parent rewriting.  The example turns into:</simpara>
<literallayout class="monospaced">          .-A---M---N---O
         /     /       /
        I     B       D
         \   /       /
          `---------'</literallayout><simpara></simpara>
<simpara>Note the major differences in <literal>N</literal>, <literal>P</literal>, and <literal>Q</literal> over <literal>--full-history</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>N</literal>'s parent list had <literal>I</literal> removed, because it is an ancestor of the
  other parent <literal>M</literal>.  Still, <literal>N</literal> remained because it is !TREESAME.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>P</literal>'s parent list similarly had <literal>I</literal> removed.  <literal>P</literal> was then
  removed completely, because it had one parent and is TREESAME.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>Q</literal>'s parent list had <literal>Y</literal> simplified to <literal>X</literal>. <literal>X</literal> was then removed, because it
  was a TREESAME root. <literal>Q</literal> was then removed completely, because it had one
  parent and is TREESAME.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<simpara>There is another simplification mode available:</simpara>
<variablelist>
<varlistentry>
<term>
--ancestry-path
</term>
<listitem>
<simpara>
        Limit the displayed commits to those directly on the ancestry
        chain between the &#8220;from&#8221; and &#8220;to&#8221; commits in the given commit
        range. I.e. only display commits that are ancestor of the &#8220;to&#8221;
        commit and descendants of the &#8220;from&#8221; commit.
</simpara>
<simpara>As an example use case, consider the following commit history:</simpara>
<literallayout class="monospaced">            D---E-------F
           /     \       \
          B---C---G---H---I---J
         /                     \
        A-------K---------------L--M</literallayout><simpara></simpara>
<simpara>A regular <emphasis>D..M</emphasis> computes the set of commits that are ancestors of <literal>M</literal>,
but excludes the ones that are ancestors of <literal>D</literal>. This is useful to see
what happened to the history leading to <literal>M</literal> since <literal>D</literal>, in the sense
that &#8220;what does <literal>M</literal> have that did not exist in <literal>D</literal>&#8221;. The result in this
example would be all the commits, except <literal>A</literal> and <literal>B</literal> (and <literal>D</literal> itself,
of course).</simpara>
<simpara>When we want to find out what commits in <literal>M</literal> are contaminated with the
bug introduced by <literal>D</literal> and need fixing, however, we might want to view
only the subset of <emphasis>D..M</emphasis> that are actually descendants of <literal>D</literal>, i.e.
excluding <literal>C</literal> and <literal>K</literal>. This is exactly what the <literal>--ancestry-path</literal>
option does. Applied to the <emphasis>D..M</emphasis> range, it results in:</simpara>
<literallayout class="monospaced">                E-------F
                 \       \
                  G---H---I---J
                               \
                                L--M</literallayout><simpara></simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Before discussing another option, <literal>--show-pulls</literal>, we need to
create a new example history.</simpara>
<simpara>A common problem users face when looking at simplified history is that a
commit they know changed a file somehow does not appear in the file&#8217;s
simplified history. Let&#8217;s demonstrate a new example and show how options
such as <literal>--full-history</literal> and <literal>--simplify-merges</literal> works in that case:</simpara>
<literallayout class="monospaced">          .-A---M-----C--N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`-Z'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `---Y--'</literallayout><simpara></simpara>
<simpara>For this example, suppose <literal>I</literal> created <literal>file.txt</literal> which was modified by
<literal>A</literal>, <literal>B</literal>, and <literal>X</literal> in different ways. The single-parent commits <literal>C</literal>, <literal>Z</literal>,
and <literal>Y</literal> do not change <literal>file.txt</literal>. The merge commit <literal>M</literal> was created by
resolving the merge conflict to include both changes from <literal>A</literal> and <literal>B</literal>
and hence is not TREESAME to either. The merge commit <literal>R</literal>, however, was
created by ignoring the contents of <literal>file.txt</literal> at <literal>M</literal> and taking only
the contents of <literal>file.txt</literal> at <literal>X</literal>. Hence, <literal>R</literal> is TREESAME to <literal>X</literal> but not
<literal>M</literal>. Finally, the natural merge resolution to create <literal>N</literal> is to take the
contents of <literal>file.txt</literal> at <literal>R</literal>, so <literal>N</literal> is TREESAME to <literal>R</literal> but not <literal>C</literal>.
The merge commits <literal>O</literal> and <literal>P</literal> are TREESAME to their first parents, but
not to their second parents, <literal>Z</literal> and <literal>Y</literal> respectively.</simpara>
<simpara>When using the default mode, <literal>N</literal> and <literal>R</literal> both have a TREESAME parent, so
those edges are walked and the others are ignored. The resulting history
graph is:</simpara>
<literallayout class="monospaced">        I---X</literallayout><simpara></simpara>
<simpara>When using <literal>--full-history</literal>, Git walks every edge. This will discover
the commits <literal>A</literal> and <literal>B</literal> and the merge <literal>M</literal>, but also will reveal the
merge commits <literal>O</literal> and <literal>P</literal>. With parent rewriting, the resulting graph is:</simpara>
<literallayout class="monospaced">          .-A---M--------N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`--'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `------'</literallayout><simpara></simpara>
<simpara>Here, the merge commits <literal>O</literal> and <literal>P</literal> contribute extra noise, as they did
not actually contribute a change to <literal>file.txt</literal>. They only merged a topic
that was based on an older version of <literal>file.txt</literal>. This is a common
issue in repositories using a workflow where many contributors work in
parallel and merge their topic branches along a single trunk: manu
unrelated merges appear in the <literal>--full-history</literal> results.</simpara>
<simpara>When using the <literal>--simplify-merges</literal> option, the commits <literal>O</literal> and <literal>P</literal>
disappear from the results. This is because the rewritten second parents
of <literal>O</literal> and <literal>P</literal> are reachable from their first parents. Those edges are
removed and then the commits look like single-parent commits that are
TREESAME to their parent. This also happens to the commit <literal>N</literal>, resulting
in a history view as follows:</simpara>
<literallayout class="monospaced">          .-A---M--.
         /     /    \
        I     B      R
         \   /      /
          \ /      /
           `---X--'</literallayout><simpara></simpara>
<simpara>In this view, we see all of the important single-parent changes from
<literal>A</literal>, <literal>B</literal>, and <literal>X</literal>. We also see the carefully-resolved merge <literal>M</literal> and the
not-so-carefully-resolved merge <literal>R</literal>. This is usually enough information
to determine why the commits <literal>A</literal> and <literal>B</literal> "disappeared" from history in
the default view. However, there are a few issues with this approach.</simpara>
<simpara>The first issue is performance. Unlike any previous option, the
<literal>--simplify-merges</literal> option requires walking the entire commit history
before returning a single result. This can make the option difficult to
use for very large repositories.</simpara>
<simpara>The second issue is one of auditing. When many contributors are working
on the same repository, it is important which merge commits introduced
a change into an important branch. The problematic merge <literal>R</literal> above is
not likely to be the merge commit that was used to merge into an
important branch. Instead, the merge <literal>N</literal> was used to merge <literal>R</literal> and <literal>X</literal>
into the important branch. This commit may have information about why
the change <literal>X</literal> came to override the changes from <literal>A</literal> and <literal>B</literal> in its
commit message.</simpara>
<variablelist>
<varlistentry>
<term>
--show-pulls
</term>
<listitem>
<simpara>
        In addition to the commits shown in the default history, show
        each merge commit that is not TREESAME to its first parent but
        is TREESAME to a later parent.
</simpara>
<simpara>When a merge commit is included by <literal>--show-pulls</literal>, the merge is
treated as if it "pulled" the change from another branch. When using
<literal>--show-pulls</literal> on this example (and no other options) the resulting
graph is:</simpara>
<literallayout class="monospaced">        I---X---R---N</literallayout><simpara></simpara>
<simpara>Here, the merge commits <literal>R</literal> and <literal>N</literal> are included because they pulled
the commits <literal>X</literal> and <literal>R</literal> into the base branch, respectively. These
merges are the reason the commits <literal>A</literal> and <literal>B</literal> do not appear in the
default history.</simpara>
<simpara>When <literal>--show-pulls</literal> is paired with <literal>--simplify-merges</literal>, the
graph includes all of the necessary information:</simpara>
<literallayout class="monospaced">          .-A---M--.   N
         /     /    \ /
        I     B      R
         \   /      /
          \ /      /
           `---X--'</literallayout><simpara></simpara>
<simpara>Notice that since <literal>M</literal> is reachable from <literal>R</literal>, the edge from <literal>N</literal> to <literal>M</literal>
was simplified away. However, <literal>N</literal> still appears in the history as an
important commit because it "pulled" the change <literal>R</literal> into the main
branch.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The <literal>--simplify-by-decoration</literal> option allows you to view only the
big picture of the topology of the history, by omitting commits
that are not referenced by tags.  Commits are marked as !TREESAME
(in other words, kept after history simplification rules described
above) if (1) they are referenced by tags, or (2) they change the
contents of the paths given on the command line.  All other
commits are marked as TREESAME (subject to be simplified away).</simpara>
</refsect2>
<refsect2 id="_bisection_helpers">
<title>Bisection Helpers</title>
<variablelist>
<varlistentry>
<term>
--bisect
</term>
<listitem>
<simpara>
        Limit output to the one commit object which is roughly halfway between
        included and excluded commits. Note that the bad bisection ref
        <literal>refs/bisect/bad</literal> is added to the included commits (if it
        exists) and the good bisection refs <literal>refs/bisect/good-*</literal> are
        added to the excluded commits (if they exist). Thus, supposing there
        are no refs in <literal>refs/bisect/</literal>, if
</simpara>
<literallayout class="monospaced">        $ git rev-list --bisect foo ^bar ^baz</literallayout><simpara></simpara>
<simpara>outputs <emphasis>midpoint</emphasis>, the output of the two commands</simpara>
<literallayout class="monospaced">        $ git rev-list foo ^midpoint
        $ git rev-list midpoint ^bar ^baz</literallayout><simpara></simpara>
<simpara>would be of roughly the same length.  Finding the change which
introduces a regression is thus reduced to a binary search: repeatedly
generate and test new 'midpoint&#8217;s until the commit chain is of length
one.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--bisect-vars
</term>
<listitem>
<simpara>
        This calculates the same as <literal>--bisect</literal>, except that refs in
        <literal>refs/bisect/</literal> are not used, and except that this outputs
        text ready to be eval&#8217;ed by the shell. These lines will assign the
        name of the midpoint revision to the variable <literal>bisect_rev</literal>, and the
        expected number of commits to be tested after <literal>bisect_rev</literal> is tested
        to <literal>bisect_nr</literal>, the expected number of commits to be tested if
        <literal>bisect_rev</literal> turns out to be good to <literal>bisect_good</literal>, the expected
        number of commits to be tested if <literal>bisect_rev</literal> turns out to be bad to
        <literal>bisect_bad</literal>, and the number of commits we are bisecting right now to
        <literal>bisect_all</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--bisect-all
</term>
<listitem>
<simpara>
        This outputs all the commit objects between the included and excluded
        commits, ordered by their distance to the included and excluded
        commits. Refs in <literal>refs/bisect/</literal> are not used. The farthest
        from them is displayed first. (This is the only one displayed by
        <literal>--bisect</literal>.)
</simpara>
<simpara>This is useful because it makes it easy to choose a good commit to
test when you want to avoid to test some of them for some reason (they
may not compile for example).</simpara>
<simpara>This option can be used along with <literal>--bisect-vars</literal>, in this case,
after all the sorted commit objects, there will be the same text as if
<literal>--bisect-vars</literal> had been used alone.</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
<refsect2 id="_commit_ordering">
<title>Commit Ordering</title>
<simpara>By default, the commits are shown in reverse chronological order.</simpara>
<variablelist>
<varlistentry>
<term>
--date-order
</term>
<listitem>
<simpara>
        Show no parents before all of its children are shown, but
        otherwise show commits in the commit timestamp order.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--author-date-order
</term>
<listitem>
<simpara>
        Show no parents before all of its children are shown, but
        otherwise show commits in the author timestamp order.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--topo-order
</term>
<listitem>
<simpara>
        Show no parents before all of its children are shown, and
        avoid showing commits on multiple lines of history
        intermixed.
</simpara>
<simpara>For example, in a commit history like this:</simpara>
<literallayout class="monospaced">    ---1----2----4----7
        \              \
         3----5----6----8---</literallayout><simpara></simpara>
<simpara>where the numbers denote the order of commit timestamps, <literal>git
rev-list</literal> and friends with <literal>--date-order</literal> show the commits in the
timestamp order: 8 7 6 5 4 3 2 1.</simpara>
<simpara>With <literal>--topo-order</literal>, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5
3 1); some older commits are shown before newer ones in order to
avoid showing the commits from two parallel development track mixed
together.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--reverse
</term>
<listitem>
<simpara>
        Output the commits chosen to be shown (see Commit Limiting
        section above) in reverse order. Cannot be combined with
        <literal>--walk-reflogs</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
<refsect2 id="_object_traversal">
<title>Object Traversal</title>
<simpara>These options are mostly targeted for packing of Git repositories.</simpara>
<variablelist>
<varlistentry>
<term>
--objects
</term>
<listitem>
<simpara>
        Print the object IDs of any object referenced by the listed
        commits.  <literal>--objects foo ^bar</literal> thus means &#8220;send me
        all object IDs which I need to download if I have the commit
        object <emphasis>bar</emphasis> but not <emphasis>foo</emphasis>&#8221;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--in-commit-order
</term>
<listitem>
<simpara>
        Print tree and blob ids in order of the commits. The tree
        and blob ids are printed after they are first referenced
        by a commit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--objects-edge
</term>
<listitem>
<simpara>
        Similar to <literal>--objects</literal>, but also print the IDs of excluded
        commits prefixed with a &#8220;-&#8221; character.  This is used by
        <citerefentry>
<refentrytitle>git-pack-objects</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> to build a &#8220;thin&#8221; pack, which records
        objects in deltified form based on objects contained in these
        excluded commits to reduce network traffic.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--objects-edge-aggressive
</term>
<listitem>
<simpara>
        Similar to <literal>--objects-edge</literal>, but it tries harder to find excluded
        commits at the cost of increased time.  This is used instead of
        <literal>--objects-edge</literal> to build &#8220;thin&#8221; packs for shallow repositories.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--indexed-objects
</term>
<listitem>
<simpara>
        Pretend as if all trees and blobs used by the index are listed
        on the command line.  Note that you probably want to use
        <literal>--objects</literal>, too.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unpacked
</term>
<listitem>
<simpara>
        Only useful with <literal>--objects</literal>; print the object IDs that are not
        in packs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--object-names
</term>
<listitem>
<simpara>
        Only useful with <literal>--objects</literal>; print the names of the object IDs
        that are found. This is the default behavior.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-object-names
</term>
<listitem>
<simpara>
        Only useful with <literal>--objects</literal>; does not print the names of the object
        IDs that are found. This inverts <literal>--object-names</literal>. This flag allows
        the output to be more easily parsed by commands such as
        <citerefentry>
<refentrytitle>git-cat-file</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--filter=&lt;filter-spec&gt;
</term>
<listitem>
<simpara>
        Only useful with one of the <literal>--objects*</literal>; omits objects (usually
        blobs) from the list of printed objects.  The <emphasis>&lt;filter-spec&gt;</emphasis>
        may be one of the following:
</simpara>
<simpara>The form <emphasis>--filter=blob:none</emphasis> omits all blobs.</simpara>
<simpara>The form <emphasis>--filter=blob:limit=&lt;n&gt;[kmg]</emphasis> omits blobs larger than n bytes
or units.  n may be zero.  The suffixes k, m, and g can be used to name
units in KiB, MiB, or GiB.  For example, <emphasis>blob:limit=1k</emphasis> is the same
as <emphasis>blob:limit=1024</emphasis>.</simpara>
<simpara>The form <emphasis>--filter=object:type=(tag|commit|tree|blob)</emphasis> omits all objects
which are not of the requested type.</simpara>
<simpara>The form <emphasis>--filter=sparse:oid=&lt;blob-ish&gt;</emphasis> uses a sparse-checkout
specification contained in the blob (or blob-expression) <emphasis>&lt;blob-ish&gt;</emphasis>
to omit blobs that would not be required for a sparse checkout on
the requested refs.</simpara>
<simpara>The form <emphasis>--filter=tree:&lt;depth&gt;</emphasis> omits all blobs and trees whose depth
from the root tree is &gt;= &lt;depth&gt; (minimum depth if an object is located
at multiple depths in the commits traversed). &lt;depth&gt;=0 will not include
any trees or blobs unless included explicitly in the command-line (or
standard input when --stdin is used). &lt;depth&gt;=1 will include only the
tree and blobs which are referenced directly by a commit reachable from
&lt;commit&gt; or an explicitly-given object. &lt;depth&gt;=2 is like &lt;depth&gt;=1
while also including trees and blobs one more level removed from an
explicitly-given commit or tree.</simpara>
<simpara>Note that the form <emphasis>--filter=sparse:path=&lt;path&gt;</emphasis> that wants to read
from an arbitrary path on the filesystem has been dropped for security
reasons.</simpara>
<simpara>Multiple <emphasis>--filter=</emphasis> flags can be specified to combine filters. Only
objects which are accepted by every filter are included.</simpara>
<simpara>The form <emphasis>--filter=combine:&lt;filter1&gt;+&lt;filter2&gt;+&#8230;&lt;filterN&gt;</emphasis> can also be
used to combined several filters, but this is harder than just repeating
the <emphasis>--filter</emphasis> flag and is usually not necessary. Filters are joined by
<emphasis>&#43;</emphasis> and individual filters are %-encoded (i.e. URL-encoded).
Besides the <emphasis>&#43;</emphasis> and <emphasis>%</emphasis> characters, the following characters are
reserved and also must be encoded: <literal>~!@#$^&amp;*()[]{}\;",&lt;&gt;?</literal><literal>&#39;&#96;</literal>
as well as all characters with ASCII code &lt;= <literal>0x20</literal>, which includes
space and newline.</simpara>
<simpara>Other arbitrary characters can also be encoded. For instance,
<emphasis>combine:tree:3+blob:none</emphasis> and <emphasis>combine:tree%3A3+blob%3Anone</emphasis> are
equivalent.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-filter
</term>
<listitem>
<simpara>
        Turn off any previous <literal>--filter=</literal> argument.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--filter-provided-objects
</term>
<listitem>
<simpara>
        Filter the list of explicitly provided objects, which would otherwise
        always be printed even if they did not match any of the filters. Only
        useful with <literal>--filter=</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--filter-print-omitted
</term>
<listitem>
<simpara>
        Only useful with <literal>--filter=</literal>; prints a list of the objects omitted
        by the filter.  Object IDs are prefixed with a &#8220;~&#8221; character.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--missing=&lt;missing-action&gt;
</term>
<listitem>
<simpara>
        A debug option to help with future "partial clone" development.
        This option specifies how missing objects are handled.
</simpara>
<simpara>The form <emphasis>--missing=error</emphasis> requests that rev-list stop with an error if
a missing object is encountered.  This is the default action.</simpara>
<simpara>The form <emphasis>--missing=allow-any</emphasis> will allow object traversal to continue
if a missing object is encountered.  Missing objects will silently be
omitted from the results.</simpara>
<simpara>The form <emphasis>--missing=allow-promisor</emphasis> is like <emphasis>allow-any</emphasis>, but will only
allow object traversal to continue for EXPECTED promisor missing objects.
Unexpected missing objects will raise an error.</simpara>
<simpara>The form <emphasis>--missing=print</emphasis> is like <emphasis>allow-any</emphasis>, but will also print a
list of the missing objects.  Object IDs are prefixed with a &#8220;?&#8221; character.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--exclude-promisor-objects
</term>
<listitem>
<simpara>
        (For internal use only.)  Prefilter object traversal at
        promisor boundary.  This is used with partial clone.  This is
        stronger than <literal>--missing=allow-promisor</literal> because it limits the
        traversal, rather than just silencing errors about missing
        objects.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-walk[=(sorted|unsorted)]
</term>
<listitem>
<simpara>
        Only show the given commits, but do not traverse their ancestors.
        This has no effect if a range is specified. If the argument
        <literal>unsorted</literal> is given, the commits are shown in the order they were
        given on the command line. Otherwise (if <literal>sorted</literal> or no argument
        was given), the commits are shown in reverse chronological order
        by commit time.
        Cannot be combined with <literal>--graph</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--do-walk
</term>
<listitem>
<simpara>
        Overrides a previous <literal>--no-walk</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
<refsect2 id="_commit_formatting">
<title>Commit Formatting</title>
<simpara>Using these options, <citerefentry>
<refentrytitle>git-rev-list</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> will act similar to the
more specialized family of commit log tools: <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-show</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, and <citerefentry>
<refentrytitle>git-whatchanged</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
<variablelist>
<varlistentry>
<term>
--pretty[=&lt;format&gt;]
</term>
<term>
--format=&lt;format&gt;
</term>
<listitem>
<simpara>
        Pretty-print the contents of the commit logs in a given format,
        where <emphasis>&lt;format&gt;</emphasis> can be one of <emphasis>oneline</emphasis>, <emphasis>short</emphasis>, <emphasis>medium</emphasis>,
        <emphasis>full</emphasis>, <emphasis>fuller</emphasis>, <emphasis>reference</emphasis>, <emphasis>email</emphasis>, <emphasis>raw</emphasis>, <emphasis>format:&lt;string&gt;</emphasis>
        and <emphasis>tformat:&lt;string&gt;</emphasis>.  When <emphasis>&lt;format&gt;</emphasis> is none of the above,
        and has <emphasis>%placeholder</emphasis> in it, it acts as if
        <emphasis>--pretty=tformat:&lt;format&gt;</emphasis> were given.
</simpara>
<simpara>See the "PRETTY FORMATS" section for some additional details for each
format.  When <emphasis>=&lt;format&gt;</emphasis> part is omitted, it defaults to <emphasis>medium</emphasis>.</simpara>
<simpara>Note: you can specify the default pretty format in the repository
configuration (see <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--abbrev-commit
</term>
<listitem>
<simpara>
        Instead of showing the full 40-byte hexadecimal commit object
        name, show a prefix that names the object uniquely.
        "--abbrev=&lt;n&gt;" (which also modifies diff output, if it is displayed)
        option can be used to specify the minimum length of the prefix.
</simpara>
<simpara>This should make "--pretty=oneline" a whole lot more readable for
people using 80-column terminals.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-abbrev-commit
</term>
<listitem>
<simpara>
        Show the full 40-byte hexadecimal commit object name. This negates
        <literal>--abbrev-commit</literal>, either explicit or implied by other options such
        as "--oneline". It also overrides the <literal>log.abbrevCommit</literal> variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--oneline
</term>
<listitem>
<simpara>
        This is a shorthand for "--pretty=oneline --abbrev-commit"
        used together.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--encoding=&lt;encoding&gt;
</term>
<listitem>
<simpara>
        Commit objects record the character encoding used for the log message
        in their encoding header; this option can be used to tell the
        command to re-code the commit log message in the encoding
        preferred by the user.  For non plumbing commands this
        defaults to UTF-8. Note that if an object claims to be encoded
        in <literal>X</literal> and we are outputting in <literal>X</literal>, we will output the object
        verbatim; this means that invalid sequences in the original
        commit may be copied to the output. Likewise, if iconv(3) fails
        to convert the commit, we will quietly output the original
        object verbatim.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--expand-tabs=&lt;n&gt;
</term>
<term>
--expand-tabs
</term>
<term>
--no-expand-tabs
</term>
<listitem>
<simpara>
        Perform a tab expansion (replace each tab with enough spaces
        to fill to the next display column that is multiple of <emphasis>&lt;n&gt;</emphasis>)
        in the log message before showing it in the output.
        <literal>--expand-tabs</literal> is a short-hand for <literal>--expand-tabs=8</literal>, and
        <literal>--no-expand-tabs</literal> is a short-hand for <literal>--expand-tabs=0</literal>,
        which disables tab expansion.
</simpara>
<simpara>By default, tabs are expanded in pretty formats that indent the log
message by 4 spaces (i.e.  <emphasis>medium</emphasis>, which is the default, <emphasis>full</emphasis>,
and <emphasis>fuller</emphasis>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-signature
</term>
<listitem>
<simpara>
        Check the validity of a signed commit object by passing the signature
        to <literal>gpg --verify</literal> and show the output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--relative-date
</term>
<listitem>
<simpara>
        Synonym for <literal>--date=relative</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--date=&lt;format&gt;
</term>
<listitem>
<simpara>
        Only takes effect for dates shown in human-readable format, such
        as when using <literal>--pretty</literal>. <literal>log.date</literal> config variable sets a default
        value for the log command&#8217;s <literal>--date</literal> option. By default, dates
        are shown in the original time zone (either committer&#8217;s or
        author&#8217;s). If <literal>-local</literal> is appended to the format (e.g.,
        <literal>iso-local</literal>), the user&#8217;s local time zone is used instead.
</simpara>
<simpara><literal>--date=relative</literal> shows dates relative to the current time,
e.g. &#8220;2 hours ago&#8221;. The <literal>-local</literal> option has no effect for
<literal>--date=relative</literal>.</simpara>
<simpara><literal>--date=local</literal> is an alias for <literal>--date=default-local</literal>.</simpara>
<simpara><literal>--date=iso</literal> (or <literal>--date=iso8601</literal>) shows timestamps in a ISO 8601-like format.
The differences to the strict ISO 8601 format are:</simpara>
<itemizedlist>
<listitem>
<simpara>
a space instead of the <literal>T</literal> date/time delimiter
</simpara>
</listitem>
<listitem>
<simpara>
a space between time and time zone
</simpara>
</listitem>
<listitem>
<simpara>
no colon between hours and minutes of the time zone
</simpara>
</listitem>
</itemizedlist>
<simpara><literal>--date=iso-strict</literal> (or <literal>--date=iso8601-strict</literal>) shows timestamps in strict
ISO 8601 format.</simpara>
<simpara><literal>--date=rfc</literal> (or <literal>--date=rfc2822</literal>) shows timestamps in RFC 2822
format, often found in email messages.</simpara>
<simpara><literal>--date=short</literal> shows only the date, but not the time, in <literal>YYYY-MM-DD</literal> format.</simpara>
<simpara><literal>--date=raw</literal> shows the date as seconds since the epoch (1970-01-01
00:00:00 UTC), followed by a space, and then the timezone as an offset
from UTC (a <literal>+</literal> or <literal>-</literal> with four digits; the first two are hours, and
the second two are minutes). I.e., as if the timestamp were formatted
with <literal>strftime("%s %z")</literal>).
Note that the <literal>-local</literal> option does not affect the seconds-since-epoch
value (which is always measured in UTC), but does switch the accompanying
timezone value.</simpara>
<simpara><literal>--date=human</literal> shows the timezone if the timezone does not match the
current time-zone, and doesn&#8217;t print the whole date if that matches
(ie skip printing year for dates that are "this year", but also skip
the whole date itself if it&#8217;s in the last few days and we can just say
what weekday it was).  For older dates the hour and minute is also
omitted.</simpara>
<simpara><literal>--date=unix</literal> shows the date as a Unix epoch timestamp (seconds since
1970).  As with <literal>--raw</literal>, this is always in UTC and therefore <literal>-local</literal>
has no effect.</simpara>
<simpara><literal>--date=format:...</literal> feeds the format <literal>...</literal> to your system <literal>strftime</literal>,
except for %z and %Z, which are handled internally.
Use <literal>--date=format:%c</literal> to show the date in your system locale&#8217;s
preferred format.  See the <literal>strftime</literal> manual for a complete list of
format placeholders. When using <literal>-local</literal>, the correct syntax is
<literal>--date=format-local:...</literal>.</simpara>
<simpara><literal>--date=default</literal> is the default format, and is similar to
<literal>--date=rfc2822</literal>, with a few exceptions:</simpara>
<itemizedlist>
<listitem>
<simpara>
there is no comma after the day-of-week
</simpara>
</listitem>
<listitem>
<simpara>
the time zone is omitted when the local time zone is used
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
--header
</term>
<listitem>
<simpara>
        Print the contents of the commit in raw-format; each record is
        separated with a NUL character.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-commit-header
</term>
<listitem>
<simpara>
        Suppress the header line containing "commit" and the object ID printed before
        the specified format.  This has no effect on the built-in formats; only custom
        formats are affected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--commit-header
</term>
<listitem>
<simpara>
        Overrides a previous <literal>--no-commit-header</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--parents
</term>
<listitem>
<simpara>
        Print also the parents of the commit (in the form "commit parent&#8230;").
        Also enables parent rewriting, see <emphasis>History Simplification</emphasis> above.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--children
</term>
<listitem>
<simpara>
        Print also the children of the commit (in the form "commit child&#8230;").
        Also enables parent rewriting, see <emphasis>History Simplification</emphasis> above.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--timestamp
</term>
<listitem>
<simpara>
        Print the raw commit timestamp.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--left-right
</term>
<listitem>
<simpara>
        Mark which side of a symmetric difference a commit is reachable from.
        Commits from the left side are prefixed with <literal>&lt;</literal> and those from
        the right with <literal>&gt;</literal>.  If combined with <literal>--boundary</literal>, those
        commits are prefixed with <literal>-</literal>.
</simpara>
<simpara>For example, if you have this topology:</simpara>
<literallayout class="monospaced">             y---b---b  branch B
            / \ /
           /   .
          /   / \
         o---x---a---a  branch A</literallayout><simpara></simpara>
<simpara>you would get an output like this:</simpara>
<literallayout class="monospaced">        $ git rev-list --left-right --boundary --pretty=oneline A...B

        &gt;bbbbbbb... 3rd on b
        &gt;bbbbbbb... 2nd on b
        &lt;aaaaaaa... 3rd on a
        &lt;aaaaaaa... 2nd on a
        -yyyyyyy... 1st on b
        -xxxxxxx... 1st on a</literallayout><simpara></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--graph
</term>
<listitem>
<simpara>
        Draw a text-based graphical representation of the commit history
        on the left hand side of the output.  This may cause extra lines
        to be printed in between commits, in order for the graph history
        to be drawn properly.
        Cannot be combined with <literal>--no-walk</literal>.
</simpara>
<simpara>This enables parent rewriting, see <emphasis>History Simplification</emphasis> above.</simpara>
<simpara>This implies the <literal>--topo-order</literal> option by default, but the
<literal>--date-order</literal> option may also be specified.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-linear-break[=&lt;barrier&gt;]
</term>
<listitem>
<simpara>
        When --graph is not used, all history branches are flattened
        which can make it hard to see that the two consecutive commits
        do not belong to a linear branch. This option puts a barrier
        in between them in that case. If <literal>&lt;barrier&gt;</literal> is specified, it
        is the string that will be shown instead of the default one.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--count
</term>
<listitem>
<simpara>
        Print a number stating how many commits would have been
        listed, and suppress all other output.  When used together
        with <literal>--left-right</literal>, instead print the counts for left and
        right commits, separated by a tab. When used together with
        <literal>--cherry-mark</literal>, omit patch equivalent commits from these
        counts and print the count for equivalent commits separated
        by a tab.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
</refsect1>
<refsect1 id="_pretty_formats">
<title>PRETTY FORMATS</title>
<simpara>If the commit is a merge, and if the pretty-format
is not <emphasis>oneline</emphasis>, <emphasis>email</emphasis> or <emphasis>raw</emphasis>, an additional line is
inserted before the <emphasis>Author:</emphasis> line.  This line begins with
"Merge: " and the hashes of ancestral commits are printed,
separated by spaces.  Note that the listed commits may not
necessarily be the list of the <emphasis role="strong">direct</emphasis> parent commits if you
have limited your view of history: for example, if you are
only interested in changes related to a certain directory or
file.</simpara>
<simpara>There are several built-in formats, and you can define
additional formats by setting a pretty.&lt;name&gt;
config option to either another format name, or a
<emphasis>format:</emphasis> string, as described below (see
<citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>). Here are the details of the
built-in formats:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>oneline</emphasis>
</simpara>
<literallayout class="monospaced">&lt;hash&gt; &lt;title line&gt;</literallayout>
<simpara>This is designed to be as compact as possible.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>short</emphasis>
</simpara>
<literallayout class="monospaced">commit &lt;hash&gt;
Author: &lt;author&gt;</literallayout>
<literallayout class="monospaced">&lt;title line&gt;</literallayout>
</listitem>
<listitem>
<simpara>
<emphasis>medium</emphasis>
</simpara>
<literallayout class="monospaced">commit &lt;hash&gt;
Author: &lt;author&gt;
Date:   &lt;author date&gt;</literallayout>
<literallayout class="monospaced">&lt;title line&gt;</literallayout>
<literallayout class="monospaced">&lt;full commit message&gt;</literallayout>
</listitem>
<listitem>
<simpara>
<emphasis>full</emphasis>
</simpara>
<literallayout class="monospaced">commit &lt;hash&gt;
Author: &lt;author&gt;
Commit: &lt;committer&gt;</literallayout>
<literallayout class="monospaced">&lt;title line&gt;</literallayout>
<literallayout class="monospaced">&lt;full commit message&gt;</literallayout>
</listitem>
<listitem>
<simpara>
<emphasis>fuller</emphasis>
</simpara>
<literallayout class="monospaced">commit &lt;hash&gt;
Author:     &lt;author&gt;
AuthorDate: &lt;author date&gt;
Commit:     &lt;committer&gt;
CommitDate: &lt;committer date&gt;</literallayout>
<literallayout class="monospaced">&lt;title line&gt;</literallayout>
<literallayout class="monospaced">&lt;full commit message&gt;</literallayout>
</listitem>
<listitem>
<simpara>
<emphasis>reference</emphasis>
</simpara>
<literallayout class="monospaced">&lt;abbrev hash&gt; (&lt;title line&gt;, &lt;short author date&gt;)</literallayout>
<simpara>This format is used to refer to another commit in a commit message and
is the same as <literal>--pretty='format:%C(auto)%h (%s, %ad)'</literal>.  By default,
the date is formatted with <literal>--date=short</literal> unless another <literal>--date</literal> option
is explicitly specified.  As with any <literal>format:</literal> with format
placeholders, its output is not affected by other options like
<literal>--decorate</literal> and <literal>--walk-reflogs</literal>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>email</emphasis>
</simpara>
<literallayout class="monospaced">From &lt;hash&gt; &lt;date&gt;
From: &lt;author&gt;
Date: &lt;author date&gt;
Subject: [PATCH] &lt;title line&gt;</literallayout>
<literallayout class="monospaced">&lt;full commit message&gt;</literallayout>
</listitem>
<listitem>
<simpara>
<emphasis>mboxrd</emphasis>
</simpara>
<simpara>Like <emphasis>email</emphasis>, but lines in the commit message starting with "From "
(preceded by zero or more "&gt;") are quoted with "&gt;" so they aren&#8217;t
confused as starting a new commit.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>raw</emphasis>
</simpara>
<simpara>The <emphasis>raw</emphasis> format shows the entire commit exactly as
stored in the commit object.  Notably, the hashes are
displayed in full, regardless of whether --abbrev or
--no-abbrev are used, and <emphasis>parents</emphasis> information show the
true parent commits, without taking grafts or history
simplification into account. Note that this format affects the way
commits are displayed, but not the way the diff is shown e.g. with
<literal>git log --raw</literal>. To get full object names in a raw diff format,
use <literal>--no-abbrev</literal>.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>format:&lt;string&gt;</emphasis>
</simpara>
<simpara>The <emphasis>format:&lt;string&gt;</emphasis> format allows you to specify which information
you want to show. It works a little bit like printf format,
with the notable exception that you get a newline with <emphasis>%n</emphasis>
instead of <emphasis>\n</emphasis>.</simpara>
<simpara>E.g, <emphasis>format:"The author of %h was %an, %ar%nThe title was &gt;&gt;%s&lt;&lt;%n"</emphasis>
would show something like this:</simpara>
<literallayout class="monospaced">The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was &gt;&gt;t4119: test autocomputing -p&lt;n&gt; for traditional diff input.&lt;&lt;</literallayout><simpara></simpara>
<simpara>The placeholders are:</simpara>
<itemizedlist>
<listitem>
<simpara>
Placeholders that expand to a single literal character:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>%n</emphasis>
</term>
<listitem>
<simpara>
newline
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%%</emphasis>
</term>
<listitem>
<simpara>
a raw <emphasis>%</emphasis>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%x00</emphasis>
</term>
<listitem>
<simpara>
print a byte from a hex code
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
<listitem>
<simpara>
Placeholders that affect formatting of later placeholders:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>%Cred</emphasis>
</term>
<listitem>
<simpara>
switch color to red
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%Cgreen</emphasis>
</term>
<listitem>
<simpara>
switch color to green
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%Cblue</emphasis>
</term>
<listitem>
<simpara>
switch color to blue
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%Creset</emphasis>
</term>
<listitem>
<simpara>
reset color
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%C(&#8230;)</emphasis>
</term>
<listitem>
<simpara>
color specification, as described under Values in the
            "CONFIGURATION FILE" section of <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.  By
            default, colors are shown only when enabled for log output
            (by <literal>color.diff</literal>, <literal>color.ui</literal>, or <literal>--color</literal>, and respecting
            the <literal>auto</literal> settings of the former if we are going to a
            terminal). <literal>%C(auto,...)</literal> is accepted as a historical
            synonym for the default (e.g., <literal>%C(auto,red)</literal>). Specifying
            <literal>%C(always,...)</literal> will show the colors even when color is
            not otherwise enabled (though consider just using
            <literal>--color=always</literal> to enable color for the whole output,
            including this format and anything else git might color).
            <literal>auto</literal> alone (i.e. <literal>%C(auto)</literal>) will turn on auto coloring
            on the next placeholders until the color is switched
            again.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%m</emphasis>
</term>
<listitem>
<simpara>
left (<literal>&lt;</literal>), right (<literal>&gt;</literal>) or boundary (<literal>-</literal>) mark
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%w([&lt;w&gt;[,&lt;i1&gt;[,&lt;i2&gt;]]])</emphasis>
</term>
<listitem>
<simpara>
switch line wrapping, like the -w option of
                            <citerefentry>
<refentrytitle>git-shortlog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%&lt;(&lt;N&gt;[,trunc|ltrunc|mtrunc])</emphasis>
</term>
<listitem>
<simpara>
make the next placeholder take at
                                  least N columns, padding spaces on
                                  the right if necessary.  Optionally
                                  truncate at the beginning (ltrunc),
                                  the middle (mtrunc) or the end
                                  (trunc) if the output is longer than
                                  N columns.  Note that truncating
                                  only works correctly with N &gt;= 2.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%&lt;|(&lt;N&gt;)</emphasis>
</term>
<listitem>
<simpara>
make the next placeholder take at least until Nth
             columns, padding spaces on the right if necessary
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%&gt;(&lt;N&gt;)</emphasis>, <emphasis>%&gt;|(&lt;N&gt;)</emphasis>
</term>
<listitem>
<simpara>
similar to <emphasis>%&lt;(&lt;N&gt;)</emphasis>, <emphasis>%&lt;|(&lt;N&gt;)</emphasis> respectively,
                        but padding spaces on the left
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%&gt;&gt;(&lt;N&gt;)</emphasis>, <emphasis>%&gt;&gt;|(&lt;N&gt;)</emphasis>
</term>
<listitem>
<simpara>
similar to <emphasis>%&gt;(&lt;N&gt;)</emphasis>, <emphasis>%&gt;|(&lt;N&gt;)</emphasis>
                          respectively, except that if the next
                          placeholder takes more spaces than given and
                          there are spaces on its left, use those
                          spaces
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%&gt;&lt;(&lt;N&gt;)</emphasis>, <emphasis>%&gt;&lt;|(&lt;N&gt;)</emphasis>
</term>
<listitem>
<simpara>
similar to <emphasis>%&lt;(&lt;N&gt;)</emphasis>, <emphasis>%&lt;|(&lt;N&gt;)</emphasis>
                          respectively, but padding both sides
                          (i.e. the text is centered)
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
<listitem>
<simpara>
Placeholders that expand to information extracted from the commit:
</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>%H</emphasis>
</term>
<listitem>
<simpara>
commit hash
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%h</emphasis>
</term>
<listitem>
<simpara>
abbreviated commit hash
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%T</emphasis>
</term>
<listitem>
<simpara>
tree hash
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%t</emphasis>
</term>
<listitem>
<simpara>
abbreviated tree hash
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%P</emphasis>
</term>
<listitem>
<simpara>
parent hashes
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%p</emphasis>
</term>
<listitem>
<simpara>
abbreviated parent hashes
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%an</emphasis>
</term>
<listitem>
<simpara>
author name
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%aN</emphasis>
</term>
<listitem>
<simpara>
author name (respecting .mailmap, see <citerefentry>
<refentrytitle>git-shortlog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        or <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%ae</emphasis>
</term>
<listitem>
<simpara>
author email
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%aE</emphasis>
</term>
<listitem>
<simpara>
author email (respecting .mailmap, see <citerefentry>
<refentrytitle>git-shortlog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        or <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%al</emphasis>
</term>
<listitem>
<simpara>
author email local-part (the part before the <emphasis>@</emphasis> sign)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%aL</emphasis>
</term>
<listitem>
<simpara>
author local-part (see <emphasis>%al</emphasis>) respecting .mailmap, see
        <citerefentry>
<refentrytitle>git-shortlog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%ad</emphasis>
</term>
<listitem>
<simpara>
author date (format respects --date= option)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%aD</emphasis>
</term>
<listitem>
<simpara>
author date, RFC2822 style
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%ar</emphasis>
</term>
<listitem>
<simpara>
author date, relative
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%at</emphasis>
</term>
<listitem>
<simpara>
author date, UNIX timestamp
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%ai</emphasis>
</term>
<listitem>
<simpara>
author date, ISO 8601-like format
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%aI</emphasis>
</term>
<listitem>
<simpara>
author date, strict ISO 8601 format
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%as</emphasis>
</term>
<listitem>
<simpara>
author date, short format (<literal>YYYY-MM-DD</literal>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%ah</emphasis>
</term>
<listitem>
<simpara>
author date, human style (like the <literal>--date=human</literal> option of
        <citerefentry>
<refentrytitle>git-rev-list</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%cn</emphasis>
</term>
<listitem>
<simpara>
committer name
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%cN</emphasis>
</term>
<listitem>
<simpara>
committer name (respecting .mailmap, see
        <citerefentry>
<refentrytitle>git-shortlog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%ce</emphasis>
</term>
<listitem>
<simpara>
committer email
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%cE</emphasis>
</term>
<listitem>
<simpara>
committer email (respecting .mailmap, see
        <citerefentry>
<refentrytitle>git-shortlog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%cl</emphasis>
</term>
<listitem>
<simpara>
committer email local-part (the part before the <emphasis>@</emphasis> sign)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%cL</emphasis>
</term>
<listitem>
<simpara>
committer local-part (see <emphasis>%cl</emphasis>) respecting .mailmap, see
        <citerefentry>
<refentrytitle>git-shortlog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%cd</emphasis>
</term>
<listitem>
<simpara>
committer date (format respects --date= option)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%cD</emphasis>
</term>
<listitem>
<simpara>
committer date, RFC2822 style
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%cr</emphasis>
</term>
<listitem>
<simpara>
committer date, relative
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%ct</emphasis>
</term>
<listitem>
<simpara>
committer date, UNIX timestamp
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%ci</emphasis>
</term>
<listitem>
<simpara>
committer date, ISO 8601-like format
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%cI</emphasis>
</term>
<listitem>
<simpara>
committer date, strict ISO 8601 format
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%cs</emphasis>
</term>
<listitem>
<simpara>
committer date, short format (<literal>YYYY-MM-DD</literal>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%ch</emphasis>
</term>
<listitem>
<simpara>
committer date, human style (like the <literal>--date=human</literal> option of
        <citerefentry>
<refentrytitle>git-rev-list</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%d</emphasis>
</term>
<listitem>
<simpara>
ref names, like the --decorate option of <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%D</emphasis>
</term>
<listitem>
<simpara>
ref names without the " (", ")" wrapping.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%(describe[:options])</emphasis>
</term>
<listitem>
<simpara>
human-readable name, like
                          <citerefentry>
<refentrytitle>git-describe</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>; empty string for
                          undescribable commits.  The <literal>describe</literal> string
                          may be followed by a colon and zero or more
                          comma-separated options.  Descriptions can be
                          inconsistent when tags are added or removed at
                          the same time.
</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>match=&lt;pattern&gt;</emphasis>: Only consider tags matching the given
   <literal>glob(7)</literal> pattern, excluding the "refs/tags/" prefix.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>exclude=&lt;pattern&gt;</emphasis>: Do not consider tags matching the given
   <literal>glob(7)</literal> pattern, excluding the "refs/tags/" prefix.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%S</emphasis>
</term>
<listitem>
<simpara>
ref name given on the command line by which the commit was reached
       (like <literal>git log --source</literal>), only works with <literal>git log</literal>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%e</emphasis>
</term>
<listitem>
<simpara>
encoding
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%s</emphasis>
</term>
<listitem>
<simpara>
subject
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%f</emphasis>
</term>
<listitem>
<simpara>
sanitized subject line, suitable for a filename
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%b</emphasis>
</term>
<listitem>
<simpara>
body
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%B</emphasis>
</term>
<listitem>
<simpara>
raw body (unwrapped subject and body)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%GG</emphasis>
</term>
<listitem>
<simpara>
raw verification message from GPG for a signed commit
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%G?</emphasis>
</term>
<listitem>
<simpara>
show "G" for a good (valid) signature,
        "B" for a bad signature,
        "U" for a good signature with unknown validity,
        "X" for a good signature that has expired,
        "Y" for a good signature made by an expired key,
        "R" for a good signature made by a revoked key,
        "E" if the signature cannot be checked (e.g. missing key)
        and "N" for no signature
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%GS</emphasis>
</term>
<listitem>
<simpara>
show the name of the signer for a signed commit
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%GK</emphasis>
</term>
<listitem>
<simpara>
show the key used to sign a signed commit
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%GF</emphasis>
</term>
<listitem>
<simpara>
show the fingerprint of the key used to sign a signed commit
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%GP</emphasis>
</term>
<listitem>
<simpara>
show the fingerprint of the primary key whose subkey was used
        to sign a signed commit
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%GT</emphasis>
</term>
<listitem>
<simpara>
show the trust level for the key used to sign a signed commit
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%gD</emphasis>
</term>
<listitem>
<simpara>
reflog selector, e.g., <literal>refs/stash@{1}</literal> or <literal>refs/stash@{2
        minutes ago}</literal>; the format follows the rules described for the
        <literal>-g</literal> option. The portion before the <literal>@</literal> is the refname as
        given on the command line (so <literal>git log -g refs/heads/master</literal>
        would yield <literal>refs/heads/master@{0}</literal>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%gd</emphasis>
</term>
<listitem>
<simpara>
shortened reflog selector; same as <literal>%gD</literal>, but the refname
        portion is shortened for human readability (so
        <literal>refs/heads/master</literal> becomes just <literal>master</literal>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%gn</emphasis>
</term>
<listitem>
<simpara>
reflog identity name
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%gN</emphasis>
</term>
<listitem>
<simpara>
reflog identity name (respecting .mailmap, see
        <citerefentry>
<refentrytitle>git-shortlog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%ge</emphasis>
</term>
<listitem>
<simpara>
reflog identity email
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%gE</emphasis>
</term>
<listitem>
<simpara>
reflog identity email (respecting .mailmap, see
        <citerefentry>
<refentrytitle>git-shortlog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%gs</emphasis>
</term>
<listitem>
<simpara>
reflog subject
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>%(trailers[:options])</emphasis>
</term>
<listitem>
<simpara>
display the trailers of the body as
                          interpreted by
                          <citerefentry>
<refentrytitle>git-interpret-trailers</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. The
                          <literal>trailers</literal> string may be followed by a colon
                          and zero or more comma-separated options.
                          If any option is provided multiple times the
                          last occurrence wins.
</simpara>
<simpara>The boolean options accept an optional value <literal>[=&lt;BOOL&gt;]</literal>. The values
<literal>true</literal>, <literal>false</literal>, <literal>on</literal>, <literal>off</literal> etc. are all accepted. See the "boolean"
sub-section in "EXAMPLES" in <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. If a boolean
option is given with no value, it&#8217;s enabled.</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>key=&lt;K&gt;</emphasis>: only show trailers with specified key. Matching is done
   case-insensitively and trailing colon is optional. If option is
   given multiple times trailer lines matching any of the keys are
   shown. This option automatically enables the <literal>only</literal> option so that
   non-trailer lines in the trailer block are hidden. If that is not
   desired it can be disabled with <literal>only=false</literal>.  E.g.,
   <literal>%(trailers:key=Reviewed-by)</literal> shows trailer lines with key
   <literal>Reviewed-by</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>only[=&lt;BOOL&gt;]</emphasis>: select whether non-trailer lines from the trailer
   block should be included.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>separator=&lt;SEP&gt;</emphasis>: specify a separator inserted between trailer
   lines. When this option is not given each trailer line is
   terminated with a line feed character. The string SEP may contain
   the literal formatting codes described above. To use comma as
   separator one must use <literal>%x2C</literal> as it would otherwise be parsed as
   next option. E.g., <literal>%(trailers:key=Ticket,separator=%x2C )</literal>
   shows all trailer lines whose key is "Ticket" separated by a comma
   and a space.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>unfold[=&lt;BOOL&gt;]</emphasis>: make it behave as if interpret-trailer&#8217;s <literal>--unfold</literal>
   option was given. E.g.,
   <literal>%(trailers:only,unfold=true)</literal> unfolds and shows all trailer lines.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>keyonly[=&lt;BOOL&gt;]</emphasis>: only show the key part of the trailer.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>valueonly[=&lt;BOOL&gt;]</emphasis>: only show the value part of the trailer.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>key_value_separator=&lt;SEP&gt;</emphasis>: specify a separator inserted between
   trailer lines. When this option is not given each trailer key-value
   pair is separated by ": ". Otherwise it shares the same semantics
   as <emphasis>separator=&lt;SEP&gt;</emphasis> above.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<note><simpara>Some placeholders may depend on other options given to the
revision traversal engine. For example, the <literal>%g*</literal> reflog options will
insert an empty string unless we are traversing reflog entries (e.g., by
<literal>git log -g</literal>). The <literal>%d</literal> and <literal>%D</literal> placeholders will use the "short"
decoration format if <literal>--decorate</literal> was not already provided on the command
line.</simpara></note>
<simpara>If you add a <literal>+</literal> (plus sign) after <emphasis>%</emphasis> of a placeholder, a line-feed
is inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.</simpara>
<simpara>If you add a <literal>-</literal> (minus sign) after <emphasis>%</emphasis> of a placeholder, all consecutive
line-feeds immediately preceding the expansion are deleted if and only if the
placeholder expands to an empty string.</simpara>
<simpara>If you add a ` ` (space) after <emphasis>%</emphasis> of a placeholder, a space
is inserted immediately before the expansion if and only if the
placeholder expands to a non-empty string.</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>tformat:</emphasis>
</simpara>
<simpara>The <emphasis>tformat:</emphasis> format works exactly like <emphasis>format:</emphasis>, except that it
provides "terminator" semantics instead of "separator" semantics. In
other words, each commit has the message terminator character (usually a
newline) appended, rather than a separator placed between entries.
This means that the final entry of a single-line format will be properly
terminated with a new line, just as the "oneline" format does.
For example:</simpara>
<literallayout class="monospaced">$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973</literallayout><simpara></simpara>
<simpara>In addition, any unrecognized string that has a <literal>%</literal> in it is interpreted
as if it has <literal>tformat:</literal> in front of it.  For example, these two are
equivalent:</simpara>
<literallayout class="monospaced">$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef</literallayout><simpara></simpara>
</listitem>
</itemizedlist>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<itemizedlist>
<listitem>
<simpara>
Print the list of commits reachable from the current branch.
</simpara>
<literallayout class="monospaced">git rev-list HEAD</literallayout><simpara></simpara>
</listitem>
<listitem>
<simpara>
Print the list of commits on this branch, but not present in the
  upstream branch.
</simpara>
<literallayout class="monospaced">git rev-list @{upstream}..HEAD</literallayout><simpara></simpara>
</listitem>
<listitem>
<simpara>
Format commits with their author and commit message (see also the
  porcelain <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>).
</simpara>
<literallayout class="monospaced">git rev-list --format=medium HEAD</literallayout><simpara></simpara>
</listitem>
<listitem>
<simpara>
Format commits along with their diffs (see also the porcelain
  <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, which can do this in a single process).
</simpara>
<literallayout class="monospaced">git rev-list HEAD |
git diff-tree --stdin --format=medium -p</literallayout><simpara></simpara>
</listitem>
<listitem>
<simpara>
Print the list of commits on the current branch that touched any
  file in the <literal>Documentation</literal> directory.
</simpara>
<literallayout class="monospaced">git rev-list HEAD -- Documentation/</literallayout><simpara></simpara>
</listitem>
<listitem>
<simpara>
Print the list of commits authored by you in the past year, on
  any branch, tag, or other ref.
</simpara>
<literallayout class="monospaced">git rev-list --author=you@example.com --since=1.year.ago --all</literallayout><simpara></simpara>
</listitem>
<listitem>
<simpara>
Print the list of objects reachable from the current branch (i.e., all
  commits and the blobs and trees they contain).
</simpara>
<literallayout class="monospaced">git rev-list --objects HEAD</literallayout><simpara></simpara>
</listitem>
<listitem>
<simpara>
Compare the disk size of all reachable objects, versus those
  reachable from reflogs, versus the total packed size. This can tell
  you whether running <literal>git repack -ad</literal> might reduce the repository size
  (by dropping unreachable objects), and whether expiring reflogs might
  help.
</simpara>
<literallayout class="monospaced"># reachable objects
git rev-list --disk-usage --objects --all
# plus reflogs
git rev-list --disk-usage --objects --all --reflog
# total disk size used
du -c .git/objects/pack/*.pack .git/objects/??/*
# alternative to du: add up "size" and "size-pack" fields
git count-objects -v</literallayout><simpara></simpara>
</listitem>
<listitem>
<simpara>
Report the disk size of each branch, not including objects used by the
  current branch. This can find outliers that are contributing to a
  bloated repository size (e.g., because somebody accidentally committed
  large build artifacts).
</simpara>
<literallayout class="monospaced">git for-each-ref --format='%(refname)' |
while read branch
do
        size=$(git rev-list --disk-usage --objects HEAD..$branch)
        echo "$size $branch"
done |
sort -n</literallayout><simpara></simpara>
</listitem>
<listitem>
<simpara>
Compare the on-disk size of branches in one group of refs, excluding
  another. If you co-mingle objects from multiple remotes in a single
  repository, this can show which remotes are contributing to the
  repository size (taking the size of <literal>origin</literal> as a baseline).
</simpara>
<literallayout class="monospaced">git rev-list --disk-usage --objects --remotes=$suspect --not --remotes=origin</literallayout><simpara></simpara>
</listitem>
</itemizedlist>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
