<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-apply</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-apply</refname>
  <refpurpose>Apply a patch to files and/or to the index</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git apply</emphasis> [--stat] [--numstat] [--summary] [--check] [--index | --intent-to-add] [--3way]
          [--apply] [--no-add] [--build-fake-ancestor=&lt;file&gt;] [-R | --reverse]
          [--allow-binary-replacement | --binary] [--reject] [-z]
          [-p&lt;n&gt;] [-C&lt;n&gt;] [--inaccurate-eof] [--recount] [--cached]
          [--ignore-space-change | --ignore-whitespace]
          [--whitespace=(nowarn|warn|fix|error|error-all)]
          [--exclude=&lt;path&gt;] [--include=&lt;path&gt;] [--directory=&lt;root&gt;]
          [--verbose] [--unsafe-paths] [&lt;patch&gt;&#8230;]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Reads the supplied diff output (i.e. "a patch") and applies it to files.
When running from a subdirectory in a repository, patched paths
outside the directory are ignored.
With the <literal>--index</literal> option the patch is also applied to the index, and
with the <literal>--cached</literal> option the patch is only applied to the index.
Without these options, the command applies the patch only to files,
and does not require them to be in a Git repository.</simpara>
<simpara>This command applies the patch but does not create a commit.  Use
<citerefentry>
<refentrytitle>git-am</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> to create commits from patches generated by
<citerefentry>
<refentrytitle>git-format-patch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and/or received by email.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
&lt;patch&gt;&#8230;
</term>
<listitem>
<simpara>
        The files to read the patch from.  <emphasis>-</emphasis> can be used to read
        from the standard input.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--stat
</term>
<listitem>
<simpara>
        Instead of applying the patch, output diffstat for the
        input.  Turns off "apply".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--numstat
</term>
<listitem>
<simpara>
        Similar to <literal>--stat</literal>, but shows the number of added and
        deleted lines in decimal notation and the pathname without
        abbreviation, to make it more machine friendly.  For
        binary files, outputs two <literal>-</literal> instead of saying
        <literal>0 0</literal>.  Turns off "apply".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--summary
</term>
<listitem>
<simpara>
        Instead of applying the patch, output a condensed
        summary of information obtained from git diff extended
        headers, such as creations, renames and mode changes.
        Turns off "apply".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--check
</term>
<listitem>
<simpara>
        Instead of applying the patch, see if the patch is
        applicable to the current working tree and/or the index
        file and detects errors.  Turns off "apply".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--index
</term>
<listitem>
<simpara>
        Apply the patch to both the index and the working tree (or
        merely check that it would apply cleanly to both if <literal>--check</literal> is
        in effect). Note that <literal>--index</literal> expects index entries and
        working tree copies for relevant paths to be identical (their
        contents and metadata such as file mode must match), and will
        raise an error if they are not, even if the patch would apply
        cleanly to both the index and the working tree in isolation.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--cached
</term>
<listitem>
<simpara>
        Apply the patch to just the index, without touching the working
        tree. If <literal>--check</literal> is in effect, merely check that it would
        apply cleanly to the index entry.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--intent-to-add
</term>
<listitem>
<simpara>
        When applying the patch only to the working tree, mark new
        files to be added to the index later (see <literal>--intent-to-add</literal>
        option in <citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>). This option is ignored unless
        running in a Git repository and <literal>--index</literal> is not specified.
        Note that <literal>--index</literal> could be implied by other options such
        as <literal>--cached</literal> or <literal>--3way</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-3
</term>
<term>
--3way
</term>
<listitem>
<simpara>
        Attempt 3-way merge if the patch records the identity of blobs it is supposed
        to apply to and we have those blobs available locally, possibly leaving the
        conflict markers in the files in the working tree for the user to
        resolve.  This option implies the <literal>--index</literal> option unless the
        <literal>--cached</literal> option is used, and is incompatible with the <literal>--reject</literal> option.
        When used with the <literal>--cached</literal> option, any conflicts are left at higher stages
        in the cache.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--build-fake-ancestor=&lt;file&gt;
</term>
<listitem>
<simpara>
        Newer <emphasis>git diff</emphasis> output has embedded <emphasis>index information</emphasis>
        for each blob to help identify the original version that
        the patch applies to.  When this flag is given, and if
        the original versions of the blobs are available locally,
        builds a temporary index containing those blobs.
</simpara>
<simpara>When a pure mode change is encountered (which has no index information),
the information is read from the current index instead.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-R
</term>
<term>
--reverse
</term>
<listitem>
<simpara>
        Apply the patch in reverse.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--reject
</term>
<listitem>
<simpara>
        For atomicity, <emphasis>git apply</emphasis> by default fails the whole patch and
        does not touch the working tree when some of the hunks
        do not apply.  This option makes it apply
        the parts of the patch that are applicable, and leave the
        rejected hunks in corresponding *.rej files.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-z
</term>
<listitem>
<simpara>
        When <literal>--numstat</literal> has been given, do not munge pathnames,
        but use a NUL-terminated machine-readable format.
</simpara>
<simpara>Without this option, pathnames with "unusual" characters are quoted as
explained for the configuration variable <literal>core.quotePath</literal> (see
<citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-p&lt;n&gt;
</term>
<listitem>
<simpara>
        Remove &lt;n&gt; leading path components (separated by slashes) from
        traditional diff paths. E.g., with <literal>-p2</literal>, a patch against
        <literal>a/dir/file</literal> will be applied directly to <literal>file</literal>. The default is
        1.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-C&lt;n&gt;
</term>
<listitem>
<simpara>
        Ensure at least &lt;n&gt; lines of surrounding context match before
        and after each change.  When fewer lines of surrounding
        context exist they all must match.  By default no context is
        ever ignored.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unidiff-zero
</term>
<listitem>
<simpara>
        By default, <emphasis>git apply</emphasis> expects that the patch being
        applied is a unified diff with at least one line of context.
        This provides good safety measures, but breaks down when
        applying a diff generated with <literal>--unified=0</literal>. To bypass these
        checks use <literal>--unidiff-zero</literal>.
</simpara>
<simpara>Note, for the reasons stated above usage of context-free patches is
discouraged.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--apply
</term>
<listitem>
<simpara>
        If you use any of the options marked "Turns off
        <emphasis>apply</emphasis>" above, <emphasis>git apply</emphasis> reads and outputs the
        requested information without actually applying the
        patch.  Give this flag after those flags to also apply
        the patch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-add
</term>
<listitem>
<simpara>
        When applying a patch, ignore additions made by the
        patch.  This can be used to extract the common part between
        two files by first running <emphasis>diff</emphasis> on them and applying
        the result with this option, which would apply the
        deletion part but not the addition part.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--allow-binary-replacement
</term>
<term>
--binary
</term>
<listitem>
<simpara>
        Historically we did not allow binary patch applied
        without an explicit permission from the user, and this
        flag was the way to do so.  Currently we always allow binary
        patch application, so this is a no-op.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--exclude=&lt;path-pattern&gt;
</term>
<listitem>
<simpara>
        Don&#8217;t apply changes to files matching the given path pattern. This can
        be useful when importing patchsets, where you want to exclude certain
        files or directories.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--include=&lt;path-pattern&gt;
</term>
<listitem>
<simpara>
        Apply changes to files matching the given path pattern. This can
        be useful when importing patchsets, where you want to include certain
        files or directories.
</simpara>
<simpara>When <literal>--exclude</literal> and <literal>--include</literal> patterns are used, they are examined in the
order they appear on the command line, and the first match determines if a
patch to each path is used.  A patch to a path that does not match any
include/exclude pattern is used by default if there is no include pattern
on the command line, and ignored if there is any include pattern.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignore-space-change
</term>
<term>
--ignore-whitespace
</term>
<listitem>
<simpara>
        When applying a patch, ignore changes in whitespace in context
        lines if necessary.
        Context lines will preserve their whitespace, and they will not
        undergo whitespace fixing regardless of the value of the
        <literal>--whitespace</literal> option. New lines will still be fixed, though.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--whitespace=&lt;action&gt;
</term>
<listitem>
<simpara>
        When applying a patch, detect a new or modified line that has
        whitespace errors.  What are considered whitespace errors is
        controlled by <literal>core.whitespace</literal> configuration.  By default,
        trailing whitespaces (including lines that solely consist of
        whitespaces) and a space character that is immediately followed
        by a tab character inside the initial indent of the line are
        considered whitespace errors.
</simpara>
<simpara>By default, the command outputs warning messages but applies the patch.
When <literal>git-apply</literal> is used for statistics and not applying a
patch, it defaults to <literal>nowarn</literal>.</simpara>
<simpara>You can use different <literal>&lt;action&gt;</literal> values to control this
behavior:</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>nowarn</literal> turns off the trailing whitespace warning.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>warn</literal> outputs warnings for a few such errors, but applies the
  patch as-is (default).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>fix</literal> outputs warnings for a few such errors, and applies the
  patch after fixing them (<literal>strip</literal> is a synonym --- the tool
  used to consider only trailing whitespace characters as errors, and the
  fix involved <emphasis>stripping</emphasis> them, but modern Gits do more).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>error</literal> outputs warnings for a few such errors, and refuses
  to apply the patch.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>error-all</literal> is similar to <literal>error</literal> but shows all errors.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
--inaccurate-eof
</term>
<listitem>
<simpara>
        Under certain circumstances, some versions of <emphasis>diff</emphasis> do not correctly
        detect a missing new-line at the end of the file. As a result, patches
        created by such <emphasis>diff</emphasis> programs do not record incomplete lines
        correctly. This option adds support for applying such patches by
        working around this bug.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Report progress to stderr. By default, only a message about the
        current patch being applied will be printed. This option will cause
        additional information to be reported.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--recount
</term>
<listitem>
<simpara>
        Do not trust the line counts in the hunk headers, but infer them
        by inspecting the patch (e.g. after editing the patch without
        adjusting the hunk headers appropriately).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--directory=&lt;root&gt;
</term>
<listitem>
<simpara>
        Prepend &lt;root&gt; to all filenames.  If a "-p" argument was also passed,
        it is applied before prepending the new root.
</simpara>
<simpara>For example, a patch that talks about updating <literal>a/git-gui.sh</literal> to <literal>b/git-gui.sh</literal>
can be applied to the file in the working tree <literal>modules/git-gui/git-gui.sh</literal> by
running <literal>git apply --directory=modules/git-gui</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unsafe-paths
</term>
<listitem>
<simpara>
        By default, a patch that affects outside the working area
        (either a Git controlled working tree, or the current working
        directory when "git apply" is used as a replacement of GNU
        patch) is rejected as a mistake (or a mischief).
</simpara>
<simpara>When <literal>git apply</literal> is used as a "better GNU patch", the user can pass
the <literal>--unsafe-paths</literal> option to override this safety check.  This option
has no effect when <literal>--index</literal> or <literal>--cached</literal> is in use.</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_configuration">
<title>CONFIGURATION</title>
<variablelist>
<varlistentry>
<term>
apply.ignoreWhitespace
</term>
<listitem>
<simpara>
        Set to <emphasis>change</emphasis> if you want changes in whitespace to be ignored by default.
        Set to one of: no, none, never, false if you want changes in
        whitespace to be significant.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
apply.whitespace
</term>
<listitem>
<simpara>
        When no <literal>--whitespace</literal> flag is given from the command
        line, this configuration item is used as the default.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_submodules">
<title>SUBMODULES</title>
<simpara>If the patch contains any changes to submodules then <emphasis>git apply</emphasis>
treats these changes as follows.</simpara>
<simpara>If <literal>--index</literal> is specified (explicitly or implicitly), then the submodule
commits must match the index exactly for the patch to apply.  If any
of the submodules are checked-out, then these check-outs are completely
ignored, i.e., they are not required to be up to date or clean and they
are not updated.</simpara>
<simpara>If <literal>--index</literal> is not specified, then the submodule commits in the patch
are ignored and only the absence or presence of the corresponding
subdirectory is checked and (if possible) updated.</simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>git-am</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
