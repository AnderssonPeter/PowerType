<?xml version="1.0"?>
<xsl:stylesheet
    version="1.0" 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template name="string-replace-all">
        <xsl:param name="text" />
        <xsl:param name="replace" />
        <xsl:param name="by" />
        <xsl:choose>
            <xsl:when test="$text = '' or $replace = ''or not($replace)" >
                <!-- Prevent this routine from hanging -->
                <xsl:value-of select="$text" />
            </xsl:when>
            <xsl:when test="contains($text, $replace)">
                <xsl:value-of select="substring-before($text,$replace)" />
                <xsl:value-of select="$by" />
                <xsl:call-template name="string-replace-all">
                    <xsl:with-param name="text" select="substring-after($text,$replace)" />
                    <xsl:with-param name="replace" select="$replace" />
                    <xsl:with-param name="by" select="$by" />
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of disable-output-escaping="yes" select="$text" />
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="format-string">
        <xsl:param name="text" />
        <xsl:text>&quot;</xsl:text>
        <xsl:call-template name="string-replace-all">
            <xsl:with-param name="text" select="normalize-space($text)"/>
            <xsl:with-param name="replace" select="'&quot;'"/>
            <xsl:with-param name="by" select="'`&quot;'"/>
        </xsl:call-template>
        <xsl:text>&quot;;
</xsl:text>
    </xsl:template>
    <xsl:template match="/">
        <xsl:text>    [CommandParameter]@{
        Keys = @("</xsl:text>
        <xsl:value-of disable-output-escaping="yes" select="substring-after(normalize-space(./refentry/refmeta/refentrytitle), '-')"/>
        <xsl:text>");
        Name = "</xsl:text>
        <xsl:value-of disable-output-escaping="yes" select="substring-after(normalize-space(./refentry/refmeta/refentrytitle), '-')"/>
        <xsl:text>";
        Description = "</xsl:text>
        <xsl:value-of disable-output-escaping="yes" select="normalize-space(./refentry/refnamediv/refpurpose)"/>
        <xsl:text>";
        Parameters = @(
</xsl:text>
        <xsl:for-each select="refentry/*[@id='_options']/variablelist/varlistentry">
            <xsl:text>            [</xsl:text>
            <xsl:value-of disable-output-escaping="yes" select="./type"/>
            <xsl:text>Parameter]@{</xsl:text>
            <xsl:text>
                Keys = @(</xsl:text>
            <xsl:for-each select="term">
                <xsl:text>"</xsl:text>
                    <xsl:value-of disable-output-escaping="yes" select="normalize-space(.)"/>
                <xsl:text>"</xsl:text>
                <xsl:if test="position() != last()">
                    <xsl:text>, </xsl:text>
                </xsl:if>
            </xsl:for-each>
            <xsl:text>);
                Name = "</xsl:text>
            <xsl:value-of disable-output-escaping="yes" select="./name"/>
            <xsl:text>";
                Description = </xsl:text>
            <xsl:call-template name="format-string">
                <xsl:with-param name="text" select="listitem/simpara"/>
            </xsl:call-template>
            <xsl:if test="./type = 'Value'">
                <xsl:text>                Source = $???;
</xsl:text>
            </xsl:if>
            <xsl:if test="./excluding">
                <xsl:text>                Condition = [ExclusiveParameterCondition]::new("</xsl:text>
                <xsl:value-of disable-output-escaping="yes" select="./excluding"/>
                <xsl:text>");
</xsl:text>
            </xsl:if>
            <xsl:text>            },
</xsl:text>
        </xsl:for-each>
        <xsl:text>        ),
</xsl:text>
        <xsl:text>    },</xsl:text>
    </xsl:template>
</xsl:stylesheet>