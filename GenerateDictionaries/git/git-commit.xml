<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-commit</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-commit</refname>
  <refpurpose>Record changes to the repository</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git commit</emphasis> [-a | --interactive | --patch] [-s] [-v] [-u&lt;mode&gt;] [--amend]
           [--dry-run] [(-c | -C | --squash) &lt;commit&gt; | --fixup [(amend|reword):]&lt;commit&gt;)]
           [-F &lt;file&gt; | -m &lt;msg&gt;] [--reset-author] [--allow-empty]
           [--allow-empty-message] [--no-verify] [-e] [--author=&lt;author&gt;]
           [--date=&lt;date&gt;] [--cleanup=&lt;mode&gt;] [--[no-]status]
           [-i | -o] [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]]
           [(--trailer &lt;token&gt;[(=|:)&lt;value&gt;])&#8230;] [-S[&lt;keyid&gt;]]
           [--] [&lt;pathspec&gt;&#8230;]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Create a new commit containing the current contents of the index and
the given log message describing the changes. The new commit is a
direct child of HEAD, usually the tip of the current branch, and the
branch is updated to point to it (unless no branch is associated with
the working tree, in which case HEAD is "detached" as described in
<citerefentry>
<refentrytitle>git-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>).</simpara>
<simpara>The content to be committed can be specified in several ways:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
by using <citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> to incrementally "add" changes to the
   index before using the <emphasis>commit</emphasis> command (Note: even modified files
   must be "added");
</simpara>
</listitem>
<listitem>
<simpara>
by using <citerefentry>
<refentrytitle>git-rm</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> to remove files from the working tree
   and the index, again before using the <emphasis>commit</emphasis> command;
</simpara>
</listitem>
<listitem>
<simpara>
by listing files as arguments to the <emphasis>commit</emphasis> command
   (without --interactive or --patch switch), in which
   case the commit will ignore changes staged in the index, and instead
   record the current content of the listed files (which must already
   be known to Git);
</simpara>
</listitem>
<listitem>
<simpara>
by using the -a switch with the <emphasis>commit</emphasis> command to automatically
   "add" changes from all known files (i.e. all files that are already
   listed in the index) and to automatically "rm" files in the index
   that have been removed from the working tree, and then perform the
   actual commit;
</simpara>
</listitem>
<listitem>
<simpara>
by using the --interactive or --patch switches with the <emphasis>commit</emphasis> command
   to decide one by one which files or hunks should be part of the commit
   in addition to contents in the index,
   before finalizing the operation. See the &#8220;Interactive Mode&#8221; section of
   <citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> to learn how to operate these modes.
</simpara>
</listitem>
</orderedlist>
<simpara>The <literal>--dry-run</literal> option can be used to obtain a
summary of what is included by any of the above for the next
commit by giving the same set of parameters (options and paths).</simpara>
<simpara>If you make a commit and then find a mistake immediately after
that, you can recover from it with <emphasis>git reset</emphasis>.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-a
</term>
<term>
--all
</term>
<listitem>
<simpara>
        Tell the command to automatically stage files that have
        been modified and deleted, but new files you have not
        told Git about are not affected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-p
</term>
<term>
--patch
</term>
<listitem>
<simpara>
        Use the interactive patch selection interface to choose
        which changes to commit. See <citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for
        details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-C &lt;commit&gt;
</term>
<term>
--reuse-message=&lt;commit&gt;
</term>
<listitem>
<simpara>
        Take an existing commit object, and reuse the log message
        and the authorship information (including the timestamp)
        when creating the commit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-c &lt;commit&gt;
</term>
<term>
--reedit-message=&lt;commit&gt;
</term>
<listitem>
<simpara>
        Like <emphasis>-C</emphasis>, but with <literal>-c</literal> the editor is invoked, so that
        the user can further edit the commit message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--fixup=[(amend|reword):]&lt;commit&gt;
</term>
<listitem>
<simpara>
        Create a new commit which "fixes up" <literal>&lt;commit&gt;</literal> when applied with
        <literal>git rebase --autosquash</literal>. Plain <literal>--fixup=&lt;commit&gt;</literal> creates a
        "fixup!" commit which changes the content of <literal>&lt;commit&gt;</literal> but leaves
        its log message untouched. <literal>--fixup=amend:&lt;commit&gt;</literal> is similar but
        creates an "amend!" commit which also replaces the log message of
        <literal>&lt;commit&gt;</literal> with the log message of the "amend!" commit.
        <literal>--fixup=reword:&lt;commit&gt;</literal> creates an "amend!" commit which
        replaces the log message of <literal>&lt;commit&gt;</literal> with its own log message
        but makes no changes to the content of <literal>&lt;commit&gt;</literal>.
</simpara>
<simpara>The commit created by plain <literal>--fixup=&lt;commit&gt;</literal> has a subject
composed of "fixup!" followed by the subject line from &lt;commit&gt;,
and is recognized specially by <literal>git rebase --autosquash</literal>. The <literal>-m</literal>
option may be used to supplement the log message of the created
commit, but the additional commentary will be thrown away once the
"fixup!" commit is squashed into <literal>&lt;commit&gt;</literal> by
<literal>git rebase --autosquash</literal>.</simpara>
<simpara>The commit created by <literal>--fixup=amend:&lt;commit&gt;</literal> is similar but its
subject is instead prefixed with "amend!". The log message of
&lt;commit&gt; is copied into the log message of the "amend!" commit and
opened in an editor so it can be refined. When <literal>git rebase
--autosquash</literal> squashes the "amend!" commit into <literal>&lt;commit&gt;</literal>, the
log message of <literal>&lt;commit&gt;</literal> is replaced by the refined log message
from the "amend!" commit. It is an error for the "amend!" commit&#8217;s
log message to be empty unless <literal>--allow-empty-message</literal> is
specified.</simpara>
<simpara><literal>--fixup=reword:&lt;commit&gt;</literal> is shorthand for <literal>--fixup=amend:&lt;commit&gt;
--only</literal>. It creates an "amend!" commit with only a log message
(ignoring any changes staged in the index). When squashed by <literal>git
rebase --autosquash</literal>, it replaces the log message of <literal>&lt;commit&gt;</literal>
without making any other changes.</simpara>
<simpara>Neither "fixup!" nor "amend!" commits change authorship of
<literal>&lt;commit&gt;</literal> when applied by <literal>git rebase --autosquash</literal>.
See <citerefentry>
<refentrytitle>git-rebase</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--squash=&lt;commit&gt;
</term>
<listitem>
<simpara>
        Construct a commit message for use with <literal>rebase --autosquash</literal>.
        The commit message subject line is taken from the specified
        commit with a prefix of "squash! ".  Can be used with additional
        commit message options (<literal>-m</literal>/<literal>-c</literal>/<literal>-C</literal>/<literal>-F</literal>). See
        <citerefentry>
<refentrytitle>git-rebase</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--reset-author
</term>
<listitem>
<simpara>
        When used with -C/-c/--amend options, or when committing after a
        conflicting cherry-pick, declare that the authorship of the
        resulting commit now belongs to the committer. This also renews
        the author timestamp.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--short
</term>
<listitem>
<simpara>
        When doing a dry-run, give the output in the short-format. See
        <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details. Implies <literal>--dry-run</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--branch
</term>
<listitem>
<simpara>
        Show the branch and tracking info even in short-format.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--porcelain
</term>
<listitem>
<simpara>
        When doing a dry-run, give the output in a porcelain-ready
        format. See <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details. Implies
        <literal>--dry-run</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--long
</term>
<listitem>
<simpara>
        When doing a dry-run, give the output in the long-format.
        Implies <literal>--dry-run</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-z
</term>
<term>
--null
</term>
<listitem>
<simpara>
        When showing <literal>short</literal> or <literal>porcelain</literal> status output, print the
        filename verbatim and terminate the entries with NUL, instead of LF.
        If no format is given, implies the <literal>--porcelain</literal> output format.
        Without the <literal>-z</literal> option, filenames with "unusual" characters are
        quoted as explained for the configuration variable <literal>core.quotePath</literal>
        (see <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-F &lt;file&gt;
</term>
<term>
--file=&lt;file&gt;
</term>
<listitem>
<simpara>
        Take the commit message from the given file.  Use <emphasis>-</emphasis> to
        read the message from the standard input.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--author=&lt;author&gt;
</term>
<listitem>
<simpara>
        Override the commit author. Specify an explicit author using the
        standard <literal>A U Thor &lt;author@example.com&gt;</literal> format. Otherwise &lt;author&gt;
        is assumed to be a pattern and is used to search for an existing
        commit by that author (i.e. rev-list --all -i --author=&lt;author&gt;);
        the commit author is then copied from the first such commit found.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--date=&lt;date&gt;
</term>
<listitem>
<simpara>
        Override the author date used in the commit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-m &lt;msg&gt;
</term>
<term>
--message=&lt;msg&gt;
</term>
<listitem>
<simpara>
        Use the given &lt;msg&gt; as the commit message.
        If multiple <literal>-m</literal> options are given, their values are
        concatenated as separate paragraphs.
</simpara>
<simpara>The <literal>-m</literal> option is mutually exclusive with <literal>-c</literal>, <literal>-C</literal>, and <literal>-F</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-t &lt;file&gt;
</term>
<term>
--template=&lt;file&gt;
</term>
<listitem>
<simpara>
        When editing the commit message, start the editor with the
        contents in the given file.  The <literal>commit.template</literal> configuration
        variable is often used to give this option implicitly to the
        command.  This mechanism can be used by projects that want to
        guide participants with some hints on what to write in the message
        in what order.  If the user exits the editor without editing the
        message, the commit is aborted.  This has no effect when a message
        is given by other means, e.g. with the <literal>-m</literal> or <literal>-F</literal> options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-s
</term>
<term>
--signoff
</term>
<term>
--no-signoff
</term>
<listitem>
<simpara>
        Add a <literal>Signed-off-by</literal> trailer by the committer at the end of the commit
        log message.  The meaning of a signoff depends on the project
        to which you&#8217;re committing.  For example, it may certify that
        the committer has the rights to submit the work under the
        project&#8217;s license or agrees to some contributor representation,
        such as a Developer Certificate of Origin.
        (See <ulink url="http://developercertificate.org">http://developercertificate.org</ulink> for the one used by the
        Linux kernel and Git projects.)  Consult the documentation or
        leadership of the project to which you&#8217;re contributing to
        understand how the signoffs are used in that project.
</simpara>
<simpara>The --no-signoff option can be used to countermand an earlier --signoff
option on the command line.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--trailer &lt;token&gt;[(=|:)&lt;value&gt;]
</term>
<listitem>
<simpara>
        Specify a (&lt;token&gt;, &lt;value&gt;) pair that should be applied as a
        trailer. (e.g. <literal>git commit --trailer "Signed-off-by:C O Mitter \
        &lt;committer@example.com&gt;" --trailer "Helped-by:C O Mitter \
        &lt;committer@example.com&gt;"</literal> will add the "Signed-off-by" trailer
        and the "Helped-by" trailer to the commit message.)
        The <literal>trailer.*</literal> configuration variables
        (<citerefentry>
<refentrytitle>git-interpret-trailers</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>) can be used to define if
        a duplicated trailer is omitted, where in the run of trailers
        each trailer would appear, and other details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--[no-]verify
</term>
<listitem>
<simpara>
        By default, the pre-commit and commit-msg hooks are run.
        When any of <literal>--no-verify</literal> or <literal>-n</literal> is given, these are bypassed.
        See also <citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--allow-empty
</term>
<listitem>
<simpara>
        Usually recording a commit that has the exact same tree as its
        sole parent commit is a mistake, and the command prevents you
        from making such a commit.  This option bypasses the safety, and
        is primarily for use by foreign SCM interface scripts.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--allow-empty-message
</term>
<listitem>
<simpara>
       Like --allow-empty this command is primarily for use by foreign
       SCM interface scripts. It allows you to create a commit with an
       empty commit message without using plumbing commands like
       <citerefentry>
<refentrytitle>git-commit-tree</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--cleanup=&lt;mode&gt;
</term>
<listitem>
<simpara>
        This option determines how the supplied commit message should be
        cleaned up before committing.  The <emphasis>&lt;mode&gt;</emphasis> can be <literal>strip</literal>,
        <literal>whitespace</literal>, <literal>verbatim</literal>, <literal>scissors</literal> or <literal>default</literal>.
</simpara>
<variablelist>
<varlistentry>
<term>
strip
</term>
<listitem>
<simpara>
        Strip leading and trailing empty lines, trailing whitespace,
        commentary and collapse consecutive empty lines.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
whitespace
</term>
<listitem>
<simpara>
        Same as <literal>strip</literal> except #commentary is not removed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
verbatim
</term>
<listitem>
<simpara>
        Do not change the message at all.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
scissors
</term>
<listitem>
<simpara>
        Same as <literal>whitespace</literal> except that everything from (and including)
        the line found below is truncated, if the message is to be edited.
        "<literal>#</literal>" can be customized with core.commentChar.
</simpara>
<literallayout class="monospaced"># ------------------------ &gt;8 ------------------------</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
default
</term>
<listitem>
<simpara>
        Same as <literal>strip</literal> if the message is to be edited.
        Otherwise <literal>whitespace</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The default can be changed by the <literal>commit.cleanup</literal> configuration
variable (see <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-e
</term>
<term>
--edit
</term>
<listitem>
<simpara>
        The message taken from file with <literal>-F</literal>, command line with
        <literal>-m</literal>, and from commit object with <literal>-C</literal> are usually used as
        the commit log message unmodified. This option lets you
        further edit the message taken from these sources.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-edit
</term>
<listitem>
<simpara>
        Use the selected commit message without launching an editor.
        For example, <literal>git commit --amend --no-edit</literal> amends a commit
        without changing its commit message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--amend
</term>
<listitem>
<simpara>
        Replace the tip of the current branch by creating a new
        commit. The recorded tree is prepared as usual (including
        the effect of the <literal>-i</literal> and <literal>-o</literal> options and explicit
        pathspec), and the message from the original commit is used
        as the starting point, instead of an empty message, when no
        other message is specified from the command line via options
        such as <literal>-m</literal>, <literal>-F</literal>, <literal>-c</literal>, etc.  The new commit has the same
        parents and author as the current one (the <literal>--reset-author</literal>
        option can countermand this).
</simpara>
<simpara>It is a rough equivalent for:</simpara>
<literallayout class="monospaced">        $ git reset --soft HEAD^
        $ ... do something else to come up with the right tree ...
        $ git commit -c ORIG_HEAD</literallayout><simpara></simpara>
<simpara>but can be used to amend a merge commit.</simpara>
<simpara>You should understand the implications of rewriting history if you
amend a commit that has already been published.  (See the "RECOVERING
FROM UPSTREAM REBASE" section in <citerefentry>
<refentrytitle>git-rebase</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-post-rewrite
</term>
<listitem>
<simpara>
        Bypass the post-rewrite hook.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-i
</term>
<term>
--include
</term>
<listitem>
<simpara>
        Before making a commit out of staged contents so far,
        stage the contents of paths given on the command line
        as well.  This is usually not what you want unless you
        are concluding a conflicted merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-o
</term>
<term>
--only
</term>
<listitem>
<simpara>
        Make a commit by taking the updated working tree contents
        of the paths specified on the
        command line, disregarding any contents that have been
        staged for other paths. This is the default mode of operation of
        <emphasis>git commit</emphasis> if any paths are given on the command line,
        in which case this option can be omitted.
        If this option is specified together with <literal>--amend</literal>, then
        no paths need to be specified, which can be used to amend
        the last commit without committing changes that have
        already been staged. If used together with <literal>--allow-empty</literal>
        paths are also not required, and an empty commit will be created.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--pathspec-from-file=&lt;file&gt;
</term>
<listitem>
<simpara>
        Pathspec is passed in <literal>&lt;file&gt;</literal> instead of commandline args. If
        <literal>&lt;file&gt;</literal> is exactly <literal>-</literal> then standard input is used. Pathspec
        elements are separated by LF or CR/LF. Pathspec elements can be
        quoted as explained for the configuration variable <literal>core.quotePath</literal>
        (see <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>). See also <literal>--pathspec-file-nul</literal> and
        global <literal>--literal-pathspecs</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--pathspec-file-nul
</term>
<listitem>
<simpara>
        Only meaningful with <literal>--pathspec-from-file</literal>. Pathspec elements are
        separated with NUL character and all other characters are taken
        literally (including newlines and quotes).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-u[&lt;mode&gt;]
</term>
<term>
--untracked-files[=&lt;mode&gt;]
</term>
<listitem>
<simpara>
        Show untracked files.
</simpara>
<simpara>The mode parameter is optional (defaults to <emphasis>all</emphasis>), and is used to
specify the handling of untracked files; when -u is not used, the
default is <emphasis>normal</emphasis>, i.e. show untracked files and directories.</simpara>
<simpara>The possible options are:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>no</emphasis>     - Show no untracked files
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>normal</emphasis> - Shows untracked files and directories
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>all</emphasis>    - Also shows individual files in untracked directories.
</simpara>
</listitem>
</itemizedlist>
<simpara>The default can be changed using the status.showUntrackedFiles
configuration variable documented in <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Show unified diff between the HEAD commit and what
        would be committed at the bottom of the commit message
        template to help the user describe the commit by reminding
        what changes the commit has.
        Note that this diff output doesn&#8217;t have its
        lines prefixed with <emphasis>#</emphasis>. This diff will not be a part
        of the commit message. See the <literal>commit.verbose</literal> configuration
        variable in <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
<simpara>If specified twice, show in addition the unified diff between
what would be committed and the worktree files, i.e. the unstaged
changes to tracked files.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        Suppress commit summary message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--dry-run
</term>
<listitem>
<simpara>
        Do not create a commit, but show a list of paths that are
        to be committed, paths with local changes that will be left
        uncommitted and paths that are untracked.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--status
</term>
<listitem>
<simpara>
        Include the output of <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> in the commit
        message template when using an editor to prepare the commit
        message.  Defaults to on, but can be used to override
        configuration variable commit.status.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-status
</term>
<listitem>
<simpara>
        Do not include the output of <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> in the
        commit message template when using an editor to prepare the
        default commit message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-S[&lt;keyid&gt;]
</term>
<term>
--gpg-sign[=&lt;keyid&gt;]
</term>
<term>
--no-gpg-sign
</term>
<listitem>
<simpara>
        GPG-sign commits. The <literal>keyid</literal> argument is optional and
        defaults to the committer identity; if specified, it must be
        stuck to the option without a space. <literal>--no-gpg-sign</literal> is useful to
        countermand both <literal>commit.gpgSign</literal> configuration variable, and
        earlier <literal>--gpg-sign</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--
</term>
<listitem>
<simpara>
        Do not interpret any more arguments as options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;pathspec&gt;&#8230;
</term>
<listitem>
<simpara>
        When pathspec is given on the command line, commit the contents of
        the files that match the pathspec without recording the changes
        already added to the index. The contents of these files are also
        staged for the next commit on top of what have been staged before.
</simpara>
<simpara>For more details, see the <emphasis>pathspec</emphasis> entry in <citerefentry>
<refentrytitle>gitglossary</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<simpara>When recording your own work, the contents of modified files in
your working tree are temporarily stored to a staging area
called the "index" with <emphasis>git add</emphasis>.  A file can be
reverted back, only in the index but not in the working tree,
to that of the last commit with <literal>git restore --staged &lt;file&gt;</literal>,
which effectively reverts <emphasis>git add</emphasis> and prevents the changes to
this file from participating in the next commit.  After building
the state to be committed incrementally with these commands,
<literal>git commit</literal> (without any pathname parameter) is used to record what
has been staged so far.  This is the most basic form of the
command.  An example:</simpara>
<literallayout class="monospaced">$ edit hello.c
$ git rm goodbye.c
$ git add hello.c
$ git commit</literallayout><simpara></simpara>
<simpara>Instead of staging files after each individual change, you can
tell <literal>git commit</literal> to notice the changes to the files whose
contents are tracked in
your working tree and do corresponding <literal>git add</literal> and <literal>git rm</literal>
for you.  That is, this example does the same as the earlier
example if there is no other change in your working tree:</simpara>
<literallayout class="monospaced">$ edit hello.c
$ rm goodbye.c
$ git commit -a</literallayout><simpara></simpara>
<simpara>The command <literal>git commit -a</literal> first looks at your working tree,
notices that you have modified hello.c and removed goodbye.c,
and performs necessary <literal>git add</literal> and <literal>git rm</literal> for you.</simpara>
<simpara>After staging changes to many files, you can alter the order the
changes are recorded in, by giving pathnames to <literal>git commit</literal>.
When pathnames are given, the command makes a commit that
only records the changes made to the named paths:</simpara>
<literallayout class="monospaced">$ edit hello.c hello.h
$ git add hello.c hello.h
$ edit Makefile
$ git commit Makefile</literallayout><simpara></simpara>
<simpara>This makes a commit that records the modification to <literal>Makefile</literal>.
The changes staged for <literal>hello.c</literal> and <literal>hello.h</literal> are not included
in the resulting commit.  However, their changes are not lost&#8201;&#8212;&#8201;they are still staged and merely held back.  After the above
sequence, if you do:</simpara>
<literallayout class="monospaced">$ git commit</literallayout><simpara></simpara>
<simpara>this second commit would record the changes to <literal>hello.c</literal> and
<literal>hello.h</literal> as expected.</simpara>
<simpara>After a merge (initiated by <emphasis>git merge</emphasis> or <emphasis>git pull</emphasis>) stops
because of conflicts, cleanly merged
paths are already staged to be committed for you, and paths that
conflicted are left in unmerged state.  You would have to first
check which paths are conflicting with <emphasis>git status</emphasis>
and after fixing them manually in your working tree, you would
stage the result as usual with <emphasis>git add</emphasis>:</simpara>
<literallayout class="monospaced">$ git status | grep unmerged
unmerged: hello.c
$ edit hello.c
$ git add hello.c</literallayout><simpara></simpara>
<simpara>After resolving conflicts and staging the result, <literal>git ls-files -u</literal>
would stop mentioning the conflicted path.  When you are done,
run <literal>git commit</literal> to finally record the merge:</simpara>
<literallayout class="monospaced">$ git commit</literallayout><simpara></simpara>
<simpara>As with the case to record your own changes, you can use <literal>-a</literal>
option to save typing.  One difference is that during a merge
resolution, you cannot use <literal>git commit</literal> with pathnames to
alter the order the changes are committed, because the merge
should be recorded as a single commit.  In fact, the command
refuses to run when given pathnames (but see <literal>-i</literal> option).</simpara>
</refsect1>
<refsect1 id="_commit_information">
<title>COMMIT INFORMATION</title>
<simpara>Author and committer information is taken from the following environment
variables, if set:</simpara>
<literallayout class="monospaced">GIT_AUTHOR_NAME
GIT_AUTHOR_EMAIL
GIT_AUTHOR_DATE
GIT_COMMITTER_NAME
GIT_COMMITTER_EMAIL
GIT_COMMITTER_DATE</literallayout>
<simpara>(nb "&lt;", "&gt;" and "\n"s are stripped)</simpara>
<simpara>The author and committer names are by convention some form of a personal name
(that is, the name by which other humans refer to you), although Git does not
enforce or require any particular form. Arbitrary Unicode may be used, subject
to the constraints listed above. This name has no effect on authentication; for
that, see the <literal>credential.username</literal> variable in <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
<simpara>In case (some of) these environment variables are not set, the information
is taken from the configuration items <literal>user.name</literal> and <literal>user.email</literal>, or, if not
present, the environment variable EMAIL, or, if that is not set,
system user name and the hostname used for outgoing mail (taken
from <literal>/etc/mailname</literal> and falling back to the fully qualified hostname when
that file does not exist).</simpara>
<simpara>The <literal>author.name</literal> and <literal>committer.name</literal> and their corresponding email options
override <literal>user.name</literal> and <literal>user.email</literal> if set and are overridden themselves by
the environment variables.</simpara>
<simpara>The typical usage is to set just the <literal>user.name</literal> and <literal>user.email</literal> variables;
the other options are provided for more complex use cases.</simpara>
</refsect1>
<refsect1 id="_date_formats">
<title>DATE FORMATS</title>
<simpara>The <literal>GIT_AUTHOR_DATE</literal> and <literal>GIT_COMMITTER_DATE</literal> environment variables
support the following date formats:</simpara>
<variablelist>
<varlistentry>
<term>
Git internal format
</term>
<listitem>
<simpara>
        It is <literal>&lt;unix timestamp&gt; &lt;time zone offset&gt;</literal>, where <literal>&lt;unix
        timestamp&gt;</literal> is the number of seconds since the UNIX epoch.
        <literal>&lt;time zone offset&gt;</literal> is a positive or negative offset from UTC.
        For example CET (which is 1 hour ahead of UTC) is <literal>+0100</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
RFC 2822
</term>
<listitem>
<simpara>
        The standard email format as described by RFC 2822, for example
        <literal>Thu, 07 Apr 2005 22:13:13 +0200</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
ISO 8601
</term>
<listitem>
<simpara>
        Time and date specified by the ISO 8601 standard, for example
        <literal>2005-04-07T22:13:13</literal>. The parser accepts a space instead of the
        <literal>T</literal> character as well. Fractional parts of a second will be ignored,
        for example <literal>2005-04-07T22:13:13.019</literal> will be treated as
        <literal>2005-04-07T22:13:13</literal>.
</simpara>
<note><simpara>In addition, the date part is accepted in the following formats:
<literal>YYYY.MM.DD</literal>, <literal>MM/DD/YYYY</literal> and <literal>DD.MM.YYYY</literal>.</simpara></note>
</listitem>
</varlistentry>
</variablelist>
<simpara>In addition to recognizing all date formats above, the <literal>--date</literal> option
will also try to make sense of other, more human-centric date formats,
such as relative dates like "yesterday" or "last Friday at noon".</simpara>
</refsect1>
<refsect1 id="_discussion">
<title>DISCUSSION</title>
<simpara>Though not required, it&#8217;s a good idea to begin the commit message
with a single short (less than 50 character) line summarizing the
change, followed by a blank line and then a more thorough description.
The text up to the first blank line in a commit message is treated
as the commit title, and that title is used throughout Git.
For example, <citerefentry>
<refentrytitle>git-format-patch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> turns a commit into email, and it uses
the title on the Subject line and the rest of the commit in the body.</simpara>
<simpara>Git is to some extent character encoding agnostic.</simpara>
<itemizedlist>
<listitem>
<simpara>
The contents of the blob objects are uninterpreted sequences
   of bytes.  There is no encoding translation at the core
   level.
</simpara>
</listitem>
<listitem>
<simpara>
Path names are encoded in UTF-8 normalization form C. This
   applies to tree objects, the index file, ref names, as well as
   path names in command line arguments, environment variables
   and config files (<literal>.git/config</literal> (see <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>),
   <citerefentry>
<refentrytitle>gitignore</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> and
   <citerefentry>
<refentrytitle>gitmodules</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>).
</simpara>
<simpara>Note that Git at the core level treats path names simply as
sequences of non-NUL bytes, there are no path name encoding
conversions (except on Mac and Windows). Therefore, using
non-ASCII path names will mostly work even on platforms and file
systems that use legacy extended ASCII encodings. However,
repositories created on such systems will not work properly on
UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.
Additionally, many Git-based tools simply assume path names to
be UTF-8 and will fail to display other encodings correctly.</simpara>
</listitem>
<listitem>
<simpara>
Commit log messages are typically encoded in UTF-8, but other
   extended ASCII encodings are also supported. This includes
   ISO-8859-x, CP125x and many others, but <emphasis>not</emphasis> UTF-16/32,
   EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,
   EUC-x, CP9xx etc.).
</simpara>
</listitem>
</itemizedlist>
<simpara>Although we encourage that the commit log messages are encoded
in UTF-8, both the core and Git Porcelain are designed not to
force UTF-8 on projects.  If all participants of a particular
project find it more convenient to use legacy encodings, Git
does not forbid it.  However, there are a few things to keep in
mind.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<emphasis>git commit</emphasis> and <emphasis>git commit-tree</emphasis> issues
  a warning if the commit log message given to it does not look
  like a valid UTF-8 string, unless you explicitly say your
  project uses a legacy encoding.  The way to say this is to
  have <literal>i18n.commitEncoding</literal> in <literal>.git/config</literal> file, like this:
</simpara>
<literallayout class="monospaced">[i18n]
        commitEncoding = ISO-8859-1</literallayout><simpara></simpara>
<simpara>Commit objects created with the above setting record the value
of <literal>i18n.commitEncoding</literal> in its <literal>encoding</literal> header.  This is to
help other people who look at them later.  Lack of this header
implies that the commit log message is encoded in UTF-8.</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>git log</emphasis>, <emphasis>git show</emphasis>, <emphasis>git blame</emphasis> and friends look at the
  <literal>encoding</literal> header of a commit object, and try to re-code the
  log message into UTF-8 unless otherwise specified.  You can
  specify the desired output encoding with
  <literal>i18n.logOutputEncoding</literal> in <literal>.git/config</literal> file, like this:
</simpara>
<literallayout class="monospaced">[i18n]
        logOutputEncoding = ISO-8859-1</literallayout><simpara></simpara>
<simpara>If you do not have this configuration variable, the value of
<literal>i18n.commitEncoding</literal> is used instead.</simpara>
</listitem>
</orderedlist>
<simpara>Note that we deliberately chose not to re-code the commit log
message when a commit is made to force UTF-8 at the commit
object level, because re-coding to UTF-8 is not necessarily a
reversible operation.</simpara>
</refsect1>
<refsect1 id="_environment_and_configuration_variables">
<title>ENVIRONMENT AND CONFIGURATION VARIABLES</title>
<simpara>The editor used to edit the commit log message will be chosen from the
<literal>GIT_EDITOR</literal> environment variable, the core.editor configuration variable, the
<literal>VISUAL</literal> environment variable, or the <literal>EDITOR</literal> environment variable (in that
order).  See <citerefentry>
<refentrytitle>git-var</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.</simpara>
</refsect1>
<refsect1 id="_hooks">
<title>HOOKS</title>
<simpara>This command can run <literal>commit-msg</literal>, <literal>prepare-commit-msg</literal>, <literal>pre-commit</literal>,
<literal>post-commit</literal> and <literal>post-rewrite</literal> hooks.  See <citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for more
information.</simpara>
</refsect1>
<refsect1 id="_files">
<title>FILES</title>
<variablelist>
<varlistentry>
<term>
<literal>$GIT_DIR/COMMIT_EDITMSG</literal>
</term>
<listitem>
<simpara>
        This file contains the commit message of a commit in progress.
        If <literal>git commit</literal> exits due to an error before creating a commit,
        any commit message that has been provided by the user (e.g., in
        an editor session) will be available in this file, but will be
        overwritten by the next invocation of <literal>git commit</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-rm</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-mv</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-merge</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-commit-tree</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
