<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-upload-archive</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-upload-archive</refname>
  <refpurpose>Send archive back to git-archive</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git upload-archive</emphasis> &lt;directory&gt;</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Invoked by <emphasis>git archive --remote</emphasis> and sends a generated archive to the
other end over the Git protocol.</simpara>
<simpara>This command is usually not invoked directly by the end user.  The UI
for the protocol is on the <emphasis>git archive</emphasis> side, and the program pair
is meant to be used to get an archive from a remote repository.</simpara>
</refsect1>
<refsect1 id="_security">
<title>SECURITY</title>
<simpara>In order to protect the privacy of objects that have been removed from
history but may not yet have been pruned, <literal>git-upload-archive</literal> avoids
serving archives for commits and trees that are not reachable from the
repository&#8217;s refs.  However, because calculating object reachability is
computationally expensive, <literal>git-upload-archive</literal> implements a stricter
but easier-to-check set of rules:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Clients may request a commit or tree that is pointed to directly by
     a ref. E.g., <literal>git archive --remote=origin v1.0</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
Clients may request a sub-tree within a commit or tree using the
     <literal>ref:path</literal> syntax. E.g., <literal>git archive --remote=origin v1.0:Documentation</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
Clients may <emphasis>not</emphasis> use other sha1 expressions, even if the end
     result is reachable. E.g., neither a relative commit like <literal>master^</literal>
     nor a literal sha1 like <literal>abcd1234</literal> is allowed, even if the result
     is reachable from the refs.
</simpara>
</listitem>
</orderedlist>
<simpara>Note that rule 3 disallows many cases that do not have any privacy
implications. These rules are subject to change in future versions of
git, and the server accessed by <literal>git archive --remote</literal> may or may not
follow these exact rules.</simpara>
<simpara>If the config option <literal>uploadArchive.allowUnreachable</literal> is true, these
rules are ignored, and clients may use arbitrary sha1 expressions.
This is useful if you do not care about the privacy of unreachable
objects, or if your object database is already publicly available for
access via non-smart-http.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
&lt;directory&gt;
</term>
<listitem>
<simpara>
        The repository to get a tar archive from.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
