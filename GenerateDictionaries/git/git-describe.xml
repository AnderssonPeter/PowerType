<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-describe</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-describe</refname>
  <refpurpose>Give an object a human readable name based on an available ref</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git describe</emphasis> [--all] [--tags] [--contains] [--abbrev=&lt;n&gt;] [&lt;commit-ish&gt;&#8230;]
<emphasis>git describe</emphasis> [--all] [--tags] [--contains] [--abbrev=&lt;n&gt;] --dirty[=&lt;mark&gt;]
<emphasis>git describe</emphasis> &lt;blob&gt;</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>The command finds the most recent tag that is reachable from a
commit.  If the tag points to the commit, then only the tag is
shown.  Otherwise, it suffixes the tag name with the number of
additional commits on top of the tagged object and the
abbreviated object name of the most recent commit. The result
is a "human-readable" object name which can also be used to
identify the commit to other git commands.</simpara>
<simpara>By default (without --all or --tags) <literal>git describe</literal> only shows
annotated tags.  For more information about creating annotated tags
see the -a and -s options to <citerefentry>
<refentrytitle>git-tag</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
<simpara>If the given object refers to a blob, it will be described
as <literal>&lt;commit-ish&gt;:&lt;path&gt;</literal>, such that the blob can be found
at <literal>&lt;path&gt;</literal> in the <literal>&lt;commit-ish&gt;</literal>, which itself describes the
first commit in which this blob occurs in a reverse revision walk
from HEAD.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
&lt;commit-ish&gt;&#8230;
</term>
<listitem>
<simpara>
        Commit-ish object names to describe.  Defaults to HEAD if omitted.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--dirty[=&lt;mark&gt;]
</term>
<term>
--broken[=&lt;mark&gt;]
</term>
<listitem>
<simpara>
        Describe the state of the working tree.  When the working
        tree matches HEAD, the output is the same as "git describe
        HEAD".  If the working tree has local modification "-dirty"
        is appended to it.  If a repository is corrupt and Git
        cannot determine if there is local modification, Git will
        error out, unless &#8216;--broken&#8217; is given, which appends
        the suffix "-broken" instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--all
</term>
<listitem>
<simpara>
        Instead of using only the annotated tags, use any ref
        found in <literal>refs/</literal> namespace.  This option enables matching
        any known branch, remote-tracking branch, or lightweight tag.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--tags
</term>
<listitem>
<simpara>
        Instead of using only the annotated tags, use any tag
        found in <literal>refs/tags</literal> namespace.  This option enables matching
        a lightweight (non-annotated) tag.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--contains
</term>
<listitem>
<simpara>
        Instead of finding the tag that predates the commit, find
        the tag that comes after the commit, and thus contains it.
        Automatically implies --tags.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--abbrev=&lt;n&gt;
</term>
<listitem>
<simpara>
        Instead of using the default number of hexadecimal digits (which
        will vary according to the number of objects in the repository with
        a default of 7) of the abbreviated object name, use &lt;n&gt; digits, or
        as many digits as needed to form a unique object name. An &lt;n&gt; of 0
        will suppress long format, only showing the closest tag.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--candidates=&lt;n&gt;
</term>
<listitem>
<simpara>
        Instead of considering only the 10 most recent tags as
        candidates to describe the input commit-ish consider
        up to &lt;n&gt; candidates.  Increasing &lt;n&gt; above 10 will take
        slightly longer but may produce a more accurate result.
        An &lt;n&gt; of 0 will cause only exact matches to be output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--exact-match
</term>
<listitem>
<simpara>
        Only output exact matches (a tag directly references the
        supplied commit).  This is a synonym for --candidates=0.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--debug
</term>
<listitem>
<simpara>
        Verbosely display information about the searching strategy
        being employed to standard error.  The tag name will still
        be printed to standard out.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--long
</term>
<listitem>
<simpara>
        Always output the long format (the tag, the number of commits
        and the abbreviated commit name) even when it matches a tag.
        This is useful when you want to see parts of the commit object name
        in "describe" output, even when the commit in question happens to be
        a tagged version.  Instead of just emitting the tag name, it will
        describe such a commit as v1.2-0-gdeadbee (0th commit since tag v1.2
        that points at object deadbee&#8230;.).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--match &lt;pattern&gt;
</term>
<listitem>
<simpara>
        Only consider tags matching the given <literal>glob(7)</literal> pattern,
        excluding the "refs/tags/" prefix. If used with <literal>--all</literal>, it also
        considers local branches and remote-tracking references matching the
        pattern, excluding respectively "refs/heads/" and "refs/remotes/"
        prefix; references of other types are never considered. If given
        multiple times, a list of patterns will be accumulated, and tags
        matching any of the patterns will be considered.  Use <literal>--no-match</literal> to
        clear and reset the list of patterns.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--exclude &lt;pattern&gt;
</term>
<listitem>
<simpara>
        Do not consider tags matching the given <literal>glob(7)</literal> pattern, excluding
        the "refs/tags/" prefix. If used with <literal>--all</literal>, it also does not consider
        local branches and remote-tracking references matching the pattern,
        excluding respectively "refs/heads/" and "refs/remotes/" prefix;
        references of other types are never considered. If given multiple times,
        a list of patterns will be accumulated and tags matching any of the
        patterns will be excluded. When combined with --match a tag will be
        considered when it matches at least one --match pattern and does not
        match any of the --exclude patterns. Use <literal>--no-exclude</literal> to clear and
        reset the list of patterns.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--always
</term>
<listitem>
<simpara>
        Show uniquely abbreviated commit object as fallback.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--first-parent
</term>
<listitem>
<simpara>
        Follow only the first parent commit upon seeing a merge commit.
        This is useful when you wish to not match tags on branches merged
        in the history of the target commit.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<simpara>With something like git.git current tree, I get:</simpara>
<literallayout class="monospaced">[torvalds@g5 git]$ git describe parent
v1.0.4-14-g2414721</literallayout>
<simpara>i.e. the current head of my "parent" branch is based on v1.0.4,
but since it has a few commits on top of that,
describe has added the number of additional commits ("14") and
an abbreviated object name for the commit itself ("2414721")
at the end.</simpara>
<simpara>The number of additional commits is the number
of commits which would be displayed by "git log v1.0.4..parent".
The hash suffix is "-g" + an unambigous abbreviation for the tip commit
of parent (which was <literal>2414721b194453f058079d897d13c4e377f92dc6</literal>). The
length of the abbreviation scales as the repository grows, using the
approximate number of objects in the repository and a bit of math
around the birthday paradox, and defaults to a minimum of 7.
The "g" prefix stands for "git" and is used to allow describing the version of
a software depending on the SCM the software is managed with. This is useful
in an environment where people may use different SCMs.</simpara>
<simpara>Doing a <emphasis>git describe</emphasis> on a tag-name will just show the tag name:</simpara>
<literallayout class="monospaced">[torvalds@g5 git]$ git describe v1.0.4
v1.0.4</literallayout>
<simpara>With --all, the command can use branch heads as references, so
the output shows the reference path as well:</simpara>
<literallayout class="monospaced">[torvalds@g5 git]$ git describe --all --abbrev=4 v1.0.5^2
tags/v1.0.0-21-g975b</literallayout>
<literallayout class="monospaced">[torvalds@g5 git]$ git describe --all --abbrev=4 HEAD^
heads/lt/describe-7-g975b</literallayout>
<simpara>With --abbrev set to 0, the command can be used to find the
closest tagname without any suffix:</simpara>
<literallayout class="monospaced">[torvalds@g5 git]$ git describe --abbrev=0 v1.0.5^2
tags/v1.0.0</literallayout>
<simpara>Note that the suffix you get if you type these commands today may be
longer than what Linus saw above when he ran these commands, as your
Git repository may have new commits whose object names begin with
975b that did not exist back then, and "-g975b" suffix alone may not
be sufficient to disambiguate these commits.</simpara>
</refsect1>
<refsect1 id="_search_strategy">
<title>SEARCH STRATEGY</title>
<simpara>For each commit-ish supplied, <emphasis>git describe</emphasis> will first look for
a tag which tags exactly that commit.  Annotated tags will always
be preferred over lightweight tags, and tags with newer dates will
always be preferred over tags with older dates.  If an exact match
is found, its name will be output and searching will stop.</simpara>
<simpara>If an exact match was not found, <emphasis>git describe</emphasis> will walk back
through the commit history to locate an ancestor commit which
has been tagged.  The ancestor&#8217;s tag will be output along with an
abbreviation of the input commit-ish&#8217;s SHA-1. If <literal>--first-parent</literal> was
specified then the walk will only consider the first parent of each
commit.</simpara>
<simpara>If multiple tags were found during the walk then the tag which
has the fewest commits different from the input commit-ish will be
selected and output.  Here fewest commits different is defined as
the number of commits which would be shown by <literal>git log tag..input</literal>
will be the smallest number of commits possible.</simpara>
</refsect1>
<refsect1 id="_bugs">
<title>BUGS</title>
<simpara>Tree objects as well as tag objects not pointing at commits, cannot be described.
When describing blobs, the lightweight tags pointing at blobs are ignored,
but the blob is still described as &lt;committ-ish&gt;:&lt;path&gt; despite the lightweight
tag being favorable.</simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
