<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-rerere</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-rerere</refname>
  <refpurpose>Reuse recorded resolution of conflicted merges</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git rerere</emphasis> [<emphasis>clear</emphasis>|<emphasis>forget</emphasis> &lt;pathspec&gt;|<emphasis>diff</emphasis>|<emphasis>remaining</emphasis>|<emphasis>status</emphasis>|<emphasis>gc</emphasis>]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>In a workflow employing relatively long lived topic branches,
the developer sometimes needs to resolve the same conflicts over
and over again until the topic branches are done (either merged
to the "release" branch, or sent out and accepted upstream).</simpara>
<simpara>This command assists the developer in this process by recording
conflicted automerge results and corresponding hand resolve results
on the initial manual merge, and applying previously recorded
hand resolutions to their corresponding automerge results.</simpara>
<note><simpara>You need to set the configuration variable <literal>rerere.enabled</literal> in order to
enable this command.</simpara></note>
</refsect1>
<refsect1 id="_commands">
<title>COMMANDS</title>
<simpara>Normally, <emphasis>git rerere</emphasis> is run without arguments or user-intervention.
However, it has several commands that allow it to interact with
its working state.</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>clear</emphasis>
</term>
<listitem>
<simpara>
Reset the metadata used by rerere if a merge resolution is to be
aborted.  Calling <emphasis>git am [--skip|--abort]</emphasis> or <emphasis>git rebase [--skip|--abort]</emphasis>
will automatically invoke this command.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>forget</emphasis> &lt;pathspec&gt;
</term>
<listitem>
<simpara>
Reset the conflict resolutions which rerere has recorded for the current
conflict in &lt;pathspec&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>diff</emphasis>
</term>
<listitem>
<simpara>
Display diffs for the current state of the resolution.  It is
useful for tracking what has changed while the user is resolving
conflicts.  Additional arguments are passed directly to the system
<emphasis>diff</emphasis> command installed in PATH.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>status</emphasis>
</term>
<listitem>
<simpara>
Print paths with conflicts whose merge resolution rerere will record.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>remaining</emphasis>
</term>
<listitem>
<simpara>
Print paths with conflicts that have not been autoresolved by rerere.
This includes paths whose resolutions cannot be tracked by rerere,
such as conflicting submodules.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>gc</emphasis>
</term>
<listitem>
<simpara>
Prune records of conflicted merges that
occurred a long time ago.  By default, unresolved conflicts older
than 15 days and resolved conflicts older than 60
days are pruned.  These defaults are controlled via the
<literal>gc.rerereUnresolved</literal> and <literal>gc.rerereResolved</literal> configuration
variables respectively.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_discussion">
<title>DISCUSSION</title>
<simpara>When your topic branch modifies an overlapping area that your
master branch (or upstream) touched since your topic branch
forked from it, you may want to test it with the latest master,
even before your topic branch is ready to be pushed upstream:</simpara>
<literallayout class="monospaced">              o---*---o topic
             /
    o---o---o---*---o---o master</literallayout><simpara></simpara>
<simpara>For such a test, you need to merge master and topic somehow.
One way to do it is to pull master into the topic branch:</simpara>
<literallayout class="monospaced">        $ git switch topic
        $ git merge master

              o---*---o---+ topic
             /           /
    o---o---o---*---o---o master</literallayout><simpara></simpara>
<simpara>The commits marked with <literal>*</literal> touch the same area in the same
file; you need to resolve the conflicts when creating the commit
marked with <literal>+</literal>.  Then you can test the result to make sure your
work-in-progress still works with what is in the latest master.</simpara>
<simpara>After this test merge, there are two ways to continue your work
on the topic.  The easiest is to build on top of the test merge
commit <literal>+</literal>, and when your work in the topic branch is finally
ready, pull the topic branch into master, and/or ask the
upstream to pull from you.  By that time, however, the master or
the upstream might have been advanced since the test merge <literal>+</literal>,
in which case the final commit graph would look like this:</simpara>
<literallayout class="monospaced">        $ git switch topic
        $ git merge master
        $ ... work on both topic and master branches
        $ git switch master
        $ git merge topic

              o---*---o---+---o---o topic
             /           /         \
    o---o---o---*---o---o---o---o---+ master</literallayout><simpara></simpara>
<simpara>When your topic branch is long-lived, however, your topic branch
would end up having many such "Merge from master" commits on it,
which would unnecessarily clutter the development history.
Readers of the Linux kernel mailing list may remember that Linus
complained about such too frequent test merges when a subsystem
maintainer asked to pull from a branch full of "useless merges".</simpara>
<simpara>As an alternative, to keep the topic branch clean of test
merges, you could blow away the test merge, and keep building on
top of the tip before the test merge:</simpara>
<literallayout class="monospaced">        $ git switch topic
        $ git merge master
        $ git reset --hard HEAD^ ;# rewind the test merge
        $ ... work on both topic and master branches
        $ git switch master
        $ git merge topic

              o---*---o-------o---o topic
             /                     \
    o---o---o---*---o---o---o---o---+ master</literallayout><simpara></simpara>
<simpara>This would leave only one merge commit when your topic branch is
finally ready and merged into the master branch.  This merge
would require you to resolve the conflict, introduced by the
commits marked with <literal>*</literal>.  However, this conflict is often the
same conflict you resolved when you created the test merge you
blew away.  <emphasis>git rerere</emphasis> helps you resolve this final
conflicted merge using the information from your earlier hand
resolve.</simpara>
<simpara>Running the <emphasis>git rerere</emphasis> command immediately after a conflicted
automerge records the conflicted working tree files, with the
usual conflict markers <literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal>, <literal>=======</literal>, and <literal>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</literal> in
them.  Later, after you are done resolving the conflicts,
running <emphasis>git rerere</emphasis> again will record the resolved state of these
files.  Suppose you did this when you created the test merge of
master into the topic branch.</simpara>
<simpara>Next time, after seeing the same conflicted automerge,
running <emphasis>git rerere</emphasis> will perform a three-way merge between the
earlier conflicted automerge, the earlier manual resolution, and
the current conflicted automerge.
If this three-way merge resolves cleanly, the result is written
out to your working tree file, so you do not have to manually
resolve it.  Note that <emphasis>git rerere</emphasis> leaves the index file alone,
so you still need to do the final sanity checks with <literal>git diff</literal>
(or <literal>git diff -c</literal>) and <emphasis>git add</emphasis> when you are satisfied.</simpara>
<simpara>As a convenience measure, <emphasis>git merge</emphasis> automatically invokes
<emphasis>git rerere</emphasis> upon exiting with a failed automerge and <emphasis>git rerere</emphasis>
records the hand resolve when it is a new conflict, or reuses the earlier hand
resolve when it is not.  <emphasis>git commit</emphasis> also invokes <emphasis>git rerere</emphasis>
when committing a merge result.  What this means is that you do
not have to do anything special yourself (besides enabling
the rerere.enabled config variable).</simpara>
<simpara>In our example, when you do the test merge, the manual
resolution is recorded, and it will be reused when you do the
actual merge later with the updated master and topic branch, as long
as the recorded resolution is still applicable.</simpara>
<simpara>The information <emphasis>git rerere</emphasis> records is also used when running
<emphasis>git rebase</emphasis>.  After blowing away the test merge and continuing
development on the topic branch:</simpara>
<literallayout class="monospaced">              o---*---o-------o---o topic
             /
    o---o---o---*---o---o---o---o   master

        $ git rebase master topic

                                  o---*---o-------o---o topic
                                 /
    o---o---o---*---o---o---o---o   master</literallayout><simpara></simpara>
<simpara>you could run <literal>git rebase master topic</literal>, to bring yourself
up to date before your topic is ready to be sent upstream.
This would result in falling back to a three-way merge, and it
would conflict the same way as the test merge you resolved earlier.
<emphasis>git rerere</emphasis> will be run by <emphasis>git rebase</emphasis> to help you resolve this
conflict.</simpara>
<simpara>[NOTE] <emphasis>git rerere</emphasis> relies on the conflict markers in the file to
detect the conflict.  If the file already contains lines that look the
same as lines with conflict markers, <emphasis>git rerere</emphasis> may fail to record a
conflict resolution.  To work around this, the <literal>conflict-marker-size</literal>
setting in <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> can be used.</simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
