<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-mergetool</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-mergetool</refname>
  <refpurpose>Run merge conflict resolution tools to resolve merge conflicts</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git mergetool</emphasis> [--tool=&lt;tool&gt;] [-y | --[no-]prompt] [&lt;file&gt;&#8230;]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Use <literal>git mergetool</literal> to run one of several merge utilities to resolve
merge conflicts.  It is typically run after <emphasis>git merge</emphasis>.</simpara>
<simpara>If one or more &lt;file&gt; parameters are given, the merge tool program will
be run to resolve differences on each file (skipping those without
conflicts).  Specifying a directory will include all unresolved files in
that path.  If no &lt;file&gt; names are specified, <emphasis>git mergetool</emphasis> will run
the merge tool program on every file with merge conflicts.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-t &lt;tool&gt;
</term>
<term>
--tool=&lt;tool&gt;
</term>
<listitem>
<simpara>
        Use the merge resolution program specified by &lt;tool&gt;.
        Valid values include emerge, gvimdiff, kdiff3,
        meld, vimdiff, and tortoisemerge. Run <literal>git mergetool --tool-help</literal>
        for the list of valid &lt;tool&gt; settings.
</simpara>
<simpara>If a merge resolution program is not specified, <emphasis>git mergetool</emphasis>
will use the configuration variable <literal>merge.tool</literal>.  If the
configuration variable <literal>merge.tool</literal> is not set, <emphasis>git mergetool</emphasis>
will pick a suitable default.</simpara>
<simpara>You can explicitly provide a full path to the tool by setting the
configuration variable <literal>mergetool.&lt;tool&gt;.path</literal>. For example, you
can configure the absolute path to kdiff3 by setting
<literal>mergetool.kdiff3.path</literal>. Otherwise, <emphasis>git mergetool</emphasis> assumes the
tool is available in PATH.</simpara>
<simpara>Instead of running one of the known merge tool programs,
<emphasis>git mergetool</emphasis> can be customized to run an alternative program
by specifying the command line to invoke in a configuration
variable <literal>mergetool.&lt;tool&gt;.cmd</literal>.</simpara>
<simpara>When <emphasis>git mergetool</emphasis> is invoked with this tool (either through the
<literal>-t</literal> or <literal>--tool</literal> option or the <literal>merge.tool</literal> configuration
variable) the configured command line will be invoked with <literal>$BASE</literal>
set to the name of a temporary file containing the common base for
the merge, if available; <literal>$LOCAL</literal> set to the name of a temporary
file containing the contents of the file on the current branch;
<literal>$REMOTE</literal> set to the name of a temporary file containing the
contents of the file to be merged, and <literal>$MERGED</literal> set to the name
of the file to which the merge tool should write the result of the
merge resolution.</simpara>
<simpara>If the custom merge tool correctly indicates the success of a
merge resolution with its exit code, then the configuration
variable <literal>mergetool.&lt;tool&gt;.trustExitCode</literal> can be set to <literal>true</literal>.
Otherwise, <emphasis>git mergetool</emphasis> will prompt the user to indicate the
success of the resolution after the custom tool has exited.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--tool-help
</term>
<listitem>
<simpara>
        Print a list of merge tools that may be used with <literal>--tool</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-y
</term>
<term>
--no-prompt
</term>
<listitem>
<simpara>
        Don&#8217;t prompt before each invocation of the merge resolution
        program.
        This is the default if the merge resolution program is
        explicitly specified with the <literal>--tool</literal> option or with the
        <literal>merge.tool</literal> configuration variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--prompt
</term>
<listitem>
<simpara>
        Prompt before each invocation of the merge resolution program
        to give the user a chance to skip the path.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-g
</term>
<term>
--gui
</term>
<listitem>
<simpara>
        When <emphasis>git-mergetool</emphasis> is invoked with the <literal>-g</literal> or <literal>--gui</literal> option
        the default merge tool will be read from the configured
        <literal>merge.guitool</literal> variable instead of <literal>merge.tool</literal>. If
        <literal>merge.guitool</literal> is not set, we will fallback to the tool
        configured under <literal>merge.tool</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-gui
</term>
<listitem>
<simpara>
        This overrides a previous <literal>-g</literal> or <literal>--gui</literal> setting and reads the
        default merge tool will be read from the configured <literal>merge.tool</literal>
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-O&lt;orderfile&gt;
</term>
<listitem>
<simpara>
        Process files in the order specified in the
        &lt;orderfile&gt;, which has one shell glob pattern per line.
        This overrides the <literal>diff.orderFile</literal> configuration variable
        (see <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>).  To cancel <literal>diff.orderFile</literal>,
        use <literal>-O/dev/null</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_configuration">
<title>CONFIGURATION</title>
<variablelist>
<varlistentry>
<term>
mergetool.&lt;tool&gt;.path
</term>
<listitem>
<simpara>
        Override the path for the given tool.  This is useful in case
        your tool is not in the PATH.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.&lt;tool&gt;.cmd
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified merge tool.  The
        specified command is evaluated in shell with the following
        variables available: <emphasis>BASE</emphasis> is the name of a temporary file
        containing the common base of the files to be merged, if available;
        <emphasis>LOCAL</emphasis> is the name of a temporary file containing the contents of
        the file on the current branch; <emphasis>REMOTE</emphasis> is the name of a temporary
        file containing the contents of the file from the branch being
        merged; <emphasis>MERGED</emphasis> contains the name of the file to which the merge
        tool should write the results of a successful merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.&lt;tool&gt;.hideResolved
</term>
<listitem>
<simpara>
        Allows the user to override the global <literal>mergetool.hideResolved</literal> value
        for a specific tool. See <literal>mergetool.hideResolved</literal> for the full
        description.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.&lt;tool&gt;.trustExitCode
</term>
<listitem>
<simpara>
        For a custom merge command, specify whether the exit code of
        the merge command can be used to determine whether the merge was
        successful.  If this is not set to true then the merge target file
        timestamp is checked and the merge assumed to have been successful
        if the file has been updated, otherwise the user is prompted to
        indicate the success of the merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.meld.hasOutput
</term>
<listitem>
<simpara>
        Older versions of <literal>meld</literal> do not support the <literal>--output</literal> option.
        Git will attempt to detect whether <literal>meld</literal> supports <literal>--output</literal>
        by inspecting the output of <literal>meld --help</literal>.  Configuring
        <literal>mergetool.meld.hasOutput</literal> will make Git skip these checks and
        use the configured value instead.  Setting <literal>mergetool.meld.hasOutput</literal>
        to <literal>true</literal> tells Git to unconditionally use the <literal>--output</literal> option,
        and <literal>false</literal> avoids using <literal>--output</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.meld.useAutoMerge
</term>
<listitem>
<simpara>
        When the <literal>--auto-merge</literal> is given, meld will merge all non-conflicting
        parts automatically, highlight the conflicting parts and wait for
        user decision.  Setting <literal>mergetool.meld.useAutoMerge</literal> to <literal>true</literal> tells
        Git to unconditionally use the <literal>--auto-merge</literal> option with <literal>meld</literal>.
        Setting this value to <literal>auto</literal> makes git detect whether <literal>--auto-merge</literal>
        is supported and will only use <literal>--auto-merge</literal> when available.  A
        value of <literal>false</literal> avoids using <literal>--auto-merge</literal> altogether, and is the
        default value.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.hideResolved
</term>
<listitem>
<simpara>
        During a merge Git will automatically resolve as many conflicts as
        possible and write the <emphasis>MERGED</emphasis> file containing conflict markers around
        any conflicts that it cannot resolve; <emphasis>LOCAL</emphasis> and <emphasis>REMOTE</emphasis> normally
        represent the versions of the file from before Git&#8217;s conflict
        resolution. This flag causes <emphasis>LOCAL</emphasis> and <emphasis>REMOTE</emphasis> to be overwriten so
        that only the unresolved conflicts are presented to the merge tool. Can
        be configured per-tool via the <literal>mergetool.&lt;tool&gt;.hideResolved</literal>
        configuration variable. Defaults to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.keepBackup
</term>
<listitem>
<simpara>
        After performing a merge, the original file with conflict markers
        can be saved as a file with a <literal>.orig</literal> extension.  If this variable
        is set to <literal>false</literal> then this file is not preserved.  Defaults to
        <literal>true</literal> (i.e. keep the backup files).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.keepTemporaries
</term>
<listitem>
<simpara>
        When invoking a custom merge tool, Git uses a set of temporary
        files to pass to the tool. If the tool returns an error and this
        variable is set to <literal>true</literal>, then these temporary files will be
        preserved, otherwise they will be removed after the tool has
        exited. Defaults to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.writeToTemp
</term>
<listitem>
<simpara>
        Git writes temporary <emphasis>BASE</emphasis>, <emphasis>LOCAL</emphasis>, and <emphasis>REMOTE</emphasis> versions of
        conflicting files in the worktree by default.  Git will attempt
        to use a temporary directory for these files when set <literal>true</literal>.
        Defaults to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.prompt
</term>
<listitem>
<simpara>
        Prompt before each invocation of the merge resolution program.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_temporary_files">
<title>TEMPORARY FILES</title>
<simpara><literal>git mergetool</literal> creates <literal>*.orig</literal> backup files while resolving merges.
These are safe to remove once a file has been merged and its
<literal>git mergetool</literal> session has completed.</simpara>
<simpara>Setting the <literal>mergetool.keepBackup</literal> configuration variable to <literal>false</literal>
causes <literal>git mergetool</literal> to automatically remove the backup as files
are successfully merged.</simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
