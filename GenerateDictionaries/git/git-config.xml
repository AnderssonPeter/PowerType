<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-config</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-config</refname>
  <refpurpose>Get and set repository or global options</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git config</emphasis> [&lt;file-option&gt;] [--type=&lt;type&gt;] [--fixed-value] [--show-origin] [--show-scope] [-z|--null] name [value [value-pattern]]
<emphasis>git config</emphasis> [&lt;file-option&gt;] [--type=&lt;type&gt;] --add name value
<emphasis>git config</emphasis> [&lt;file-option&gt;] [--type=&lt;type&gt;] [--fixed-value] --replace-all name value [value-pattern]
<emphasis>git config</emphasis> [&lt;file-option&gt;] [--type=&lt;type&gt;] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get name [value-pattern]
<emphasis>git config</emphasis> [&lt;file-option&gt;] [--type=&lt;type&gt;] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get-all name [value-pattern]
<emphasis>git config</emphasis> [&lt;file-option&gt;] [--type=&lt;type&gt;] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] [--name-only] --get-regexp name_regex [value-pattern]
<emphasis>git config</emphasis> [&lt;file-option&gt;] [--type=&lt;type&gt;] [-z|--null] --get-urlmatch name URL
<emphasis>git config</emphasis> [&lt;file-option&gt;] [--fixed-value] --unset name [value-pattern]
<emphasis>git config</emphasis> [&lt;file-option&gt;] [--fixed-value] --unset-all name [value-pattern]
<emphasis>git config</emphasis> [&lt;file-option&gt;] --rename-section old_name new_name
<emphasis>git config</emphasis> [&lt;file-option&gt;] --remove-section name
<emphasis>git config</emphasis> [&lt;file-option&gt;] [--show-origin] [--show-scope] [-z|--null] [--name-only] -l | --list
<emphasis>git config</emphasis> [&lt;file-option&gt;] --get-color name [default]
<emphasis>git config</emphasis> [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]
<emphasis>git config</emphasis> [&lt;file-option&gt;] -e | --edit</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>You can query/set/replace/unset options with this command. The name is
actually the section and the key separated by a dot, and the value will be
escaped.</simpara>
<simpara>Multiple lines can be added to an option by using the <literal>--add</literal> option.
If you want to update or unset an option which can occur on multiple
lines, a <literal>value-pattern</literal> (which is an extended regular expression,
unless the <literal>--fixed-value</literal> option is given) needs to be given.  Only the
existing values that match the pattern are updated or unset.  If
you want to handle the lines that do <emphasis role="strong">not</emphasis> match the pattern, just
prepend a single exclamation mark in front (see also <xref linkend="EXAMPLES"/>),
but note that this only works when the <literal>--fixed-value</literal> option is not
in use.</simpara>
<simpara>The <literal>--type=&lt;type&gt;</literal> option instructs <emphasis>git config</emphasis> to ensure that incoming and
outgoing values are canonicalize-able under the given &lt;type&gt;.  If no
<literal>--type=&lt;type&gt;</literal> is given, no canonicalization will be performed. Callers may
unset an existing <literal>--type</literal> specifier with <literal>--no-type</literal>.</simpara>
<simpara>When reading, the values are read from the system, global and
repository local configuration files by default, and options
<literal>--system</literal>, <literal>--global</literal>, <literal>--local</literal>, <literal>--worktree</literal> and
<literal>--file &lt;filename&gt;</literal> can be used to tell the command to read from only
that location (see <xref linkend="FILES"/>).</simpara>
<simpara>When writing, the new value is written to the repository local
configuration file by default, and options <literal>--system</literal>, <literal>--global</literal>,
<literal>--worktree</literal>, <literal>--file &lt;filename&gt;</literal> can be used to tell the command to
write to that location (you can say <literal>--local</literal> but that is the
default).</simpara>
<simpara>This command will fail with non-zero status upon error.  Some exit
codes are:</simpara>
<itemizedlist>
<listitem>
<simpara>
The section or key is invalid (ret=1),
</simpara>
</listitem>
<listitem>
<simpara>
no section or name was provided (ret=2),
</simpara>
</listitem>
<listitem>
<simpara>
the config file is invalid (ret=3),
</simpara>
</listitem>
<listitem>
<simpara>
the config file cannot be written (ret=4),
</simpara>
</listitem>
<listitem>
<simpara>
you try to unset an option which does not exist (ret=5),
</simpara>
</listitem>
<listitem>
<simpara>
you try to unset/set an option for which multiple lines match (ret=5), or
</simpara>
</listitem>
<listitem>
<simpara>
you try to use an invalid regexp (ret=6).
</simpara>
</listitem>
</itemizedlist>
<simpara>On success, the command returns the exit code 0.</simpara>
<simpara>A list of all available configuration variables can be obtained using the
<literal>git help --config</literal> command.</simpara>
</refsect1>
<refsect1 id="OPTIONS">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--replace-all
</term>
<listitem>
<simpara>
        Default behavior is to replace at most one line. This replaces
        all lines matching the key (and optionally the <literal>value-pattern</literal>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--add
</term>
<listitem>
<simpara>
        Adds a new line to the option without altering any existing
        values.  This is the same as providing <emphasis>^$</emphasis> as the <literal>value-pattern</literal>
        in <literal>--replace-all</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get
</term>
<listitem>
<simpara>
        Get the value for a given key (optionally filtered by a regex
        matching the value). Returns error code 1 if the key was not
        found and the last value if multiple key values were found.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-all
</term>
<listitem>
<simpara>
        Like get, but returns all values for a multi-valued key.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-regexp
</term>
<listitem>
<simpara>
        Like --get-all, but interprets the name as a regular expression and
        writes out the key names.  Regular expression matching is currently
        case-sensitive and done against a canonicalized version of the key
        in which section and variable names are lowercased, but subsection
        names are not.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-urlmatch name URL
</term>
<listitem>
<simpara>
        When given a two-part name section.key, the value for
        section.&lt;url&gt;.key whose &lt;url&gt; part matches the best to the
        given URL is returned (if no such key exists, the value for
        section.key is used as a fallback).  When given just the
        section as name, do so for all the keys in the section and
        list them.  Returns error code 1 if no value is found.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--global
</term>
<listitem>
<simpara>
        For writing options: write to global <literal>~/.gitconfig</literal> file
        rather than the repository <literal>.git/config</literal>, write to
        <literal>$XDG_CONFIG_HOME/git/config</literal> file if this file exists and the
        <literal>~/.gitconfig</literal> file doesn&#8217;t.
</simpara>
<simpara>For reading options: read only from global <literal>~/.gitconfig</literal> and from
<literal>$XDG_CONFIG_HOME/git/config</literal> rather than from all available files.</simpara>
<simpara>See also <xref linkend="FILES"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--system
</term>
<listitem>
<simpara>
        For writing options: write to system-wide
        <literal>$(prefix)/etc/gitconfig</literal> rather than the repository
        <literal>.git/config</literal>.
</simpara>
<simpara>For reading options: read only from system-wide <literal>$(prefix)/etc/gitconfig</literal>
rather than from all available files.</simpara>
<simpara>See also <xref linkend="FILES"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--local
</term>
<listitem>
<simpara>
        For writing options: write to the repository <literal>.git/config</literal> file.
        This is the default behavior.
</simpara>
<simpara>For reading options: read only from the repository <literal>.git/config</literal> rather than
from all available files.</simpara>
<simpara>See also <xref linkend="FILES"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--worktree
</term>
<listitem>
<simpara>
        Similar to <literal>--local</literal> except that <literal>.git/config.worktree</literal> is
        read from or written to if <literal>extensions.worktreeConfig</literal> is
        present. If not it&#8217;s the same as <literal>--local</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f config-file
</term>
<term>
--file config-file
</term>
<listitem>
<simpara>
        For writing options: write to the specified file rather than the
        repository <literal>.git/config</literal>.
</simpara>
<simpara>For reading options: read only from the specified file rather than from all
available files.</simpara>
<simpara>See also <xref linkend="FILES"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--blob blob
</term>
<listitem>
<simpara>
        Similar to <literal>--file</literal> but use the given blob instead of a file. E.g.
        you can use <emphasis>master:.gitmodules</emphasis> to read values from the file
        <emphasis>.gitmodules</emphasis> in the master branch. See "SPECIFYING REVISIONS"
        section in <citerefentry>
<refentrytitle>gitrevisions</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> for a more complete list of
        ways to spell blob names.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--remove-section
</term>
<listitem>
<simpara>
        Remove the given section from the configuration file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--rename-section
</term>
<listitem>
<simpara>
        Rename the given section to a new name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unset
</term>
<listitem>
<simpara>
        Remove the line matching the key from config file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unset-all
</term>
<listitem>
<simpara>
        Remove all lines matching the key from config file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-l
</term>
<term>
--list
</term>
<listitem>
<simpara>
        List all variables set in config file, along with their values.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--fixed-value
</term>
<listitem>
<simpara>
        When used with the <literal>value-pattern</literal> argument, treat <literal>value-pattern</literal> as
        an exact string instead of a regular expression. This will restrict
        the name/value pairs that are matched to only those where the value
        is exactly equal to the <literal>value-pattern</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--type &lt;type&gt;
</term>
<listitem>
<simpara>
  <emphasis>git config</emphasis> will ensure that any input or output is valid under the given
  type constraint(s), and will canonicalize outgoing values in <literal>&lt;type&gt;</literal>'s
  canonical form.
</simpara>
<simpara>Valid <literal>&lt;type&gt;</literal>'s include:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>bool</emphasis>: canonicalize values as either "true" or "false".
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>int</emphasis>: canonicalize values as simple decimal numbers. An optional suffix of
  <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> will cause the value to be multiplied by 1024, 1048576, or
  1073741824 upon input.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>bool-or-int</emphasis>: canonicalize according to either <emphasis>bool</emphasis> or <emphasis>int</emphasis>, as described
  above.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>path</emphasis>: canonicalize by adding a leading <literal>~</literal> to the value of <literal>$HOME</literal> and
  <literal>~user</literal> to the home directory for the specified user. This specifier has no
  effect when setting the value (but you can use <literal>git config section.variable
  ~/</literal> from the command line to let your shell do the expansion.)
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>expiry-date</emphasis>: canonicalize by converting from a fixed or relative date-string
  to a timestamp. This specifier has no effect when setting the value.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>color</emphasis>: When getting a value, canonicalize by converting to an ANSI color
  escape sequence. When setting a value, a sanity-check is performed to ensure
  that the given value is canonicalize-able as an ANSI color, but it is written
  as-is.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
--bool
</term>
<term>
--int
</term>
<term>
--bool-or-int
</term>
<term>
--path
</term>
<term>
--expiry-date
</term>
<listitem>
<simpara>
  Historical options for selecting a type specifier. Prefer instead <literal>--type</literal>
  (see above).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-type
</term>
<listitem>
<simpara>
  Un-sets the previously set type specifier (if one was previously set). This
  option requests that <emphasis>git config</emphasis> not canonicalize the retrieved variable.
  <literal>--no-type</literal> has no effect without <literal>--type=&lt;type&gt;</literal> or <literal>--&lt;type&gt;</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-z
</term>
<term>
--null
</term>
<listitem>
<simpara>
        For all options that output values and/or keys, always
        end values with the null character (instead of a
        newline). Use newline instead as a delimiter between
        key and value. This allows for secure parsing of the
        output without getting confused e.g. by values that
        contain line breaks.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--name-only
</term>
<listitem>
<simpara>
        Output only the names of config variables for <literal>--list</literal> or
        <literal>--get-regexp</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-origin
</term>
<listitem>
<simpara>
        Augment the output of all queried config options with the
        origin type (file, standard input, blob, command line) and
        the actual origin (config file path, ref, or blob id if
        applicable).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-scope
</term>
<listitem>
<simpara>
        Similar to <literal>--show-origin</literal> in that it augments the output of
        all queried config options with the scope of that value
        (local, global, system, command).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-colorbool name [stdout-is-tty]
</term>
<listitem>
<simpara>
        Find the color setting for <literal>name</literal> (e.g. <literal>color.diff</literal>) and output
        "true" or "false".  <literal>stdout-is-tty</literal> should be either "true" or
        "false", and is taken into account when configuration says
        "auto".  If <literal>stdout-is-tty</literal> is missing, then checks the standard
        output of the command itself, and exits with status 0 if color
        is to be used, or exits with status 1 otherwise.
        When the color setting for <literal>name</literal> is undefined, the command uses
        <literal>color.ui</literal> as fallback.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--get-color name [default]
</term>
<listitem>
<simpara>
        Find the color configured for <literal>name</literal> (e.g. <literal>color.diff.new</literal>) and
        output it as the ANSI color escape sequence to the standard
        output.  The optional <literal>default</literal> parameter is used instead, if
        there is no color configured for <literal>name</literal>.
</simpara>
<simpara><literal>--type=color [--default=&lt;default&gt;]</literal> is preferred over <literal>--get-color</literal>
(but note that <literal>--get-color</literal> will omit the trailing newline printed by
<literal>--type=color</literal>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-e
</term>
<term>
--edit
</term>
<listitem>
<simpara>
        Opens an editor to modify the specified config file; either
        <literal>--system</literal>, <literal>--global</literal>, or repository (default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]includes
</term>
<listitem>
<simpara>
        Respect <literal>include.*</literal> directives in config files when looking up
        values. Defaults to <literal>off</literal> when a specific file is given (e.g.,
        using <literal>--file</literal>, <literal>--global</literal>, etc) and <literal>on</literal> when searching all
        config files.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--default &lt;value&gt;
</term>
<listitem>
<simpara>
  When using <literal>--get</literal>, and the requested variable is not found, behave as if
  &lt;value&gt; were the value assigned to the that variable.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_configuration">
<title>CONFIGURATION</title>
<simpara><literal>pager.config</literal> is only respected when listing configuration, i.e., when
using <literal>--list</literal> or any of the <literal>--get-*</literal> which may return multiple results.
The default is to use a pager.</simpara>
</refsect1>
<refsect1 id="FILES">
<title>FILES</title>
<simpara>If not set explicitly with <literal>--file</literal>, there are four files where
<emphasis>git config</emphasis> will search for configuration options:</simpara>
<variablelist>
<varlistentry>
<term>
$(prefix)/etc/gitconfig
</term>
<listitem>
<simpara>
        System-wide configuration file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
$XDG_CONFIG_HOME/git/config
</term>
<listitem>
<simpara>
        Second user-specific configuration file. If $XDG_CONFIG_HOME is not set
        or empty, <literal>$HOME/.config/git/config</literal> will be used. Any single-valued
        variable set in this file will be overwritten by whatever is in
        <literal>~/.gitconfig</literal>.  It is a good idea not to create this file if
        you sometimes use older versions of Git, as support for this
        file was added fairly recently.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
~/.gitconfig
</term>
<listitem>
<simpara>
        User-specific configuration file. Also called "global"
        configuration file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
$GIT_DIR/config
</term>
<listitem>
<simpara>
        Repository specific configuration file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
$GIT_DIR/config.worktree
</term>
<listitem>
<simpara>
        This is optional and is only searched when
        <literal>extensions.worktreeConfig</literal> is present in $GIT_DIR/config.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>If no further options are given, all reading options will read all of these
files that are available. If the global or the system-wide configuration
file are not available they will be ignored. If the repository configuration
file is not available or readable, <emphasis>git config</emphasis> will exit with a non-zero
error code. However, in neither case will an error message be issued.</simpara>
<simpara>The files are read in the order given above, with last value found taking
precedence over values read earlier.  When multiple values are taken then all
values of a key from all files will be used.</simpara>
<simpara>You may override individual configuration parameters when running any git
command by using the <literal>-c</literal> option. See <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.</simpara>
<simpara>All writing options will per default write to the repository specific
configuration file. Note that this also affects options like <literal>--replace-all</literal>
and <literal>--unset</literal>. <emphasis role="strong"><emphasis>git config</emphasis> will only ever change one file at a time</emphasis>.</simpara>
<simpara>You can override these rules using the <literal>--global</literal>, <literal>--system</literal>,
<literal>--local</literal>, <literal>--worktree</literal>, and <literal>--file</literal> command-line options; see
<xref linkend="OPTIONS"/> above.</simpara>
</refsect1>
<refsect1 id="_environment">
<title>ENVIRONMENT</title>
<variablelist>
<varlistentry>
<term>
GIT_CONFIG_GLOBAL
</term>
<term>
GIT_CONFIG_SYSTEM
</term>
<listitem>
<simpara>
        Take the configuration from the given files instead from global or
        system-level configuration. See <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
GIT_CONFIG_NOSYSTEM
</term>
<listitem>
<simpara>
        Whether to skip reading settings from the system-wide
        $(prefix)/etc/gitconfig file. See <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>See also <xref linkend="FILES"/>.</simpara>
<variablelist>
<varlistentry>
<term>
GIT_CONFIG_COUNT
</term>
<term>
GIT_CONFIG_KEY_&lt;n&gt;
</term>
<term>
GIT_CONFIG_VALUE_&lt;n&gt;
</term>
<listitem>
<simpara>
        If GIT_CONFIG_COUNT is set to a positive number, all environment pairs
        GIT_CONFIG_KEY_&lt;n&gt; and GIT_CONFIG_VALUE_&lt;n&gt; up to that number will be
        added to the process&#8217;s runtime configuration. The config pairs are
        zero-indexed. Any missing key or value is treated as an error. An empty
        GIT_CONFIG_COUNT is treated the same as GIT_CONFIG_COUNT=0, namely no
        pairs are processed. These environment variables will override values
        in configuration files, but will be overridden by any explicit options
        passed via <literal>git -c</literal>.
</simpara>
<simpara>This is useful for cases where you want to spawn multiple git commands
with a common configuration but cannot depend on a configuration file,
for example when writing scripts.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
GIT_CONFIG
</term>
<listitem>
<simpara>
        If no <literal>--file</literal> option is provided to <literal>git config</literal>, use the file
        given by <literal>GIT_CONFIG</literal> as if it were provided via <literal>--file</literal>. This
        variable has no effect on other Git commands, and is mostly for
        historical compatibility; there is generally no reason to use it
        instead of the <literal>--file</literal> option.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="EXAMPLES">
<title>EXAMPLES</title>
<simpara>Given a .git/config like this:</simpara>
<literallayout class="monospaced">#
# This is the config file, and
# a '#' or ';' character indicates
# a comment
#

; core variables
[core]
        ; Don't trust file modes
        filemode = false

; Our diff algorithm
[diff]
        external = /usr/local/bin/diff-wrapper
        renames = true

; Proxy settings
[core]
        gitproxy=proxy-command for kernel.org
        gitproxy=default-proxy ; for all the rest

; HTTP
[http]
        sslVerify
[http "https://weak.example.com"]
        sslVerify = false
        cookieFile = /tmp/cookie.txt</literallayout><simpara></simpara>
<simpara>you can set the filemode to true with</simpara>
<literallayout class="monospaced">% git config core.filemode true</literallayout><simpara></simpara>
<simpara>The hypothetical proxy command entries actually have a postfix to discern
what URL they apply to. Here is how to change the entry for kernel.org
to "ssh".</simpara>
<literallayout class="monospaced">% git config core.gitproxy '"ssh" for kernel.org' 'for kernel.org$'</literallayout><simpara></simpara>
<simpara>This makes sure that only the key/value pair for kernel.org is replaced.</simpara>
<simpara>To delete the entry for renames, do</simpara>
<literallayout class="monospaced">% git config --unset diff.renames</literallayout><simpara></simpara>
<simpara>If you want to delete an entry for a multivar (like core.gitproxy above),
you have to provide a regex matching the value of exactly one line.</simpara>
<simpara>To query the value for a given key, do</simpara>
<literallayout class="monospaced">% git config --get core.filemode</literallayout><simpara></simpara>
<simpara>or</simpara>
<literallayout class="monospaced">% git config core.filemode</literallayout><simpara></simpara>
<simpara>or, to query a multivar:</simpara>
<literallayout class="monospaced">% git config --get core.gitproxy "for kernel.org$"</literallayout><simpara></simpara>
<simpara>If you want to know all the values for a multivar, do:</simpara>
<literallayout class="monospaced">% git config --get-all core.gitproxy</literallayout><simpara></simpara>
<simpara>If you like to live dangerously, you can replace <emphasis role="strong">all</emphasis> core.gitproxy by a
new one with</simpara>
<literallayout class="monospaced">% git config --replace-all core.gitproxy ssh</literallayout><simpara></simpara>
<simpara>However, if you really only want to replace the line for the default proxy,
i.e. the one without a "for &#8230;" postfix, do something like this:</simpara>
<literallayout class="monospaced">% git config core.gitproxy ssh '! for '</literallayout><simpara></simpara>
<simpara>To actually match only values with an exclamation mark, you have to</simpara>
<literallayout class="monospaced">% git config section.key value '[!]'</literallayout><simpara></simpara>
<simpara>To add a new proxy, without altering any of the existing ones, use</simpara>
<literallayout class="monospaced">% git config --add core.gitproxy '"proxy-command" for example.com'</literallayout><simpara></simpara>
<simpara>An example to use customized color from the configuration in your
script:</simpara>
<literallayout class="monospaced">#!/bin/sh
WS=$(git config --get-color color.diff.whitespace "blue reverse")
RESET=$(git config --get-color "" "reset")
echo "${WS}your whitespace color or blue reverse${RESET}"</literallayout><simpara></simpara>
<simpara>For URLs in <literal>https://weak.example.com</literal>, <literal>http.sslVerify</literal> is set to
false, while it is set to <literal>true</literal> for all others:</simpara>
<literallayout class="monospaced">% git config --type=bool --get-urlmatch http.sslverify https://good.example.com
true
% git config --type=bool --get-urlmatch http.sslverify https://weak.example.com
false
% git config --get-urlmatch http https://weak.example.com
http.cookieFile /tmp/cookie.txt
http.sslverify false</literallayout><simpara></simpara>
</refsect1>
<refsect1 id="_configuration_file">
<title>CONFIGURATION FILE</title>
<simpara>The Git configuration file contains a number of variables that affect
the Git commands' behavior. The files <literal>.git/config</literal> and optionally
<literal>config.worktree</literal> (see the "CONFIGURATION FILE" section of
<citerefentry>
<refentrytitle>git-worktree</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>) in each repository are used to store the
configuration for that repository, and <literal>$HOME/.gitconfig</literal> is used to
store a per-user configuration as fallback values for the <literal>.git/config</literal>
file. The file <literal>/etc/gitconfig</literal> can be used to store a system-wide
default configuration.</simpara>
<simpara>The configuration variables are used by both the Git plumbing
and the porcelains. The variables are divided into sections, wherein
the fully qualified variable name of the variable itself is the last
dot-separated segment and the section name is everything before the last
dot. The variable names are case-insensitive, allow only alphanumeric
characters and <literal>-</literal>, and must start with an alphabetic character.  Some
variables may appear multiple times; we say then that the variable is
multivalued.</simpara>
<refsect2 id="_syntax">
<title>Syntax</title>
<simpara>The syntax is fairly flexible and permissive; whitespaces are mostly
ignored.  The <emphasis>#</emphasis> and <emphasis>;</emphasis> characters begin comments to the end of line,
blank lines are ignored.</simpara>
<simpara>The file consists of sections and variables.  A section begins with
the name of the section in square brackets and continues until the next
section begins.  Section names are case-insensitive.  Only alphanumeric
characters, <literal>-</literal> and <literal>.</literal> are allowed in section names.  Each variable
must belong to some section, which means that there must be a section
header before the first setting of a variable.</simpara>
<simpara>Sections can be further divided into subsections.  To begin a subsection
put its name in double quotes, separated by space from the section name,
in the section header, like in the example below:</simpara>
<literallayout class="monospaced">        [section "subsection"]</literallayout><simpara></simpara>
<simpara>Subsection names are case sensitive and can contain any characters except
newline and the null byte. Doublequote <literal>"</literal> and backslash can be included
by escaping them as <literal>\"</literal> and <literal>\\</literal>, respectively. Backslashes preceding
other characters are dropped when reading; for example, <literal>\t</literal> is read as
<literal>t</literal> and <literal>\0</literal> is read as <literal>0</literal>. Section headers cannot span multiple lines.
Variables may belong directly to a section or to a given subsection. You
can have <literal>[section]</literal> if you have <literal>[section "subsection"]</literal>, but you don&#8217;t
need to.</simpara>
<simpara>There is also a deprecated <literal>[section.subsection]</literal> syntax. With this
syntax, the subsection name is converted to lower-case and is also
compared case sensitively. These subsection names follow the same
restrictions as section names.</simpara>
<simpara>All the other lines (and the remainder of the line after the section
header) are recognized as setting variables, in the form
<emphasis>name = value</emphasis> (or just <emphasis>name</emphasis>, which is a short-hand to say that
the variable is the boolean "true").
The variable names are case-insensitive, allow only alphanumeric characters
and <literal>-</literal>, and must start with an alphabetic character.</simpara>
<simpara>A line that defines a value can be continued to the next line by
ending it with a <literal>\</literal>; the backslash and the end-of-line are
stripped.  Leading whitespaces after <emphasis>name =</emphasis>, the remainder of the
line after the first comment character <emphasis>#</emphasis> or <emphasis>;</emphasis>, and trailing
whitespaces of the line are discarded unless they are enclosed in
double quotes.  Internal whitespaces within the value are retained
verbatim.</simpara>
<simpara>Inside double quotes, double quote <literal>"</literal> and backslash <literal>\</literal> characters
must be escaped: use <literal>\"</literal> for <literal>"</literal> and <literal>\\</literal> for <literal>\</literal>.</simpara>
<simpara>The following escape sequences (beside <literal>\"</literal> and <literal>\\</literal>) are recognized:
<literal>\n</literal> for newline character (NL), <literal>\t</literal> for horizontal tabulation (HT, TAB)
and <literal>\b</literal> for backspace (BS).  Other char escape sequences (including octal
escape sequences) are invalid.</simpara>
</refsect2>
<refsect2 id="_includes">
<title>Includes</title>
<simpara>The <literal>include</literal> and <literal>includeIf</literal> sections allow you to include config
directives from another source. These sections behave identically to
each other with the exception that <literal>includeIf</literal> sections may be ignored
if their condition does not evaluate to true; see "Conditional includes"
below.</simpara>
<simpara>You can include a config file from another by setting the special
<literal>include.path</literal> (or <literal>includeIf.*.path</literal>) variable to the name of the file
to be included. The variable takes a pathname as its value, and is
subject to tilde expansion. These variables can be given multiple times.</simpara>
<simpara>The contents of the included file are inserted immediately, as if they
had been found at the location of the include directive. If the value of the
variable is a relative path, the path is considered to
be relative to the configuration file in which the include directive
was found.  See below for examples.</simpara>
</refsect2>
<refsect2 id="_conditional_includes">
<title>Conditional includes</title>
<simpara>You can include a config file from another conditionally by setting a
<literal>includeIf.&lt;condition&gt;.path</literal> variable to the name of the file to be
included.</simpara>
<simpara>The condition starts with a keyword followed by a colon and some data
whose format and meaning depends on the keyword. Supported keywords
are:</simpara>
<variablelist>
<varlistentry>
<term>
<literal>gitdir</literal>
</term>
<listitem>
<simpara>
        The data that follows the keyword <literal>gitdir:</literal> is used as a glob
        pattern. If the location of the .git directory matches the
        pattern, the include condition is met.
</simpara>
<simpara>The .git location may be auto-discovered, or come from <literal>$GIT_DIR</literal>
environment variable. If the repository is auto discovered via a .git
file (e.g. from submodules, or a linked worktree), the .git location
would be the final location where the .git directory is, not where the
.git file is.</simpara>
<simpara>The pattern can contain standard globbing wildcards and two additional
ones, <literal>**/</literal> and <literal>/**</literal>, that can match multiple path components. Please
refer to <citerefentry>
<refentrytitle>gitignore</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details. For convenience:</simpara>
<itemizedlist>
<listitem>
<simpara>
If the pattern starts with <literal>~/</literal>, <literal>~</literal> will be substituted with the
   content of the environment variable <literal>HOME</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
If the pattern starts with <literal>./</literal>, it is replaced with the directory
   containing the current config file.
</simpara>
</listitem>
<listitem>
<simpara>
If the pattern does not start with either <literal>~/</literal>, <literal>./</literal> or <literal>/</literal>, <literal>**/</literal>
   will be automatically prepended. For example, the pattern <literal>foo/bar</literal>
   becomes <literal>**/foo/bar</literal> and would match <literal>/any/path/to/foo/bar</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
If the pattern ends with <literal>/</literal>, <literal>**</literal> will be automatically added. For
   example, the pattern <literal>foo/</literal> becomes <literal>foo/**</literal>. In other words, it
   matches "foo" and everything inside, recursively.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>gitdir/i</literal>
</term>
<listitem>
<simpara>
        This is the same as <literal>gitdir</literal> except that matching is done
        case-insensitively (e.g. on case-insensitive file systems)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>onbranch</literal>
</term>
<listitem>
<simpara>
        The data that follows the keyword <literal>onbranch:</literal> is taken to be a
        pattern with standard globbing wildcards and two additional
        ones, <literal>**/</literal> and <literal>/**</literal>, that can match multiple path components.
        If we are in a worktree where the name of the branch that is
        currently checked out matches the pattern, the include condition
        is met.
</simpara>
<simpara>If the pattern ends with <literal>/</literal>, <literal>**</literal> will be automatically added. For
example, the pattern <literal>foo/</literal> becomes <literal>foo/**</literal>. In other words, it matches
all branches that begin with <literal>foo/</literal>. This is useful if your branches are
organized hierarchically and you would like to apply a configuration to
all the branches in that hierarchy.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>A few more notes on matching via <literal>gitdir</literal> and <literal>gitdir/i</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara>
Symlinks in <literal>$GIT_DIR</literal> are not resolved before matching.
</simpara>
</listitem>
<listitem>
<simpara>
Both the symlink &amp; realpath versions of paths will be matched
   outside of <literal>$GIT_DIR</literal>. E.g. if ~/git is a symlink to
   /mnt/storage/git, both <literal>gitdir:~/git</literal> and <literal>gitdir:/mnt/storage/git</literal>
   will match.
</simpara>
<simpara>This was not the case in the initial release of this feature in
v2.13.0, which only matched the realpath version. Configuration that
wants to be compatible with the initial release of this feature needs
to either specify only the realpath version, or both versions.</simpara>
</listitem>
<listitem>
<simpara>
Note that "../" is not special and will match literally, which is
   unlikely what you want.
</simpara>
</listitem>
</itemizedlist>
</refsect2>
<refsect2 id="_example">
<title>Example</title>
<literallayout class="monospaced"># Core variables
[core]
        ; Don't trust file modes
        filemode = false

# Our diff algorithm
[diff]
        external = /usr/local/bin/diff-wrapper
        renames = true

[branch "devel"]
        remote = origin
        merge = refs/heads/devel

# Proxy settings
[core]
        gitProxy="ssh" for "kernel.org"
        gitProxy=default-proxy ; for the rest

[include]
        path = /path/to/foo.inc ; include by absolute path
        path = foo.inc ; find "foo.inc" relative to the current file
        path = ~/foo.inc ; find "foo.inc" in your `$HOME` directory

; include if $GIT_DIR is /path/to/foo/.git
[includeIf "gitdir:/path/to/foo/.git"]
        path = /path/to/foo.inc

; include for all repositories inside /path/to/group
[includeIf "gitdir:/path/to/group/"]
        path = /path/to/foo.inc

; include for all repositories inside $HOME/to/group
[includeIf "gitdir:~/to/group/"]
        path = /path/to/foo.inc

; relative paths are always relative to the including
; file (if the condition is true); their location is not
; affected by the condition
[includeIf "gitdir:/path/to/group/"]
        path = foo.inc

; include only if we are in a worktree where foo-branch is
; currently checked out
[includeIf "onbranch:foo-branch"]
        path = foo.inc</literallayout><simpara></simpara>
</refsect2>
<refsect2 id="_values">
<title>Values</title>
<simpara>Values of many variables are treated as a simple string, but there
are variables that take values of specific types and there are rules
as to how to spell them.</simpara>
<variablelist>
<varlistentry>
<term>
boolean
</term>
<listitem>
<simpara>
       When a variable is said to take a boolean value, many
       synonyms are accepted for <emphasis>true</emphasis> and <emphasis>false</emphasis>; these are all
       case-insensitive.
</simpara>
<variablelist>
<varlistentry>
<term>
true
</term>
<listitem>
<simpara>
Boolean true literals are <literal>yes</literal>, <literal>on</literal>, <literal>true</literal>,
                and <literal>1</literal>.  Also, a variable defined without <literal>= &lt;value&gt;</literal>
                is taken as true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
false
</term>
<listitem>
<simpara>
Boolean false literals are <literal>no</literal>, <literal>off</literal>, <literal>false</literal>,
                <literal>0</literal> and the empty string.
</simpara>
<simpara>When converting a value to its canonical form using the <literal>--type=bool</literal> type
specifier, <emphasis>git config</emphasis> will ensure that the output is "true" or
"false" (spelled in lowercase).</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
integer
</term>
<listitem>
<simpara>
       The value for many variables that specify various sizes can
       be suffixed with <literal>k</literal>, <literal>M</literal>,&#8230; to mean "scale the number by
       1024", "by 1024x1024", etc.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color
</term>
<listitem>
<simpara>
       The value for a variable that takes a color is a list of
       colors (at most two, one for foreground and one for background)
       and attributes (as many as you want), separated by spaces.
</simpara>
<simpara>The basic colors accepted are <literal>normal</literal>, <literal>black</literal>, <literal>red</literal>, <literal>green</literal>, <literal>yellow</literal>,
<literal>blue</literal>, <literal>magenta</literal>, <literal>cyan</literal> and <literal>white</literal>.  The first color given is the
foreground; the second is the background.  All the basic colors except
<literal>normal</literal> have a bright variant that can be specified by prefixing the
color with <literal>bright</literal>, like <literal>brightred</literal>.</simpara>
<simpara>Colors may also be given as numbers between 0 and 255; these use ANSI
256-color mode (but note that not all terminals may support this).  If
your terminal supports it, you may also specify 24-bit RGB values as
hex, like <literal>#ff0ab3</literal>.</simpara>
<simpara>The accepted attributes are <literal>bold</literal>, <literal>dim</literal>, <literal>ul</literal>, <literal>blink</literal>, <literal>reverse</literal>,
<literal>italic</literal>, and <literal>strike</literal> (for crossed-out or "strikethrough" letters).
The position of any attributes with respect to the colors
(before, after, or in between), doesn&#8217;t matter. Specific attributes may
be turned off by prefixing them with <literal>no</literal> or <literal>no-</literal> (e.g., <literal>noreverse</literal>,
<literal>no-ul</literal>, etc).</simpara>
<simpara>An empty color string produces no color effect at all. This can be used
to avoid coloring specific elements without disabling color entirely.</simpara>
<simpara>For git&#8217;s pre-defined color slots, the attributes are meant to be reset
at the beginning of each item in the colored output. So setting
<literal>color.decorate.branch</literal> to <literal>black</literal> will paint that branch name in a
plain <literal>black</literal>, even if the previous thing on the same output line (e.g.
opening parenthesis before the list of branch names in <literal>log --decorate</literal>
output) is set to be painted with <literal>bold</literal> or some other attribute.
However, custom log formats may do more complicated and layered
coloring, and the negated forms may be useful there.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pathname
</term>
<listitem>
<simpara>
        A variable that takes a pathname value can be given a
        string that begins with "<literal>~/</literal>" or "<literal>~user/</literal>", and the usual
        tilde expansion happens to such a string: <literal>~/</literal>
        is expanded to the value of <literal>$HOME</literal>, and <literal>~user/</literal> to the
        specified user&#8217;s home directory.
</simpara>
<simpara>If a path starts with <literal>%(prefix)/</literal>, the remainder is interpreted as a
path relative to Git&#8217;s "runtime prefix", i.e. relative to the location
where Git itself was installed. For example, <literal>%(prefix)/bin/</literal> refers to
the directory in which the Git executable itself lives. If Git was
compiled without runtime prefix support, the compiled-in prefix will be
substituted instead. In the unlikely event that a literal path needs to
be specified that should <emphasis>not</emphasis> be expanded, it needs to be prefixed by
<literal>./</literal>, like so: <literal>./%(prefix)/bin</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
<refsect2 id="_variables">
<title>Variables</title>
<simpara>Note that this list is non-comprehensive and not necessarily complete.
For command-specific variables, you will find a more detailed description
in the appropriate manual page.</simpara>
<simpara>Other git-related tools may and do use their own variables.  When
inventing new variables for use in your own tool, make sure their
names do not conflict with those that are used by Git itself and
other popular tools, and describe them in your documentation.</simpara>
<variablelist>
<varlistentry>
<term>
advice.*
</term>
<listitem>
<simpara>
        These variables control various optional help messages designed to
        aid new users. All <emphasis>advice.*</emphasis> variables default to <emphasis>true</emphasis>, and you
        can tell Git that you do not need help by setting these to <emphasis>false</emphasis>:
</simpara>
<variablelist>
<varlistentry>
<term>
fetchShowForcedUpdates
</term>
<listitem>
<simpara>
                Advice shown when <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> takes a long time
                to calculate forced updates after ref updates, or to warn
                that the check is disabled.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushUpdateRejected
</term>
<listitem>
<simpara>
                Set this variable to <emphasis>false</emphasis> if you want to disable
                <emphasis>pushNonFFCurrent</emphasis>, <emphasis>pushNonFFMatching</emphasis>, <emphasis>pushAlreadyExists</emphasis>,
                <emphasis>pushFetchFirst</emphasis>, <emphasis>pushNeedsForce</emphasis>, and <emphasis>pushRefNeedsUpdate</emphasis>
                simultaneously.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushNonFFCurrent
</term>
<listitem>
<simpara>
                Advice shown when <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> fails due to a
                non-fast-forward update to the current branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushNonFFMatching
</term>
<listitem>
<simpara>
                Advice shown when you ran <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and pushed
                <emphasis>matching refs</emphasis> explicitly (i.e. you used <emphasis>:</emphasis>, or
                specified a refspec that isn&#8217;t your current branch) and
                it resulted in a non-fast-forward error.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushAlreadyExists
</term>
<listitem>
<simpara>
                Shown when <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> rejects an update that
                does not qualify for fast-forwarding (e.g., a tag.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushFetchFirst
</term>
<listitem>
<simpara>
                Shown when <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> rejects an update that
                tries to overwrite a remote ref that points at an
                object we do not have.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushNeedsForce
</term>
<listitem>
<simpara>
                Shown when <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> rejects an update that
                tries to overwrite a remote ref that points at an
                object that is not a commit-ish, or make the remote
                ref point at an object that is not a commit-ish.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushUnqualifiedRefname
</term>
<listitem>
<simpara>
                Shown when <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> gives up trying to
                guess based on the source and destination refs what
                remote ref namespace the source belongs in, but where
                we can still suggest that the user push to either
                refs/heads/* or refs/tags/* based on the type of the
                source object.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pushRefNeedsUpdate
</term>
<listitem>
<simpara>
                Shown when <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> rejects a forced update of
                a branch when its remote-tracking ref has updates that we
                do not have locally.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
skippedCherryPicks
</term>
<listitem>
<simpara>
                Shown when <citerefentry>
<refentrytitle>git-rebase</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> skips a commit that has already
                been cherry-picked onto the upstream branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
statusAheadBehind
</term>
<listitem>
<simpara>
                Shown when <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> computes the ahead/behind
                counts for a local ref compared to its remote tracking ref,
                and that calculation takes longer than expected. Will not
                appear if <literal>status.aheadBehind</literal> is false or the option
                <literal>--no-ahead-behind</literal> is given.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
statusHints
</term>
<listitem>
<simpara>
                Show directions on how to proceed from the current
                state in the output of <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, in
                the template shown when writing commit messages in
                <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, and in the help message shown
                by <citerefentry>
<refentrytitle>git-switch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or
                <citerefentry>
<refentrytitle>git-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> when switching branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
statusUoption
</term>
<listitem>
<simpara>
                Advise to consider using the <literal>-u</literal> option to <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
                when the command takes more than 2 seconds to enumerate untracked
                files.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commitBeforeMerge
</term>
<listitem>
<simpara>
                Advice shown when <citerefentry>
<refentrytitle>git-merge</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> refuses to
                merge to avoid overwriting local changes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
resetQuiet
</term>
<listitem>
<simpara>
                Advice to consider using the <literal>--quiet</literal> option to <citerefentry>
<refentrytitle>git-reset</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
                when the command takes more than 2 seconds to enumerate unstaged
                changes after reset.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
resolveConflict
</term>
<listitem>
<simpara>
                Advice shown by various commands when conflicts
                prevent the operation from being performed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sequencerInUse
</term>
<listitem>
<simpara>
                Advice shown when a sequencer command is already in progress.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
implicitIdentity
</term>
<listitem>
<simpara>
                Advice on how to set your identity configuration when
                your information is guessed from the system username and
                domain name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
detachedHead
</term>
<listitem>
<simpara>
                Advice shown when you used
                <citerefentry>
<refentrytitle>git-switch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
                to move to the detach HEAD state, to instruct how to
                create a local branch after the fact.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
checkoutAmbiguousRemoteBranchName
</term>
<listitem>
<simpara>
                Advice shown when the argument to
                <citerefentry>
<refentrytitle>git-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <citerefentry>
<refentrytitle>git-switch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
                ambiguously resolves to a
                remote tracking branch on more than one remote in
                situations where an unambiguous argument would have
                otherwise caused a remote-tracking branch to be
                checked out. See the <literal>checkout.defaultRemote</literal>
                configuration variable for how to set a given remote
                to used by default in some situations where this
                advice would be printed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
amWorkDir
</term>
<listitem>
<simpara>
                Advice that shows the location of the patch file when
                <citerefentry>
<refentrytitle>git-am</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> fails to apply it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rmHints
</term>
<listitem>
<simpara>
                In case of failure in the output of <citerefentry>
<refentrytitle>git-rm</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
                show directions on how to proceed from the current state.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
addEmbeddedRepo
</term>
<listitem>
<simpara>
                Advice on what to do when you&#8217;ve accidentally added one
                git repo inside of another.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
ignoredHook
</term>
<listitem>
<simpara>
                Advice shown if a hook is ignored because the hook is not
                set as executable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
waitingForEditor
</term>
<listitem>
<simpara>
                Print a message to the terminal whenever Git is waiting for
                editor input from the user.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
nestedTag
</term>
<listitem>
<simpara>
                Advice shown if a user attempts to recursively tag a tag object.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submoduleAlternateErrorStrategyDie
</term>
<listitem>
<simpara>
                Advice shown when a submodule.alternateErrorStrategy option
                configured to "die" causes a fatal error.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
addIgnoredFile
</term>
<listitem>
<simpara>
                Advice shown if a user attempts to add an ignored file to
                the index.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
addEmptyPathspec
</term>
<listitem>
<simpara>
                Advice shown if a user runs the add command without providing
                the pathspec parameter.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
updateSparsePath
</term>
<listitem>
<simpara>
                Advice shown when either <citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-rm</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
                is asked to update index entries outside the current sparse
                checkout.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.fileMode
</term>
<listitem>
<simpara>
        Tells Git if the executable bit of files in the working tree
        is to be honored.
</simpara>
<simpara>Some filesystems lose the executable bit when a file that is
marked as executable is checked out, or checks out a
non-executable file with executable bit on.
<citerefentry>
<refentrytitle>git-clone</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-init</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> probe the filesystem
to see if it handles the executable bit correctly
and this variable is automatically set as necessary.</simpara>
<simpara>A repository, however, may be on a filesystem that handles
the filemode correctly, and this variable is set to <emphasis>true</emphasis>
when created, but later may be made accessible from another
environment that loses the filemode (e.g. exporting ext4 via
CIFS mount, visiting a Cygwin created repository with
Git for Windows or Eclipse).
In such a case it may be necessary to set this variable to <emphasis>false</emphasis>.
See <citerefentry>
<refentrytitle>git-update-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
<simpara>The default is true (when core.filemode is not specified in the config file).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.hideDotFiles
</term>
<listitem>
<simpara>
        (Windows-only) If true, mark newly-created directories and files whose
        name starts with a dot as hidden.  If <emphasis>dotGitOnly</emphasis>, only the <literal>.git/</literal>
        directory is hidden, but no other files starting with a dot.  The
        default mode is <emphasis>dotGitOnly</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.ignoreCase
</term>
<listitem>
<simpara>
        Internal variable which enables various workarounds to enable
        Git to work better on filesystems that are not case sensitive,
        like APFS, HFS+, FAT, NTFS, etc. For example, if a directory listing
        finds "makefile" when Git expects "Makefile", Git will assume
        it is really the same file, and continue to remember it as
        "Makefile".
</simpara>
<simpara>The default is false, except <citerefentry>
<refentrytitle>git-clone</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-init</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
will probe and set core.ignoreCase true if appropriate when the repository
is created.</simpara>
<simpara>Git relies on the proper configuration of this variable for your operating
and file system. Modifying this value may result in unexpected behavior.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.precomposeUnicode
</term>
<listitem>
<simpara>
        This option is only used by Mac OS implementation of Git.
        When core.precomposeUnicode=true, Git reverts the unicode decomposition
        of filenames done by Mac OS. This is useful when sharing a repository
        between Mac OS and Linux or Windows.
        (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7).
        When false, file names are handled fully transparent by Git,
        which is backward compatible with older versions of Git.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.protectHFS
</term>
<listitem>
<simpara>
        If set to true, do not allow checkout of paths that would
        be considered equivalent to <literal>.git</literal> on an HFS+ filesystem.
        Defaults to <literal>true</literal> on Mac OS, and <literal>false</literal> elsewhere.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.protectNTFS
</term>
<listitem>
<simpara>
        If set to true, do not allow checkout of paths that would
        cause problems with the NTFS filesystem, e.g. conflict with
        8.3 "short" names.
        Defaults to <literal>true</literal> on Windows, and <literal>false</literal> elsewhere.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.fsmonitor
</term>
<listitem>
<simpara>
        If set, the value of this variable is used as a command which
        will identify all files that may have changed since the
        requested date/time. This information is used to speed up git by
        avoiding unnecessary processing of files that have not changed.
        See the "fsmonitor-watchman" section of <citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.fsmonitorHookVersion
</term>
<listitem>
<simpara>
        Sets the version of hook that is to be used when calling fsmonitor.
        There are currently versions 1 and 2. When this is not set,
        version 2 will be tried first and if it fails then version 1
        will be tried. Version 1 uses a timestamp as input to determine
        which files have changes since that time but some monitors
        like watchman have race conditions when used with a timestamp.
        Version 2 uses an opaque string so that the monitor can return
        something that can be used to determine what files have changed
        without race conditions.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.trustctime
</term>
<listitem>
<simpara>
        If false, the ctime differences between the index and the
        working tree are ignored; useful when the inode change time
        is regularly modified by something outside Git (file system
        crawlers and some backup systems).
        See <citerefentry>
<refentrytitle>git-update-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.splitIndex
</term>
<listitem>
<simpara>
        If true, the split-index feature of the index will be used.
        See <citerefentry>
<refentrytitle>git-update-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.untrackedCache
</term>
<listitem>
<simpara>
        Determines what to do about the untracked cache feature of the
        index. It will be kept, if this variable is unset or set to
        <literal>keep</literal>. It will automatically be added if set to <literal>true</literal>. And
        it will automatically be removed, if set to <literal>false</literal>. Before
        setting it to <literal>true</literal>, you should check that mtime is working
        properly on your system.
        See <citerefentry>
<refentrytitle>git-update-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. <literal>keep</literal> by default, unless
        <literal>feature.manyFiles</literal> is enabled which sets this setting to
        <literal>true</literal> by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.checkStat
</term>
<listitem>
<simpara>
        When missing or is set to <literal>default</literal>, many fields in the stat
        structure are checked to detect if a file has been modified
        since Git looked at it.  When this configuration variable is
        set to <literal>minimal</literal>, sub-second part of mtime and ctime, the
        uid and gid of the owner of the file, the inode number (and
        the device number, if Git was compiled to use it), are
        excluded from the check among these fields, leaving only the
        whole-second part of mtime (and ctime, if <literal>core.trustCtime</literal>
        is set) and the filesize to be checked.
</simpara>
<simpara>There are implementations of Git that do not leave usable values in
some fields (e.g. JGit); by excluding these fields from the
comparison, the <literal>minimal</literal> mode may help interoperability when the
same repository is used by these other systems at the same time.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.quotePath
</term>
<listitem>
<simpara>
        Commands that output paths (e.g. <emphasis>ls-files</emphasis>, <emphasis>diff</emphasis>), will
        quote "unusual" characters in the pathname by enclosing the
        pathname in double-quotes and escaping those characters with
        backslashes in the same way C escapes control characters (e.g.
        <literal>\t</literal> for TAB, <literal>\n</literal> for LF, <literal>\\</literal> for backslash) or bytes with
        values larger than 0x80 (e.g. octal <literal>\302\265</literal> for "micro" in
        UTF-8).  If this variable is set to false, bytes higher than
        0x80 are not considered "unusual" any more. Double-quotes,
        backslash and control characters are always escaped regardless
        of the setting of this variable.  A simple space character is
        not considered "unusual".  Many commands can output pathnames
        completely verbatim using the <literal>-z</literal> option. The default value
        is true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.eol
</term>
<listitem>
<simpara>
        Sets the line ending type to use in the working directory for
        files that are marked as text (either by having the <literal>text</literal>
        attribute set, or by having <literal>text=auto</literal> and Git auto-detecting
        the contents as text).
        Alternatives are <emphasis>lf</emphasis>, <emphasis>crlf</emphasis> and <emphasis>native</emphasis>, which uses the platform&#8217;s
        native line ending.  The default value is <literal>native</literal>.  See
        <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for more information on end-of-line
        conversion. Note that this value is ignored if <literal>core.autocrlf</literal>
        is set to <literal>true</literal> or <literal>input</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.safecrlf
</term>
<listitem>
<simpara>
        If true, makes Git check if converting <literal>CRLF</literal> is reversible when
        end-of-line conversion is active.  Git will verify if a command
        modifies a file in the work tree either directly or indirectly.
        For example, committing a file followed by checking out the
        same file should yield the original file in the work tree.  If
        this is not the case for the current setting of
        <literal>core.autocrlf</literal>, Git will reject the file.  The variable can
        be set to "warn", in which case Git will only warn about an
        irreversible conversion but continue the operation.
</simpara>
<simpara>CRLF conversion bears a slight chance of corrupting data.
When it is enabled, Git will convert CRLF to LF during commit and LF to
CRLF during checkout.  A file that contains a mixture of LF and
CRLF before the commit cannot be recreated by Git.  For text
files this is the right thing to do: it corrects line endings
such that we have only LF line endings in the repository.
But for binary files that are accidentally classified as text the
conversion can corrupt data.</simpara>
<simpara>If you recognize such corruption early you can easily fix it by
setting the conversion type explicitly in .gitattributes.  Right
after committing you still have the original file in your work
tree and this file is not yet corrupted.  You can explicitly tell
Git that this file is binary and Git will handle the file
appropriately.</simpara>
<simpara>Unfortunately, the desired effect of cleaning up text files with
mixed line endings and the undesired effect of corrupting binary
files cannot be distinguished.  In both cases CRLFs are removed
in an irreversible way.  For text files this is the right thing
to do because CRLFs are line endings, while for binary files
converting CRLFs corrupts data.</simpara>
<simpara>Note, this safety check does not mean that a checkout will generate a
file identical to the original file for a different setting of
<literal>core.eol</literal> and <literal>core.autocrlf</literal>, but only for the current one.  For
example, a text file with <literal>LF</literal> would be accepted with <literal>core.eol=lf</literal>
and could later be checked out with <literal>core.eol=crlf</literal>, in which case the
resulting file would contain <literal>CRLF</literal>, although the original file
contained <literal>LF</literal>.  However, in both work trees the line endings would be
consistent, that is either all <literal>LF</literal> or all <literal>CRLF</literal>, but never mixed.  A
file with mixed line endings would be reported by the <literal>core.safecrlf</literal>
mechanism.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.autocrlf
</term>
<listitem>
<simpara>
        Setting this variable to "true" is the same as setting
        the <literal>text</literal> attribute to "auto" on all files and core.eol to "crlf".
        Set to true if you want to have <literal>CRLF</literal> line endings in your
        working directory and the repository has LF line endings.
        This variable can be set to <emphasis>input</emphasis>,
        in which case no output conversion is performed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.checkRoundtripEncoding
</term>
<listitem>
<simpara>
        A comma and/or whitespace separated list of encodings that Git
        performs UTF-8 round trip checks on if they are used in an
        <literal>working-tree-encoding</literal> attribute (see <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>).
        The default value is <literal>SHIFT-JIS</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.symlinks
</term>
<listitem>
<simpara>
        If false, symbolic links are checked out as small plain files that
        contain the link text. <citerefentry>
<refentrytitle>git-update-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and
        <citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> will not change the recorded type to regular
        file. Useful on filesystems like FAT that do not support
        symbolic links.
</simpara>
<simpara>The default is true, except <citerefentry>
<refentrytitle>git-clone</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-init</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
will probe and set core.symlinks false if appropriate when the repository
is created.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.gitProxy
</term>
<listitem>
<simpara>
        A "proxy command" to execute (as <emphasis>command host port</emphasis>) instead
        of establishing direct connection to the remote server when
        using the Git protocol for fetching. If the variable value is
        in the "COMMAND for DOMAIN" format, the command is applied only
        on hostnames ending with the specified domain string. This variable
        may be set multiple times and is matched in the given order;
        the first match wins.
</simpara>
<simpara>Can be overridden by the <literal>GIT_PROXY_COMMAND</literal> environment variable
(which always applies universally, without the special "for"
handling).</simpara>
<simpara>The special string <literal>none</literal> can be used as the proxy command to
specify that no proxy be used for a given domain pattern.
This is useful for excluding servers inside a firewall from
proxy use, while defaulting to a common proxy for external domains.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.sshCommand
</term>
<listitem>
<simpara>
        If this variable is set, <literal>git fetch</literal> and <literal>git push</literal> will
        use the specified command instead of <literal>ssh</literal> when they need to
        connect to a remote system. The command is in the same form as
        the <literal>GIT_SSH_COMMAND</literal> environment variable and is overridden
        when the environment variable is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.ignoreStat
</term>
<listitem>
<simpara>
        If true, Git will avoid using lstat() calls to detect if files have
        changed by setting the "assume-unchanged" bit for those tracked files
        which it has updated identically in both the index and working tree.
</simpara>
<simpara>When files are modified outside of Git, the user will need to stage
the modified files explicitly (e.g. see <emphasis>Examples</emphasis> section in
<citerefentry>
<refentrytitle>git-update-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>).
Git will not normally detect changes to those files.</simpara>
<simpara>This is useful on systems where lstat() calls are very slow, such as
CIFS/Microsoft Windows.</simpara>
<simpara>False by default.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.preferSymlinkRefs
</term>
<listitem>
<simpara>
        Instead of the default "symref" format for HEAD
        and other symbolic reference files, use symbolic links.
        This is sometimes needed to work with old scripts that
        expect HEAD to be a symbolic link.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.alternateRefsCommand
</term>
<listitem>
<simpara>
        When advertising tips of available history from an alternate, use the shell to
        execute the specified command instead of <citerefentry>
<refentrytitle>git-for-each-ref</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. The
        first argument is the absolute path of the alternate. Output must contain one
        hex object id per line (i.e., the same as produced by <literal>git for-each-ref
        --format='%(objectname)'</literal>).
</simpara>
<simpara>Note that you cannot generally put <literal>git for-each-ref</literal> directly into the config
value, as it does not take a repository path as an argument (but you can wrap
the command above in a shell script).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.alternateRefsPrefixes
</term>
<listitem>
<simpara>
        When listing references from an alternate, list only references that begin
        with the given prefix. Prefixes match as if they were given as arguments to
        <citerefentry>
<refentrytitle>git-for-each-ref</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. To list multiple prefixes, separate them with
        whitespace. If <literal>core.alternateRefsCommand</literal> is set, setting
        <literal>core.alternateRefsPrefixes</literal> has no effect.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.bare
</term>
<listitem>
<simpara>
        If true this repository is assumed to be <emphasis>bare</emphasis> and has no
        working directory associated with it.  If this is the case a
        number of commands that require a working directory will be
        disabled, such as <citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-merge</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
<simpara>This setting is automatically guessed by <citerefentry>
<refentrytitle>git-clone</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or
<citerefentry>
<refentrytitle>git-init</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> when the repository was created.  By default a
repository that ends in "/.git" is assumed to be not bare (bare =
false), while all other repositories are assumed to be bare (bare
= true).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.worktree
</term>
<listitem>
<simpara>
        Set the path to the root of the working tree.
        If <literal>GIT_COMMON_DIR</literal> environment variable is set, core.worktree
        is ignored and not used for determining the root of working tree.
        This can be overridden by the <literal>GIT_WORK_TREE</literal> environment
        variable and the <literal>--work-tree</literal> command-line option.
        The value can be an absolute path or relative to the path to
        the .git directory, which is either specified by --git-dir
        or GIT_DIR, or automatically discovered.
        If --git-dir or GIT_DIR is specified but none of
        --work-tree, GIT_WORK_TREE and core.worktree is specified,
        the current working directory is regarded as the top level
        of your working tree.
</simpara>
<simpara>Note that this variable is honored even when set in a configuration
file in a ".git" subdirectory of a directory and its value differs
from the latter directory (e.g. "/path/to/.git/config" has
core.worktree set to "/different/path"), which is most likely a
misconfiguration.  Running Git commands in the "/path/to" directory will
still use "/different/path" as the root of the work tree and can cause
confusion unless you know what you are doing (e.g. you are creating a
read-only snapshot of the same index to a location different from the
repository&#8217;s usual working tree).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.logAllRefUpdates
</term>
<listitem>
<simpara>
        Enable the reflog. Updates to a ref &lt;ref&gt; is logged to the file
        "<literal>$GIT_DIR/logs/&lt;ref&gt;</literal>", by appending the new and old
        SHA-1, the date/time and the reason of the update, but
        only when the file exists.  If this configuration
        variable is set to <literal>true</literal>, missing "<literal>$GIT_DIR/logs/&lt;ref&gt;</literal>"
        file is automatically created for branch heads (i.e. under
        <literal>refs/heads/</literal>), remote refs (i.e. under <literal>refs/remotes/</literal>),
        note refs (i.e. under <literal>refs/notes/</literal>), and the symbolic ref <literal>HEAD</literal>.
        If it is set to <literal>always</literal>, then a missing reflog is automatically
        created for any ref under <literal>refs/</literal>.
</simpara>
<simpara>This information can be used to determine what commit
was the tip of a branch "2 days ago".</simpara>
<simpara>This value is true by default in a repository that has
a working directory associated with it, and false by
default in a bare repository.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.repositoryFormatVersion
</term>
<listitem>
<simpara>
        Internal variable identifying the repository format and layout
        version.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.sharedRepository
</term>
<listitem>
<simpara>
        When <emphasis>group</emphasis> (or <emphasis>true</emphasis>), the repository is made shareable between
        several users in a group (making sure all the files and objects are
        group-writable). When <emphasis>all</emphasis> (or <emphasis>world</emphasis> or <emphasis>everybody</emphasis>), the
        repository will be readable by all users, additionally to being
        group-shareable. When <emphasis>umask</emphasis> (or <emphasis>false</emphasis>), Git will use permissions
        reported by umask(2). When <emphasis>0xxx</emphasis>, where <emphasis>0xxx</emphasis> is an octal number,
        files in the repository will have this mode value. <emphasis>0xxx</emphasis> will override
        user&#8217;s umask value (whereas the other options will only override
        requested parts of the user&#8217;s umask value). Examples: <emphasis>0660</emphasis> will make
        the repo read/write-able for the owner and group, but inaccessible to
        others (equivalent to <emphasis>group</emphasis> unless umask is e.g. <emphasis>0022</emphasis>). <emphasis>0640</emphasis> is a
        repository that is group-readable but not group-writable.
        See <citerefentry>
<refentrytitle>git-init</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.warnAmbiguousRefs
</term>
<listitem>
<simpara>
        If true, Git will warn you if the ref name you passed it is ambiguous
        and might match multiple refs in the repository. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.compression
</term>
<listitem>
<simpara>
        An integer -1..9, indicating a default compression level.
        -1 is the zlib default. 0 means no compression,
        and 1..9 are various speed/size tradeoffs, 9 being slowest.
        If set, this provides a default to other compression variables,
        such as <literal>core.looseCompression</literal> and <literal>pack.compression</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.looseCompression
</term>
<listitem>
<simpara>
        An integer -1..9, indicating the compression level for objects that
        are not in a pack file. -1 is the zlib default. 0 means no
        compression, and 1..9 are various speed/size tradeoffs, 9 being
        slowest.  If not set,  defaults to core.compression.  If that is
        not set,  defaults to 1 (best speed).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.packedGitWindowSize
</term>
<listitem>
<simpara>
        Number of bytes of a pack file to map into memory in a
        single mapping operation.  Larger window sizes may allow
        your system to process a smaller number of large pack files
        more quickly.  Smaller window sizes will negatively affect
        performance due to increased calls to the operating system&#8217;s
        memory manager, but may improve performance when accessing
        a large number of large pack files.
</simpara>
<simpara>Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32
MiB on 32 bit platforms and 1 GiB on 64 bit platforms.  This should
be reasonable for all users/operating systems.  You probably do
not need to adjust this value.</simpara>
<simpara>Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.packedGitLimit
</term>
<listitem>
<simpara>
        Maximum number of bytes to map simultaneously into memory
        from pack files.  If Git needs to access more than this many
        bytes at once to complete an operation it will unmap existing
        regions to reclaim virtual address space within the process.
</simpara>
<simpara>Default is 256 MiB on 32 bit platforms and 32 TiB (effectively
unlimited) on 64 bit platforms.
This should be reasonable for all users/operating systems, except on
the largest projects.  You probably do not need to adjust this value.</simpara>
<simpara>Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.deltaBaseCacheLimit
</term>
<listitem>
<simpara>
        Maximum number of bytes per thread to reserve for caching base objects
        that may be referenced by multiple deltified objects.  By storing the
        entire decompressed base objects in a cache Git is able
        to avoid unpacking and decompressing frequently used base
        objects multiple times.
</simpara>
<simpara>Default is 96 MiB on all platforms.  This should be reasonable
for all users/operating systems, except on the largest projects.
You probably do not need to adjust this value.</simpara>
<simpara>Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.bigFileThreshold
</term>
<listitem>
<simpara>
        Files larger than this size are stored deflated, without
        attempting delta compression.  Storing large files without
        delta compression avoids excessive memory usage, at the
        slight expense of increased disk usage. Additionally files
        larger than this size are always treated as binary.
</simpara>
<simpara>Default is 512 MiB on all platforms.  This should be reasonable
for most projects as source code and other text files can still
be delta compressed, but larger binary media files won&#8217;t be.</simpara>
<simpara>Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.excludesFile
</term>
<listitem>
<simpara>
        Specifies the pathname to the file that contains patterns to
        describe paths that are not meant to be tracked, in addition
        to <literal>.gitignore</literal> (per-directory) and <literal>.git/info/exclude</literal>.
        Defaults to <literal>$XDG_CONFIG_HOME/git/ignore</literal>.
        If <literal>$XDG_CONFIG_HOME</literal> is either not set or empty, <literal>$HOME/.config/git/ignore</literal>
        is used instead. See <citerefentry>
<refentrytitle>gitignore</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.askPass
</term>
<listitem>
<simpara>
        Some commands (e.g. svn and http interfaces) that interactively
        ask for a password can be told to use an external program given
        via the value of this variable. Can be overridden by the <literal>GIT_ASKPASS</literal>
        environment variable. If not set, fall back to the value of the
        <literal>SSH_ASKPASS</literal> environment variable or, failing that, a simple password
        prompt. The external program shall be given a suitable prompt as
        command-line argument and write the password on its STDOUT.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.attributesFile
</term>
<listitem>
<simpara>
        In addition to <literal>.gitattributes</literal> (per-directory) and
        <literal>.git/info/attributes</literal>, Git looks into this file for attributes
        (see <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>). Path expansions are made the same
        way as for <literal>core.excludesFile</literal>. Its default value is
        <literal>$XDG_CONFIG_HOME/git/attributes</literal>. If <literal>$XDG_CONFIG_HOME</literal> is either not
        set or empty, <literal>$HOME/.config/git/attributes</literal> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.hooksPath
</term>
<listitem>
<simpara>
        By default Git will look for your hooks in the
        <literal>$GIT_DIR/hooks</literal> directory. Set this to different path,
        e.g. <literal>/etc/git/hooks</literal>, and Git will try to find your hooks in
        that directory, e.g. <literal>/etc/git/hooks/pre-receive</literal> instead of
        in <literal>$GIT_DIR/hooks/pre-receive</literal>.
</simpara>
<simpara>The path can be either absolute or relative. A relative path is
taken as relative to the directory where the hooks are run (see
the "DESCRIPTION" section of <citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>).</simpara>
<simpara>This configuration variable is useful in cases where you&#8217;d like to
centrally configure your Git hooks instead of configuring them on a
per-repository basis, or as a more flexible and centralized
alternative to having an <literal>init.templateDir</literal> where you&#8217;ve changed
default hooks.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.editor
</term>
<listitem>
<simpara>
        Commands such as <literal>commit</literal> and <literal>tag</literal> that let you edit
        messages by launching an editor use the value of this
        variable when it is set, and the environment variable
        <literal>GIT_EDITOR</literal> is not set.  See <citerefentry>
<refentrytitle>git-var</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.commentChar
</term>
<listitem>
<simpara>
        Commands such as <literal>commit</literal> and <literal>tag</literal> that let you edit
        messages consider a line that begins with this character
        commented, and removes them after the editor returns
        (default <emphasis>#</emphasis>).
</simpara>
<simpara>If set to "auto", <literal>git-commit</literal> would select a character that is not
the beginning character of any line in existing commit messages.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.filesRefLockTimeout
</term>
<listitem>
<simpara>
        The length of time, in milliseconds, to retry when trying to
        lock an individual reference. Value 0 means not to retry at
        all; -1 means to try indefinitely. Default is 100 (i.e.,
        retry for 100ms).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.packedRefsTimeout
</term>
<listitem>
<simpara>
        The length of time, in milliseconds, to retry when trying to
        lock the <literal>packed-refs</literal> file. Value 0 means not to retry at
        all; -1 means to try indefinitely. Default is 1000 (i.e.,
        retry for 1 second).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.pager
</term>
<listitem>
<simpara>
        Text viewer for use by Git commands (e.g., <emphasis>less</emphasis>).  The value
        is meant to be interpreted by the shell.  The order of preference
        is the <literal>$GIT_PAGER</literal> environment variable, then <literal>core.pager</literal>
        configuration, then <literal>$PAGER</literal>, and then the default chosen at
        compile time (usually <emphasis>less</emphasis>).
</simpara>
<simpara>When the <literal>LESS</literal> environment variable is unset, Git sets it to <literal>FRX</literal>
(if <literal>LESS</literal> environment variable is set, Git does not change it at
all).  If you want to selectively override Git&#8217;s default setting
for <literal>LESS</literal>, you can set <literal>core.pager</literal> to e.g. <literal>less -S</literal>.  This will
be passed to the shell by Git, which will translate the final
command to <literal>LESS=FRX less -S</literal>. The environment does not set the
<literal>S</literal> option but the command line does, instructing less to truncate
long lines. Similarly, setting <literal>core.pager</literal> to <literal>less -+F</literal> will
deactivate the <literal>F</literal> option specified by the environment from the
command-line, deactivating the "quit if one screen" behavior of
<literal>less</literal>.  One can specifically activate some flags for particular
commands: for example, setting <literal>pager.blame</literal> to <literal>less -S</literal> enables
line truncation only for <literal>git blame</literal>.</simpara>
<simpara>Likewise, when the <literal>LV</literal> environment variable is unset, Git sets it
to <literal>-c</literal>.  You can override this setting by exporting <literal>LV</literal> with
another value or setting <literal>core.pager</literal> to <literal>lv +c</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.whitespace
</term>
<listitem>
<simpara>
        A comma separated list of common whitespace problems to
        notice.  <emphasis>git diff</emphasis> will use <literal>color.diff.whitespace</literal> to
        highlight them, and <emphasis>git apply --whitespace=error</emphasis> will
        consider them as errors.  You can prefix <literal>-</literal> to disable
        any of them (e.g. <literal>-trailing-space</literal>):
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>blank-at-eol</literal> treats trailing whitespaces at the end of the line
  as an error (enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>space-before-tab</literal> treats a space character that appears immediately
  before a tab character in the initial indent part of the line as an
  error (enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>indent-with-non-tab</literal> treats a line that is indented with space
  characters instead of the equivalent tabs as an error (not enabled by
  default).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>tab-in-indent</literal> treats a tab character in the initial indent part of
  the line as an error (not enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>blank-at-eof</literal> treats blank lines added at the end of file as an error
  (enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>trailing-space</literal> is a short-hand to cover both <literal>blank-at-eol</literal> and
  <literal>blank-at-eof</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>cr-at-eol</literal> treats a carriage-return at the end of line as
  part of the line terminator, i.e. with it, <literal>trailing-space</literal>
  does not trigger if the character before such a carriage-return
  is not a whitespace (not enabled by default).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>tabwidth=&lt;n&gt;</literal> tells how many character positions a tab occupies; this
  is relevant for <literal>indent-with-non-tab</literal> and when Git fixes <literal>tab-in-indent</literal>
  errors. The default tab width is 8. Allowed values are 1 to 63.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.fsyncObjectFiles
</term>
<listitem>
<simpara>
        This boolean will enable <emphasis>fsync()</emphasis> when writing object files.
</simpara>
<simpara>This is a total waste of time and effort on a filesystem that orders
data writes properly, but can be useful for filesystems that do not use
journalling (traditional UNIX filesystems) or that only journal metadata
and not file contents (OS X&#8217;s HFS+, or Linux ext3 with "data=writeback").</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.preloadIndex
</term>
<listitem>
<simpara>
        Enable parallel index preload for operations like <emphasis>git diff</emphasis>
</simpara>
<simpara>This can speed up operations like <emphasis>git diff</emphasis> and <emphasis>git status</emphasis> especially
on filesystems like NFS that have weak caching semantics and thus
relatively high IO latencies.  When enabled, Git will do the
index comparison to the filesystem data in parallel, allowing
overlapping IO&#8217;s.  Defaults to true.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.unsetenvvars
</term>
<listitem>
<simpara>
        Windows-only: comma-separated list of environment variables'
        names that need to be unset before spawning any other process.
        Defaults to <literal>PERL5LIB</literal> to account for the fact that Git for
        Windows insists on using its own Perl interpreter.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.restrictinheritedhandles
</term>
<listitem>
<simpara>
        Windows-only: override whether spawned processes inherit only standard
        file handles (<literal>stdin</literal>, <literal>stdout</literal> and <literal>stderr</literal>) or all handles. Can be
        <literal>auto</literal>, <literal>true</literal> or <literal>false</literal>. Defaults to <literal>auto</literal>, which means <literal>true</literal> on
        Windows 7 and later, and <literal>false</literal> on older Windows versions.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.createObject
</term>
<listitem>
<simpara>
        You can set this to <emphasis>link</emphasis>, in which case a hardlink followed by
        a delete of the source are used to make sure that object creation
        will not overwrite existing objects.
</simpara>
<simpara>On some file system/operating system combinations, this is unreliable.
Set this config setting to <emphasis>rename</emphasis> there; However, This will remove the
check that makes sure that existing object files will not get overwritten.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.notesRef
</term>
<listitem>
<simpara>
        When showing commit messages, also show notes which are stored in
        the given ref.  The ref must be fully qualified.  If the given
        ref does not exist, it is not an error but means that no
        notes should be printed.
</simpara>
<simpara>This setting defaults to "refs/notes/commits", and it can be overridden by
the <literal>GIT_NOTES_REF</literal> environment variable.  See <citerefentry>
<refentrytitle>git-notes</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.commitGraph
</term>
<listitem>
<simpara>
        If true, then git will read the commit-graph file (if it exists)
        to parse the graph structure of commits. Defaults to true. See
        <citerefentry>
<refentrytitle>git-commit-graph</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.useReplaceRefs
</term>
<listitem>
<simpara>
        If set to <literal>false</literal>, behave as if the <literal>--no-replace-objects</literal>
        option was given on the command line. See <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and
        <citerefentry>
<refentrytitle>git-replace</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.multiPackIndex
</term>
<listitem>
<simpara>
        Use the multi-pack-index file to track multiple packfiles using a
        single index. See <citerefentry>
<refentrytitle>git-multi-pack-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more
        information. Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.sparseCheckout
</term>
<listitem>
<simpara>
        Enable "sparse checkout" feature. See <citerefentry>
<refentrytitle>git-sparse-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.sparseCheckoutCone
</term>
<listitem>
<simpara>
        Enables the "cone mode" of the sparse checkout feature. When the
        sparse-checkout file contains a limited set of patterns, then this
        mode provides significant performance advantages. See
        <citerefentry>
<refentrytitle>git-sparse-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
core.abbrev
</term>
<listitem>
<simpara>
        Set the length object names are abbreviated to.  If
        unspecified or set to "auto", an appropriate value is
        computed based on the approximate number of packed objects
        in your repository, which hopefully is enough for
        abbreviated object names to stay unique for some time.
        If set to "no", no abbreviation is made and the object names
        are shown in their full length.
        The minimum length is 4.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
add.ignoreErrors
</term>
<term>
add.ignore-errors (deprecated)
</term>
<listitem>
<simpara>
        Tells <emphasis>git add</emphasis> to continue adding files when some files cannot be
        added due to indexing errors. Equivalent to the <literal>--ignore-errors</literal>
        option of <citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.  <literal>add.ignore-errors</literal> is deprecated,
        as it does not follow the usual naming convention for configuration
        variables.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
add.interactive.useBuiltin
</term>
<listitem>
<simpara>
        [EXPERIMENTAL] Set to <literal>true</literal> to use the experimental built-in
        implementation of the interactive version of <citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        instead of the Perl script version. Is <literal>false</literal> by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
alias.*
</term>
<listitem>
<simpara>
        Command aliases for the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> command wrapper - e.g.
        after defining <literal>alias.last = cat-file commit HEAD</literal>, the invocation
        <literal>git last</literal> is equivalent to <literal>git cat-file commit HEAD</literal>. To avoid
        confusion and troubles with script usage, aliases that
        hide existing Git commands are ignored. Arguments are split by
        spaces, the usual shell quoting and escaping is supported.
        A quote pair or a backslash can be used to quote them.
</simpara>
<simpara>Note that the first word of an alias does not necessarily have to be a
command. It can be a command-line option that will be passed into the
invocation of <literal>git</literal>. In particular, this is useful when used with <literal>-c</literal>
to pass in one-time configurations or <literal>-p</literal> to force pagination. For example,
<literal>loud-rebase = -c commit.verbose=true rebase</literal> can be defined such that
running <literal>git loud-rebase</literal> would be equivalent to
<literal>git -c commit.verbose=true rebase</literal>. Also, <literal>ps = -p status</literal> would be a
helpful alias since <literal>git ps</literal> would paginate the output of <literal>git status</literal>
where the original command does not.</simpara>
<simpara>If the alias expansion is prefixed with an exclamation point,
it will be treated as a shell command.  For example, defining
<literal>alias.new = !gitk --all --not ORIG_HEAD</literal>, the invocation
<literal>git new</literal> is equivalent to running the shell command
<literal>gitk --all --not ORIG_HEAD</literal>.  Note that shell commands will be
executed from the top-level directory of a repository, which may
not necessarily be the current directory.
<literal>GIT_PREFIX</literal> is set as returned by running <literal>git rev-parse --show-prefix</literal>
from the original current directory. See <citerefentry>
<refentrytitle>git-rev-parse</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
am.keepcr
</term>
<listitem>
<simpara>
        If true, git-am will call git-mailsplit for patches in mbox format
        with parameter <literal>--keep-cr</literal>. In this case git-mailsplit will
        not remove <literal>\r</literal> from lines ending with <literal>\r\n</literal>. Can be overridden
        by giving <literal>--no-keep-cr</literal> from the command line.
        See <citerefentry>
<refentrytitle>git-am</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-mailsplit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
am.threeWay
</term>
<listitem>
<simpara>
        By default, <literal>git am</literal> will fail if the patch does not apply cleanly. When
        set to true, this setting tells <literal>git am</literal> to fall back on 3-way merge if
        the patch records the identity of blobs it is supposed to apply to and
        we have those blobs available locally (equivalent to giving the <literal>--3way</literal>
        option from the command line). Defaults to <literal>false</literal>.
        See <citerefentry>
<refentrytitle>git-am</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
apply.ignoreWhitespace
</term>
<listitem>
<simpara>
        When set to <emphasis>change</emphasis>, tells <emphasis>git apply</emphasis> to ignore changes in
        whitespace, in the same way as the <literal>--ignore-space-change</literal>
        option.
        When set to one of: no, none, never, false tells <emphasis>git apply</emphasis> to
        respect all whitespace differences.
        See <citerefentry>
<refentrytitle>git-apply</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
apply.whitespace
</term>
<listitem>
<simpara>
        Tells <emphasis>git apply</emphasis> how to handle whitespaces, in the same way
        as the <literal>--whitespace</literal> option. See <citerefentry>
<refentrytitle>git-apply</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.blankBoundary
</term>
<listitem>
<simpara>
        Show blank commit object name for boundary commits in
        <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. This option defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.coloring
</term>
<listitem>
<simpara>
        This determines the coloring scheme to be applied to blame
        output. It can be <emphasis>repeatedLines</emphasis>, <emphasis>highlightRecent</emphasis>,
        or <emphasis>none</emphasis> which is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.date
</term>
<listitem>
<simpara>
        Specifies the format used to output dates in <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        If unset the iso format is used. For supported values,
        see the discussion of the <literal>--date</literal> option at <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.showEmail
</term>
<listitem>
<simpara>
        Show the author email instead of author name in <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        This option defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.showRoot
</term>
<listitem>
<simpara>
        Do not treat root commits as boundaries in <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        This option defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.ignoreRevsFile
</term>
<listitem>
<simpara>
        Ignore revisions listed in the file, one unabbreviated object name per
        line, in <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.  Whitespace and comments beginning with
        <literal>#</literal> are ignored.  This option may be repeated multiple times.  Empty
        file names will reset the list of ignored revisions.  This option will
        be handled before the command line option <literal>--ignore-revs-file</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.markUnblamableLines
</term>
<listitem>
<simpara>
        Mark lines that were changed by an ignored revision that we could not
        attribute to another commit with a <emphasis>*</emphasis> in the output of
        <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
blame.markIgnoredLines
</term>
<listitem>
<simpara>
        Mark lines that were changed by an ignored revision that we attributed to
        another commit with a <emphasis>?</emphasis> in the output of <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.autoSetupMerge
</term>
<listitem>
<simpara>
        Tells <emphasis>git branch</emphasis>, <emphasis>git switch</emphasis> and <emphasis>git checkout</emphasis> to set up new branches
        so that <citerefentry>
<refentrytitle>git-pull</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> will appropriately merge from the
        starting point branch. Note that even if this option is not set,
        this behavior can be chosen per-branch using the <literal>--track</literal>
        and <literal>--no-track</literal> options. The valid settings are: <literal>false</literal>&#8201;&#8212;&#8201;no
        automatic setup is done; <literal>true</literal>&#8201;&#8212;&#8201;automatic setup is done when the
        starting point is a remote-tracking branch; <literal>always</literal>&#8201;&#8212;&#8201;        automatic setup is done when the starting point is either a
        local branch or remote-tracking
        branch. This option defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.autoSetupRebase
</term>
<listitem>
<simpara>
        When a new branch is created with <emphasis>git branch</emphasis>, <emphasis>git switch</emphasis> or <emphasis>git checkout</emphasis>
        that tracks another branch, this variable tells Git to set
        up pull to rebase instead of merge (see "branch.&lt;name&gt;.rebase").
        When <literal>never</literal>, rebase is never automatically set to true.
        When <literal>local</literal>, rebase is set to true for tracked branches of
        other local branches.
        When <literal>remote</literal>, rebase is set to true for tracked branches of
        remote-tracking branches.
        When <literal>always</literal>, rebase will be set to true for all tracking
        branches.
        See "branch.autoSetupMerge" for details on how to set up a
        branch to track another branch.
        This option defaults to never.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.sort
</term>
<listitem>
<simpara>
        This variable controls the sort ordering of branches when displayed by
        <citerefentry>
<refentrytitle>git-branch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. Without the "--sort=&lt;value&gt;" option provided, the
        value of this variable will be used as the default.
        See <citerefentry>
<refentrytitle>git-for-each-ref</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> field names for valid values.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.remote
</term>
<listitem>
<simpara>
        When on branch &lt;name&gt;, it tells <emphasis>git fetch</emphasis> and <emphasis>git push</emphasis>
        which remote to fetch from/push to.  The remote to push to
        may be overridden with <literal>remote.pushDefault</literal> (for all branches).
        The remote to push to, for the current branch, may be further
        overridden by <literal>branch.&lt;name&gt;.pushRemote</literal>.  If no remote is
        configured, or if you are not on any branch, it defaults to
        <literal>origin</literal> for fetching and <literal>remote.pushDefault</literal> for pushing.
        Additionally, <literal>.</literal> (a period) is the current local repository
        (a dot-repository), see <literal>branch.&lt;name&gt;.merge</literal>'s final note below.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.pushRemote
</term>
<listitem>
<simpara>
        When on branch &lt;name&gt;, it overrides <literal>branch.&lt;name&gt;.remote</literal> for
        pushing.  It also overrides <literal>remote.pushDefault</literal> for pushing
        from branch &lt;name&gt;.  When you pull from one place (e.g. your
        upstream) and push to another place (e.g. your own publishing
        repository), you would want to set <literal>remote.pushDefault</literal> to
        specify the remote to push to for all branches, and use this
        option to override it for a specific branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.merge
</term>
<listitem>
<simpara>
        Defines, together with branch.&lt;name&gt;.remote, the upstream branch
        for the given branch. It tells <emphasis>git fetch</emphasis>/<emphasis>git pull</emphasis>/<emphasis>git rebase</emphasis> which
        branch to merge and can also affect <emphasis>git push</emphasis> (see push.default).
        When in branch &lt;name&gt;, it tells <emphasis>git fetch</emphasis> the default
        refspec to be marked for merging in FETCH_HEAD. The value is
        handled like the remote part of a refspec, and must match a
        ref which is fetched from the remote given by
        "branch.&lt;name&gt;.remote".
        The merge information is used by <emphasis>git pull</emphasis> (which at first calls
        <emphasis>git fetch</emphasis>) to lookup the default branch for merging. Without
        this option, <emphasis>git pull</emphasis> defaults to merge the first refspec fetched.
        Specify multiple values to get an octopus merge.
        If you wish to setup <emphasis>git pull</emphasis> so that it merges into &lt;name&gt; from
        another branch in the local repository, you can point
        branch.&lt;name&gt;.merge to the desired branch, and use the relative path
        setting <literal>.</literal> (a period) for branch.&lt;name&gt;.remote.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.mergeOptions
</term>
<listitem>
<simpara>
        Sets default options for merging into branch &lt;name&gt;. The syntax and
        supported options are the same as those of <citerefentry>
<refentrytitle>git-merge</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, but
        option values containing whitespace characters are currently not
        supported.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.rebase
</term>
<listitem>
<simpara>
        When true, rebase the branch &lt;name&gt; on top of the fetched branch,
        instead of merging the default branch from the default remote when
        "git pull" is run. See "pull.rebase" for doing this in a non
        branch-specific manner.
</simpara>
<simpara>When <literal>merges</literal> (or just <emphasis>m</emphasis>), pass the <literal>--rebase-merges</literal> option to <emphasis>git rebase</emphasis>
so that the local merge commits are included in the rebase (see
<citerefentry>
<refentrytitle>git-rebase</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details).</simpara>
<simpara>When the value is <literal>interactive</literal> (or just <emphasis>i</emphasis>), the rebase is run in interactive
mode.</simpara>
<simpara><emphasis role="strong">NOTE</emphasis>: this is a possibly dangerous operation; do <emphasis role="strong">not</emphasis> use
it unless you understand the implications (see <citerefentry>
<refentrytitle>git-rebase</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
for details).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branch.&lt;name&gt;.description
</term>
<listitem>
<simpara>
        Branch description, can be edited with
        <literal>git branch --edit-description</literal>. Branch description is
        automatically added in the format-patch cover letter or
        request-pull summary.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
browser.&lt;tool&gt;.cmd
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified browser. The
        specified command is evaluated in shell with the URLs passed
        as arguments. (See <citerefentry>
<refentrytitle>git-web&#45;&#45;browse</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
browser.&lt;tool&gt;.path
</term>
<listitem>
<simpara>
        Override the path for the given tool that may be used to
        browse HTML help (see <literal>-w</literal> option in <citerefentry>
<refentrytitle>git-help</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>) or a
        working repository in gitweb (see <citerefentry>
<refentrytitle>git-instaweb</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
checkout.defaultRemote
</term>
<listitem>
<simpara>
        When you run <literal>git checkout &lt;something&gt;</literal>
        or <literal>git switch &lt;something&gt;</literal> and only have one
        remote, it may implicitly fall back on checking out and
        tracking e.g. <literal>origin/&lt;something&gt;</literal>. This stops working as soon
        as you have more than one remote with a <literal>&lt;something&gt;</literal>
        reference. This setting allows for setting the name of a
        preferred remote that should always win when it comes to
        disambiguation. The typical use-case is to set this to
        <literal>origin</literal>.
</simpara>
<simpara>Currently this is used by <citerefentry>
<refentrytitle>git-switch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and
<citerefentry>
<refentrytitle>git-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> when <literal>git checkout &lt;something&gt;</literal>
or <literal>git switch &lt;something&gt;</literal>
will checkout the <literal>&lt;something&gt;</literal> branch on another remote,
and by <citerefentry>
<refentrytitle>git-worktree</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> when <literal>git worktree add</literal> refers to a
remote branch. This setting might be used for other checkout-like
commands or functionality in the future.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
checkout.guess
</term>
<listitem>
<simpara>
        Provides the default value for the <literal>--guess</literal> or <literal>--no-guess</literal>
        option in <literal>git checkout</literal> and <literal>git switch</literal>. See
        <citerefentry>
<refentrytitle>git-switch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <citerefentry>
<refentrytitle>git-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
checkout.workers
</term>
<listitem>
<simpara>
        The number of parallel workers to use when updating the working tree.
        The default is one, i.e. sequential execution. If set to a value less
        than one, Git will use as many workers as the number of logical cores
        available. This setting and <literal>checkout.thresholdForParallelism</literal> affect
        all commands that perform checkout. E.g. checkout, clone, reset,
        sparse-checkout, etc.
</simpara>
<simpara>Note: parallel checkout usually delivers better performance for repositories
located on SSDs or over NFS. For repositories on spinning disks and/or machines
with a small number of cores, the default sequential checkout often performs
better. The size and compression level of a repository might also influence how
well the parallel version performs.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
checkout.thresholdForParallelism
</term>
<listitem>
<simpara>
        When running parallel checkout with a small number of files, the cost
        of subprocess spawning and inter-process communication might outweigh
        the parallelization gains. This setting allows to define the minimum
        number of files for which parallel checkout should be attempted. The
        default is 100.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
clean.requireForce
</term>
<listitem>
<simpara>
        A boolean to make git-clean do nothing unless given -f,
        -i or -n.   Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
clone.defaultRemoteName
</term>
<listitem>
<simpara>
        The name of the remote to create when cloning a repository.  Defaults to
        <literal>origin</literal>, and can be overridden by passing the <literal>--origin</literal> command-line
        option to <citerefentry>
<refentrytitle>git-clone</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
clone.rejectShallow
</term>
<listitem>
<simpara>
        Reject to clone a repository if it is a shallow one, can be overridden by
        passing option <literal>--reject-shallow</literal> in command line. See <citerefentry>
<refentrytitle>git-clone</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.advice
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in hints (e.g. when a push
        failed, see <literal>advice.*</literal> for a list).  May be set to <literal>always</literal>,
        <literal>false</literal> (or <literal>never</literal>) or <literal>auto</literal> (or <literal>true</literal>), in which case colors
        are used only when the error output goes to a terminal. If
        unset, then the value of <literal>color.ui</literal> is used (<literal>auto</literal> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.advice.hint
</term>
<listitem>
<simpara>
        Use customized color for hints.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.blame.highlightRecent
</term>
<listitem>
<simpara>
        Specify the line annotation color for <literal>git blame --color-by-age</literal>
        depending upon the age of the line.
</simpara>
<simpara>This setting should be set to a comma-separated list of color and
date settings, starting and ending with a color, the dates should be
set from oldest to newest. The metadata will be colored with the
specified colors if the line was introduced before the given
timestamp, overwriting older timestamped colors.</simpara>
<simpara>Instead of an absolute timestamp relative timestamps work as well,
e.g. <literal>2.weeks.ago</literal> is valid to address anything older than 2 weeks.</simpara>
<simpara>It defaults to <literal>blue,12 month ago,white,1 month ago,red</literal>, which
colors everything older than one year blue, recent changes between
one month and one year old are kept white, and lines introduced
within the last month are colored red.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.blame.repeatedLines
</term>
<listitem>
<simpara>
        Use the specified color to colorize line annotations for
        <literal>git blame --color-lines</literal>, if they come from the same commit as the
        preceding line. Defaults to cyan.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.branch
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in the output of
        <citerefentry>
<refentrytitle>git-branch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. May be set to <literal>always</literal>,
        <literal>false</literal> (or <literal>never</literal>) or <literal>auto</literal> (or <literal>true</literal>), in which case colors are used
        only when the output is to a terminal. If unset, then the
        value of <literal>color.ui</literal> is used (<literal>auto</literal> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.branch.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for branch coloration. <literal>&lt;slot&gt;</literal> is one of
        <literal>current</literal> (the current branch), <literal>local</literal> (a local branch),
        <literal>remote</literal> (a remote-tracking branch in refs/remotes/),
        <literal>upstream</literal> (upstream tracking branch), <literal>plain</literal> (other
        refs).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.diff
</term>
<listitem>
<simpara>
        Whether to use ANSI escape sequences to add color to patches.
        If this is set to <literal>always</literal>, <citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
        <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, and <citerefentry>
<refentrytitle>git-show</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> will use color
        for all patches.  If it is set to <literal>true</literal> or <literal>auto</literal>, those
        commands will only use color when output is to the terminal.
        If unset, then the value of <literal>color.ui</literal> is used (<literal>auto</literal> by
        default).
</simpara>
<simpara>This does not affect <citerefentry>
<refentrytitle>git-format-patch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or the
<emphasis>git-diff-&#42;</emphasis> plumbing commands.  Can be overridden on the
command line with the <literal>--color[=&lt;when&gt;]</literal> option.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.diff.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for diff colorization.  <literal>&lt;slot&gt;</literal> specifies
        which part of the patch to use the specified color, and is one
        of <literal>context</literal> (context text - <literal>plain</literal> is a historical synonym),
        <literal>meta</literal> (metainformation), <literal>frag</literal>
        (hunk header), <emphasis>func</emphasis> (function in hunk header), <literal>old</literal> (removed lines),
        <literal>new</literal> (added lines), <literal>commit</literal> (commit headers), <literal>whitespace</literal>
        (highlighting whitespace errors), <literal>oldMoved</literal> (deleted lines),
        <literal>newMoved</literal> (added lines), <literal>oldMovedDimmed</literal>, <literal>oldMovedAlternative</literal>,
        <literal>oldMovedAlternativeDimmed</literal>, <literal>newMovedDimmed</literal>, <literal>newMovedAlternative</literal>
        <literal>newMovedAlternativeDimmed</literal> (See the <emphasis>&lt;mode&gt;</emphasis>
        setting of <emphasis>--color-moved</emphasis> in <citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details),
        <literal>contextDimmed</literal>, <literal>oldDimmed</literal>, <literal>newDimmed</literal>, <literal>contextBold</literal>,
        <literal>oldBold</literal>, and <literal>newBold</literal> (see <citerefentry>
<refentrytitle>git-range-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.decorate.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for <emphasis>git log --decorate</emphasis> output.  <literal>&lt;slot&gt;</literal> is one
        of <literal>branch</literal>, <literal>remoteBranch</literal>, <literal>tag</literal>, <literal>stash</literal> or <literal>HEAD</literal> for local
        branches, remote-tracking branches, tags, stash and HEAD, respectively
        and <literal>grafted</literal> for grafted commits.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.grep
</term>
<listitem>
<simpara>
        When set to <literal>always</literal>, always highlight matches.  When <literal>false</literal> (or
        <literal>never</literal>), never.  When set to <literal>true</literal> or <literal>auto</literal>, use color only
        when the output is written to the terminal.  If unset, then the
        value of <literal>color.ui</literal> is used (<literal>auto</literal> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.grep.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for grep colorization.  <literal>&lt;slot&gt;</literal> specifies which
        part of the line to use the specified color, and is one of
</simpara>
<variablelist>
<varlistentry>
<term>
<literal>context</literal>
</term>
<listitem>
<simpara>
        non-matching text in context lines (when using <literal>-A</literal>, <literal>-B</literal>, or <literal>-C</literal>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>filename</literal>
</term>
<listitem>
<simpara>
        filename prefix (when not using <literal>-h</literal>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>function</literal>
</term>
<listitem>
<simpara>
        function name lines (when using <literal>-p</literal>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>lineNumber</literal>
</term>
<listitem>
<simpara>
        line number prefix (when using <literal>-n</literal>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>column</literal>
</term>
<listitem>
<simpara>
        column number prefix (when using <literal>--column</literal>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>match</literal>
</term>
<listitem>
<simpara>
        matching text (same as setting <literal>matchContext</literal> and <literal>matchSelected</literal>)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>matchContext</literal>
</term>
<listitem>
<simpara>
        matching text in context lines
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>matchSelected</literal>
</term>
<listitem>
<simpara>
        matching text in selected lines. Also, used to customize the following
        <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> subcommands: <literal>--grep</literal>, <literal>--author</literal> and <literal>--committer</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>selected</literal>
</term>
<listitem>
<simpara>
        non-matching text in selected lines. Also, used to customize the
        following <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> subcommands: <literal>--grep</literal>, <literal>--author</literal> and
        <literal>--committer</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>separator</literal>
</term>
<listitem>
<simpara>
        separators between fields on a line (<literal>:</literal>, <literal>-</literal>, and <literal>=</literal>)
        and between hunks (<literal>--</literal>)
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.interactive
</term>
<listitem>
<simpara>
        When set to <literal>always</literal>, always use colors for interactive prompts
        and displays (such as those used by "git-add --interactive" and
        "git-clean --interactive"). When false (or <literal>never</literal>), never.
        When set to <literal>true</literal> or <literal>auto</literal>, use colors only when the output is
        to the terminal. If unset, then the value of <literal>color.ui</literal> is
        used (<literal>auto</literal> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.interactive.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for <emphasis>git add --interactive</emphasis> and <emphasis>git clean
        --interactive</emphasis> output. <literal>&lt;slot&gt;</literal> may be <literal>prompt</literal>, <literal>header</literal>, <literal>help</literal>
        or <literal>error</literal>, for four distinct types of normal output from
        interactive commands.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.pager
</term>
<listitem>
<simpara>
        A boolean to specify whether <literal>auto</literal> color modes should colorize
        output going to the pager. Defaults to true; set this to false
        if your pager does not understand ANSI color codes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.push
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in push errors. May be set to
        <literal>always</literal>, <literal>false</literal> (or <literal>never</literal>) or <literal>auto</literal> (or <literal>true</literal>), in which
        case colors are used only when the error output goes to a terminal.
        If unset, then the value of <literal>color.ui</literal> is used (<literal>auto</literal> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.push.error
</term>
<listitem>
<simpara>
        Use customized color for push errors.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.remote
</term>
<listitem>
<simpara>
        If set, keywords at the start of the line are highlighted. The
        keywords are "error", "warning", "hint" and "success", and are
        matched case-insensitively. May be set to <literal>always</literal>, <literal>false</literal> (or
        <literal>never</literal>) or <literal>auto</literal> (or <literal>true</literal>). If unset, then the value of
        <literal>color.ui</literal> is used (<literal>auto</literal> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.remote.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for each remote keyword. <literal>&lt;slot&gt;</literal> may be
        <literal>hint</literal>, <literal>warning</literal>, <literal>success</literal> or <literal>error</literal> which match the
        corresponding keyword.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.showBranch
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in the output of
        <citerefentry>
<refentrytitle>git-show-branch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. May be set to <literal>always</literal>,
        <literal>false</literal> (or <literal>never</literal>) or <literal>auto</literal> (or <literal>true</literal>), in which case colors are used
        only when the output is to a terminal. If unset, then the
        value of <literal>color.ui</literal> is used (<literal>auto</literal> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.status
</term>
<listitem>
<simpara>
        A boolean to enable/disable color in the output of
        <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. May be set to <literal>always</literal>,
        <literal>false</literal> (or <literal>never</literal>) or <literal>auto</literal> (or <literal>true</literal>), in which case colors are used
        only when the output is to a terminal. If unset, then the
        value of <literal>color.ui</literal> is used (<literal>auto</literal> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.status.&lt;slot&gt;
</term>
<listitem>
<simpara>
        Use customized color for status colorization. <literal>&lt;slot&gt;</literal> is
        one of <literal>header</literal> (the header text of the status message),
        <literal>added</literal> or <literal>updated</literal> (files which are added but not committed),
        <literal>changed</literal> (files which are changed but not added in the index),
        <literal>untracked</literal> (files which are not tracked by Git),
        <literal>branch</literal> (the current branch),
        <literal>nobranch</literal> (the color the <emphasis>no branch</emphasis> warning is shown in, defaulting
        to red),
        <literal>localBranch</literal> or <literal>remoteBranch</literal> (the local and remote branch names,
        respectively, when branch and tracking information is displayed in the
        status short-format), or
        <literal>unmerged</literal> (files which have unmerged changes).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.transport
</term>
<listitem>
<simpara>
        A boolean to enable/disable color when pushes are rejected. May be
        set to <literal>always</literal>, <literal>false</literal> (or <literal>never</literal>) or <literal>auto</literal> (or <literal>true</literal>), in which
        case colors are used only when the error output goes to a terminal.
        If unset, then the value of <literal>color.ui</literal> is used (<literal>auto</literal> by default).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.transport.rejected
</term>
<listitem>
<simpara>
        Use customized color when a push was rejected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color.ui
</term>
<listitem>
<simpara>
        This variable determines the default value for variables such
        as <literal>color.diff</literal> and <literal>color.grep</literal> that control the use of color
        per command family. Its scope will expand as more commands learn
        configuration to set a default for the <literal>--color</literal> option.  Set it
        to <literal>false</literal> or <literal>never</literal> if you prefer Git commands not to use
        color unless enabled explicitly with some other configuration
        or the <literal>--color</literal> option. Set it to <literal>always</literal> if you want all
        output not intended for machine consumption to use color, to
        <literal>true</literal> or <literal>auto</literal> (this is the default since Git 1.8.4) if you
        want such output to use color when written to the terminal.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
column.ui
</term>
<listitem>
<simpara>
        Specify whether supported commands should output in columns.
        This variable consists of a list of tokens separated by spaces
        or commas:
</simpara>
<simpara>These options control when the feature should be enabled
(defaults to <emphasis>never</emphasis>):</simpara>
<variablelist>
<varlistentry>
<term>
<literal>always</literal>
</term>
<listitem>
<simpara>
        always show in columns
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>never</literal>
</term>
<listitem>
<simpara>
        never show in columns
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>auto</literal>
</term>
<listitem>
<simpara>
        show in columns if the output is to the terminal
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>These options control layout (defaults to <emphasis>column</emphasis>).  Setting any
of these implies <emphasis>always</emphasis> if none of <emphasis>always</emphasis>, <emphasis>never</emphasis>, or <emphasis>auto</emphasis> are
specified.</simpara>
<variablelist>
<varlistentry>
<term>
<literal>column</literal>
</term>
<listitem>
<simpara>
        fill columns before rows
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>row</literal>
</term>
<listitem>
<simpara>
        fill rows before columns
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>plain</literal>
</term>
<listitem>
<simpara>
        show in one column
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Finally, these options can be combined with a layout option (defaults
to <emphasis>nodense</emphasis>):</simpara>
<variablelist>
<varlistentry>
<term>
<literal>dense</literal>
</term>
<listitem>
<simpara>
        make unequal size columns to utilize more space
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>nodense</literal>
</term>
<listitem>
<simpara>
        make equal size columns
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
column.branch
</term>
<listitem>
<simpara>
        Specify whether to output branch listing in <literal>git branch</literal> in columns.
        See <literal>column.ui</literal> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
column.clean
</term>
<listitem>
<simpara>
        Specify the layout when list items in <literal>git clean -i</literal>, which always
        shows files and directories in columns. See <literal>column.ui</literal> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
column.status
</term>
<listitem>
<simpara>
        Specify whether to output untracked files in <literal>git status</literal> in columns.
        See <literal>column.ui</literal> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
column.tag
</term>
<listitem>
<simpara>
        Specify whether to output tag listing in <literal>git tag</literal> in columns.
        See <literal>column.ui</literal> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commit.cleanup
</term>
<listitem>
<simpara>
        This setting overrides the default of the <literal>--cleanup</literal> option in
        <literal>git commit</literal>. See <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details. Changing the
        default can be useful when you always want to keep lines that begin
        with comment character <literal>#</literal> in your log message, in which case you
        would do <literal>git config commit.cleanup whitespace</literal> (note that you will
        have to remove the help lines that begin with <literal>#</literal> in the commit log
        template yourself, if you do this).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commit.gpgSign
</term>
<listitem>
<simpara>
        A boolean to specify whether all commits should be GPG signed.
        Use of this option when doing operations such as rebase can
        result in a large number of commits being signed. It may be
        convenient to use an agent to avoid typing your GPG passphrase
        several times.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commit.status
</term>
<listitem>
<simpara>
        A boolean to enable/disable inclusion of status information in the
        commit message template when using an editor to prepare the commit
        message.  Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commit.template
</term>
<listitem>
<simpara>
        Specify the pathname of a file to use as the template for
        new commit messages.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commit.verbose
</term>
<listitem>
<simpara>
        A boolean or int to specify the level of verbose with <literal>git commit</literal>.
        See <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commitGraph.generationVersion
</term>
<listitem>
<simpara>
        Specifies the type of generation number version to use when writing
        or reading the commit-graph file. If version 1 is specified, then
        the corrected commit dates will not be written or read. Defaults to
        2.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commitGraph.maxNewFilters
</term>
<listitem>
<simpara>
        Specifies the default value for the <literal>--max-new-filters</literal> option of <literal>git
        commit-graph write</literal> (c.f., <citerefentry>
<refentrytitle>git-commit-graph</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
commitGraph.readChangedPaths
</term>
<listitem>
<simpara>
        If true, then git will use the changed-path Bloom filters in the
        commit-graph file (if it exists, and they are present). Defaults to
        true. See <citerefentry>
<refentrytitle>git-commit-graph</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credential.helper
</term>
<listitem>
<simpara>
        Specify an external helper to be called when a username or
        password credential is needed; the helper may consult external
        storage to avoid prompting the user for the credentials. This is
        normally the name of a credential helper with possible
        arguments, but may also be an absolute path with arguments or, if
        preceded by <literal>!</literal>, shell commands.
</simpara>
<simpara>Note that multiple helpers may be defined. See <citerefentry>
<refentrytitle>gitcredentials</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>
for details and examples.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credential.useHttpPath
</term>
<listitem>
<simpara>
        When acquiring credentials, consider the "path" component of an http
        or https URL to be important. Defaults to false. See
        <citerefentry>
<refentrytitle>gitcredentials</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credential.username
</term>
<listitem>
<simpara>
        If no username is set for a network authentication, use this username
        by default. See credential.&lt;context&gt;.* below, and
        <citerefentry>
<refentrytitle>gitcredentials</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credential.&lt;url&gt;.*
</term>
<listitem>
<simpara>
        Any of the credential.* options above can be applied selectively to
        some credentials. For example "credential.https://example.com.username"
        would set the default username only for https connections to
        example.com. See <citerefentry>
<refentrytitle>gitcredentials</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> for details on how URLs are
        matched.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credentialCache.ignoreSIGHUP
</term>
<listitem>
<simpara>
        Tell git-credential-cache&#8212;daemon to ignore SIGHUP, instead of quitting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
credentialStore.lockTimeoutMS
</term>
<listitem>
<simpara>
        The length of time, in milliseconds, for git-credential-store to retry
        when trying to lock the credentials file. Value 0 means not to retry at
        all; -1 means to try indefinitely. Default is 1000 (i.e., retry for
        1s).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
completion.commands
</term>
<listitem>
<simpara>
        This is only used by git-completion.bash to add or remove
        commands from the list of completed commands. Normally only
        porcelain commands and a few select others are completed. You
        can add more commands, separated by space, in this
        variable. Prefixing the command with <emphasis>-</emphasis> will remove it from
        the existing list.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.autoRefreshIndex
</term>
<listitem>
<simpara>
        When using <emphasis>git diff</emphasis> to compare with work tree
        files, do not consider stat-only change as changed.
        Instead, silently run <literal>git update-index --refresh</literal> to
        update the cached stat information for paths whose
        contents in the work tree match the contents in the
        index.  This option defaults to true.  Note that this
        affects only <emphasis>git diff</emphasis> Porcelain, and not lower level
        <emphasis>diff</emphasis> commands such as <emphasis>git diff-files</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.dirstat
</term>
<listitem>
<simpara>
        A comma separated list of <literal>--dirstat</literal> parameters specifying the
        default behavior of the <literal>--dirstat</literal> option to <citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        and friends. The defaults can be overridden on the command line
        (using <literal>--dirstat=&lt;param1,param2,...&gt;</literal>). The fallback defaults
        (when not changed by <literal>diff.dirstat</literal>) are <literal>changes,noncumulative,3</literal>.
        The following parameters are available:
</simpara>
<variablelist>
<varlistentry>
<term>
<literal>changes</literal>
</term>
<listitem>
<simpara>
        Compute the dirstat numbers by counting the lines that have been
        removed from the source, or added to the destination. This ignores
        the amount of pure code movements within a file.  In other words,
        rearranging lines in a file is not counted as much as other changes.
        This is the default behavior when no parameter is given.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>lines</literal>
</term>
<listitem>
<simpara>
        Compute the dirstat numbers by doing the regular line-based diff
        analysis, and summing the removed/added line counts. (For binary
        files, count 64-byte chunks instead, since binary files have no
        natural concept of lines). This is a more expensive <literal>--dirstat</literal>
        behavior than the <literal>changes</literal> behavior, but it does count rearranged
        lines within a file as much as other changes. The resulting output
        is consistent with what you get from the other <literal>--*stat</literal> options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>files</literal>
</term>
<listitem>
<simpara>
        Compute the dirstat numbers by counting the number of files changed.
        Each changed file counts equally in the dirstat analysis. This is
        the computationally cheapest <literal>--dirstat</literal> behavior, since it does
        not have to look at the file contents at all.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>cumulative</literal>
</term>
<listitem>
<simpara>
        Count changes in a child directory for the parent directory as well.
        Note that when using <literal>cumulative</literal>, the sum of the percentages
        reported may exceed 100%. The default (non-cumulative) behavior can
        be specified with the <literal>noncumulative</literal> parameter.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;limit&gt;
</term>
<listitem>
<simpara>
        An integer parameter specifies a cut-off percent (3% by default).
        Directories contributing less than this percentage of the changes
        are not shown in the output.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Example: The following will count changed files, while ignoring
directories with less than 10% of the total amount of changed files,
and accumulating child directory counts in the parent directories:
<literal>files,10,cumulative</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.statGraphWidth
</term>
<listitem>
<simpara>
        Limit the width of the graph part in --stat output. If set, applies
        to all commands generating --stat output except format-patch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.context
</term>
<listitem>
<simpara>
        Generate diffs with &lt;n&gt; lines of context instead of the default
        of 3. This value is overridden by the -U option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.interHunkContext
</term>
<listitem>
<simpara>
        Show the context between diff hunks, up to the specified number
        of lines, thereby fusing the hunks that are close to each other.
        This value serves as the default for the <literal>--inter-hunk-context</literal>
        command line option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.external
</term>
<listitem>
<simpara>
        If this config variable is set, diff generation is not
        performed using the internal diff machinery, but using the
        given command.  Can be overridden with the &#8216;GIT_EXTERNAL_DIFF&#8217;
        environment variable.  The command is called with parameters
        as described under "git Diffs" in <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.  Note: if
        you want to use an external diff program only on a subset of
        your files, you might want to use <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.ignoreSubmodules
</term>
<listitem>
<simpara>
        Sets the default value of --ignore-submodules. Note that this
        affects only <emphasis>git diff</emphasis> Porcelain, and not lower level <emphasis>diff</emphasis>
        commands such as <emphasis>git diff-files</emphasis>. <emphasis>git checkout</emphasis>
        and <emphasis>git switch</emphasis> also honor
        this setting when reporting uncommitted changes. Setting it to
        <emphasis>all</emphasis> disables the submodule summary normally shown by <emphasis>git commit</emphasis>
        and <emphasis>git status</emphasis> when <literal>status.submoduleSummary</literal> is set unless it is
        overridden by using the --ignore-submodules command-line option.
        The <emphasis>git submodule</emphasis> commands are not affected by this setting.
        By default this is set to untracked so that any untracked
        submodules are ignored.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.mnemonicPrefix
</term>
<listitem>
<simpara>
        If set, <emphasis>git diff</emphasis> uses a prefix pair that is different from the
        standard "a/" and "b/" depending on what is being compared.  When
        this configuration is in effect, reverse diff output also swaps
        the order of the prefixes:
</simpara>
<variablelist>
<varlistentry>
<term>
<literal>git diff</literal>
</term>
<listitem>
<simpara>
        compares the (i)ndex and the (w)ork tree;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git diff HEAD</literal>
</term>
<listitem>
<simpara>
         compares a (c)ommit and the (w)ork tree;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git diff --cached</literal>
</term>
<listitem>
<simpara>
        compares a (c)ommit and the (i)ndex;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git diff HEAD:file1 file2</literal>
</term>
<listitem>
<simpara>
        compares an (o)bject and a (w)ork tree entity;
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>git diff --no-index a b</literal>
</term>
<listitem>
<simpara>
        compares two non-git things (1) and (2).
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.noprefix
</term>
<listitem>
<simpara>
        If set, <emphasis>git diff</emphasis> does not show any source or destination prefix.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.relative
</term>
<listitem>
<simpara>
        If set to <emphasis>true</emphasis>, <emphasis>git diff</emphasis> does not show changes outside of the directory
        and show pathnames relative to the current directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.orderFile
</term>
<listitem>
<simpara>
        File indicating how to order files within a diff.
        See the <emphasis>-O</emphasis> option to <citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.
        If <literal>diff.orderFile</literal> is a relative pathname, it is treated as
        relative to the top of the working tree.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.renameLimit
</term>
<listitem>
<simpara>
        The number of files to consider in the exhaustive portion of
        copy/rename detection; equivalent to the <emphasis>git diff</emphasis> option
        <literal>-l</literal>.  If not set, the default value is currently 1000.  This
        setting has no effect if rename detection is turned off.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.renames
</term>
<listitem>
<simpara>
        Whether and how Git detects renames.  If set to "false",
        rename detection is disabled. If set to "true", basic rename
        detection is enabled.  If set to "copies" or "copy", Git will
        detect copies, as well.  Defaults to true.  Note that this
        affects only <emphasis>git diff</emphasis> Porcelain like <citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and
        <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, and not lower level commands such as
        <citerefentry>
<refentrytitle>git-diff-files</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.suppressBlankEmpty
</term>
<listitem>
<simpara>
        A boolean to inhibit the standard behavior of printing a space
        before each empty output line. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.submodule
</term>
<listitem>
<simpara>
        Specify the format in which differences in submodules are
        shown.  The "short" format just shows the names of the commits
        at the beginning and end of the range. The "log" format lists
        the commits in the range like <citerefentry>
<refentrytitle>git-submodule</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> <literal>summary</literal>
        does. The "diff" format shows an inline diff of the changed
        contents of the submodule. Defaults to "short".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.wordRegex
</term>
<listitem>
<simpara>
        A POSIX Extended Regular Expression used to determine what is a "word"
        when performing word-by-word difference calculations.  Character
        sequences that match the regular expression are "words", all other
        characters are <emphasis role="strong">ignorable</emphasis> whitespace.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.&lt;driver&gt;.command
</term>
<listitem>
<simpara>
        The custom diff driver command.  See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>
        for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.&lt;driver&gt;.xfuncname
</term>
<listitem>
<simpara>
        The regular expression that the diff driver should use to
        recognize the hunk header.  A built-in pattern may also be used.
        See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.&lt;driver&gt;.binary
</term>
<listitem>
<simpara>
        Set this option to true to make the diff driver treat files as
        binary.  See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.&lt;driver&gt;.textconv
</term>
<listitem>
<simpara>
        The command that the diff driver should call to generate the
        text-converted version of a file.  The result of the
        conversion is used to generate a human-readable diff.  See
        <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.&lt;driver&gt;.wordRegex
</term>
<listitem>
<simpara>
        The regular expression that the diff driver should use to
        split words in a line.  See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for
        details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.&lt;driver&gt;.cachetextconv
</term>
<listitem>
<simpara>
        Set this option to true to make the diff driver cache the text
        conversion outputs.  See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.tool
</term>
<listitem>
<simpara>
        Controls which diff tool is used by <citerefentry>
<refentrytitle>git-difftool</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        This variable overrides the value configured in <literal>merge.tool</literal>.
        The list below shows the valid built-in values.
        Any other value is treated as a custom diff tool and requires
        that a corresponding difftool.&lt;tool&gt;.cmd variable is defined.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.guitool
</term>
<listitem>
<simpara>
        Controls which diff tool is used by <citerefentry>
<refentrytitle>git-difftool</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> when
        the -g/--gui flag is specified. This variable overrides the value
        configured in <literal>merge.guitool</literal>. The list below shows the valid
        built-in values. Any other value is treated as a custom diff tool
        and requires that a corresponding difftool.&lt;guitool&gt;.cmd variable
        is defined.
</simpara>
<itemizedlist>
<listitem>
<simpara>
araxis
</simpara>
</listitem>
<listitem>
<simpara>
bc
</simpara>
</listitem>
<listitem>
<simpara>
bc3
</simpara>
</listitem>
<listitem>
<simpara>
bc4
</simpara>
</listitem>
<listitem>
<simpara>
codecompare
</simpara>
</listitem>
<listitem>
<simpara>
deltawalker
</simpara>
</listitem>
<listitem>
<simpara>
diffmerge
</simpara>
</listitem>
<listitem>
<simpara>
diffuse
</simpara>
</listitem>
<listitem>
<simpara>
ecmerge
</simpara>
</listitem>
<listitem>
<simpara>
emerge
</simpara>
</listitem>
<listitem>
<simpara>
examdiff
</simpara>
</listitem>
<listitem>
<simpara>
guiffy
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff1
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff2
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff3
</simpara>
</listitem>
<listitem>
<simpara>
kdiff3
</simpara>
</listitem>
<listitem>
<simpara>
kompare
</simpara>
</listitem>
<listitem>
<simpara>
meld
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff1
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff2
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff3
</simpara>
</listitem>
<listitem>
<simpara>
opendiff
</simpara>
</listitem>
<listitem>
<simpara>
p4merge
</simpara>
</listitem>
<listitem>
<simpara>
smerge
</simpara>
</listitem>
<listitem>
<simpara>
tkdiff
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff1
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff2
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff3
</simpara>
</listitem>
<listitem>
<simpara>
winmerge
</simpara>
</listitem>
<listitem>
<simpara>
xxdiff
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.indentHeuristic
</term>
<listitem>
<simpara>
        Set this option to <literal>false</literal> to disable the default heuristics
        that shift diff hunk boundaries to make patches easier to read.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.algorithm
</term>
<listitem>
<simpara>
        Choose a diff algorithm.  The variants are as follows:
</simpara>
<variablelist>
<varlistentry>
<term>
<literal>default</literal>, <literal>myers</literal>
</term>
<listitem>
<simpara>
        The basic greedy diff algorithm. Currently, this is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>minimal</literal>
</term>
<listitem>
<simpara>
        Spend extra time to make sure the smallest possible diff is
        produced.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>patience</literal>
</term>
<listitem>
<simpara>
        Use "patience diff" algorithm when generating patches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<literal>histogram</literal>
</term>
<listitem>
<simpara>
        This algorithm extends the patience algorithm to "support
        low-occurrence common elements".
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.wsErrorHighlight
</term>
<listitem>
<simpara>
        Highlight whitespace errors in the <literal>context</literal>, <literal>old</literal> or <literal>new</literal>
        lines of the diff.  Multiple values are separated by comma,
        <literal>none</literal> resets previous values, <literal>default</literal> reset the list to
        <literal>new</literal> and <literal>all</literal> is a shorthand for <literal>old,new,context</literal>.  The
        whitespace errors are colored with <literal>color.diff.whitespace</literal>.
        The command line option <literal>--ws-error-highlight=&lt;kind&gt;</literal>
        overrides this setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.colorMoved
</term>
<listitem>
<simpara>
        If set to either a valid <literal>&lt;mode&gt;</literal> or a true value, moved lines
        in a diff are colored differently, for details of valid modes
        see <emphasis>--color-moved</emphasis> in <citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. If simply set to
        true the default color mode will be used. When set to false,
        moved lines are not colored.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
diff.colorMovedWS
</term>
<listitem>
<simpara>
        When moved lines are colored using e.g. the <literal>diff.colorMoved</literal> setting,
        this option controls the <literal>&lt;mode&gt;</literal> how spaces are treated
        for details of valid modes see <emphasis>--color-moved-ws</emphasis> in <citerefentry>
<refentrytitle>git-diff</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
difftool.&lt;tool&gt;.path
</term>
<listitem>
<simpara>
        Override the path for the given tool.  This is useful in case
        your tool is not in the PATH.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
difftool.&lt;tool&gt;.cmd
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified diff tool.
        The specified command is evaluated in shell with the following
        variables available:  <emphasis>LOCAL</emphasis> is set to the name of the temporary
        file containing the contents of the diff pre-image and <emphasis>REMOTE</emphasis>
        is set to the name of the temporary file containing the contents
        of the diff post-image.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
difftool.prompt
</term>
<listitem>
<simpara>
        Prompt before each invocation of the diff tool.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
extensions.objectFormat
</term>
<listitem>
<simpara>
        Specify the hash algorithm to use.  The acceptable values are <literal>sha1</literal> and
        <literal>sha256</literal>.  If not specified, <literal>sha1</literal> is assumed.  It is an error to specify
        this key unless <literal>core.repositoryFormatVersion</literal> is 1.
</simpara>
<simpara>Note that this setting should only be set by <citerefentry>
<refentrytitle>git-init</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or
<citerefentry>
<refentrytitle>git-clone</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.  Trying to change it after initialization will not
work and will produce hard-to-diagnose issues.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fastimport.unpackLimit
</term>
<listitem>
<simpara>
        If the number of objects imported by <citerefentry>
<refentrytitle>git-fast-import</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        is below this limit, then the objects will be unpacked into
        loose object files.  However if the number of imported objects
        equals or exceeds this limit then the pack will be stored as a
        pack.  Storing the pack from a fast-import can make the import
        operation complete faster, especially on slow filesystems.  If
        not set, the value of <literal>transfer.unpackLimit</literal> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
feature.*
</term>
<listitem>
<simpara>
        The config settings that start with <literal>feature.</literal> modify the defaults of
        a group of other config settings. These groups are created by the Git
        developer community as recommended defaults and are subject to change.
        In particular, new config options may be added with different defaults.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
feature.experimental
</term>
<listitem>
<simpara>
        Enable config options that are new to Git, and are being considered for
        future defaults. Config settings included here may be added or removed
        with each release, including minor version updates. These settings may
        have unintended interactions since they are so new. Please enable this
        setting if you are interested in providing feedback on experimental
        features. The new default values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>fetch.negotiationAlgorithm=skipping</literal> may improve fetch negotiation times by
skipping more commits at a time, reducing the number of round trips.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
feature.manyFiles
</term>
<listitem>
<simpara>
        Enable config options that optimize for repos with many files in the
        working directory. With many files, commands such as <literal>git status</literal> and
        <literal>git checkout</literal> may be slow and these new defaults improve performance:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>index.version=4</literal> enables path-prefix compression in the index.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>core.untrackedCache=true</literal> enables the untracked cache. This setting assumes
that mtime is working on your machine.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.recurseSubmodules
</term>
<listitem>
<simpara>
        This option controls whether <literal>git fetch</literal> (and the underlying fetch
        in <literal>git pull</literal>) will recursively fetch into populated submodules.
        This option can be set either to a boolean value or to <emphasis>on-demand</emphasis>.
        Setting it to a boolean changes the behavior of fetch and pull to
        recurse unconditionally into submodules when set to true or to not
        recurse at all when set to false. When set to <emphasis>on-demand</emphasis>, fetch and
        pull will only recurse into a populated submodule when its
        superproject retrieves a commit that updates the submodule&#8217;s
        reference.
        Defaults to <emphasis>on-demand</emphasis>, or to the value of <emphasis>submodule.recurse</emphasis> if set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.fsckObjects
</term>
<listitem>
<simpara>
        If it is set to true, git-fetch-pack will check all fetched
        objects. See <literal>transfer.fsckObjects</literal> for what&#8217;s
        checked. Defaults to false. If not set, the value of
        <literal>transfer.fsckObjects</literal> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.fsck.&lt;msg-id&gt;
</term>
<listitem>
<simpara>
        Acts like <literal>fsck.&lt;msg-id&gt;</literal>, but is used by
        <citerefentry>
<refentrytitle>git-fetch-pack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> instead of <citerefentry>
<refentrytitle>git-fsck</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. See
        the <literal>fsck.&lt;msg-id&gt;</literal> documentation for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.fsck.skipList
</term>
<listitem>
<simpara>
        Acts like <literal>fsck.skipList</literal>, but is used by
        <citerefentry>
<refentrytitle>git-fetch-pack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> instead of <citerefentry>
<refentrytitle>git-fsck</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. See
        the <literal>fsck.skipList</literal> documentation for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.unpackLimit
</term>
<listitem>
<simpara>
        If the number of objects fetched over the Git native
        transfer is below this
        limit, then the objects will be unpacked into loose object
        files. However if the number of received objects equals or
        exceeds this limit then the received pack will be stored as
        a pack, after adding any missing delta bases.  Storing the
        pack from a push can make the push operation complete faster,
        especially on slow filesystems.  If not set, the value of
        <literal>transfer.unpackLimit</literal> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.prune
</term>
<listitem>
<simpara>
        If true, fetch will automatically behave as if the <literal>--prune</literal>
        option was given on the command line.  See also <literal>remote.&lt;name&gt;.prune</literal>
        and the PRUNING section of <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.pruneTags
</term>
<listitem>
<simpara>
        If true, fetch will automatically behave as if the
        <literal>refs/tags/*:refs/tags/*</literal> refspec was provided when pruning,
        if not set already. This allows for setting both this option
        and <literal>fetch.prune</literal> to maintain a 1=1 mapping to upstream
        refs. See also <literal>remote.&lt;name&gt;.pruneTags</literal> and the PRUNING
        section of <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.output
</term>
<listitem>
<simpara>
        Control how ref update status is printed. Valid values are
        <literal>full</literal> and <literal>compact</literal>. Default value is <literal>full</literal>. See section
        OUTPUT in <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for detail.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.negotiationAlgorithm
</term>
<listitem>
<simpara>
        Control how information about the commits in the local repository is
        sent when negotiating the contents of the packfile to be sent by the
        server. Set to "skipping" to use an algorithm that skips commits in an
        effort to converge faster, but may result in a larger-than-necessary
        packfile; or set to "noop" to not send any information at all, which
        will almost certainly result in a larger-than-necessary packfile, but
        will skip the negotiation step.
        The default is "default" which instructs Git to use the default algorithm
        that never skips commits (unless the server has acknowledged it or one
        of its descendants). If <literal>feature.experimental</literal> is enabled, then this
        setting defaults to "skipping".
        Unknown values will cause <emphasis>git fetch</emphasis> to error out.
</simpara>
<simpara>See also the <literal>--negotiate-only</literal> and <literal>--negotiation-tip</literal> options to
<citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.showForcedUpdates
</term>
<listitem>
<simpara>
        Set to false to enable <literal>--no-show-forced-updates</literal> in
        <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <citerefentry>
<refentrytitle>git-pull</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> commands.
        Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.parallel
</term>
<listitem>
<simpara>
        Specifies the maximal number of fetch operations to be run in parallel
        at a time (submodules, or remotes when the <literal>--multiple</literal> option of
        <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> is in effect).
</simpara>
<simpara>A value of 0 will give some reasonable default. If unset, it defaults to 1.</simpara>
<simpara>For submodules, this setting can be overridden using the <literal>submodule.fetchJobs</literal>
config setting.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fetch.writeCommitGraph
</term>
<listitem>
<simpara>
        Set to true to write a commit-graph after every <literal>git fetch</literal> command
        that downloads a pack-file from a remote. Using the <literal>--split</literal> option,
        most executions will create a very small commit-graph file on top of
        the existing commit-graph file(s). Occasionally, these files will
        merge and the write may take longer. Having an updated commit-graph
        file helps performance of many Git commands, including <literal>git merge-base</literal>,
        <literal>git push -f</literal>, and <literal>git log --graph</literal>. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.attach
</term>
<listitem>
<simpara>
        Enable multipart/mixed attachments as the default for
        <emphasis>format-patch</emphasis>.  The value can also be a double quoted string
        which will enable attachments as the default and set the
        value as the boundary.  See the --attach option in
        <citerefentry>
<refentrytitle>git-format-patch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.from
</term>
<listitem>
<simpara>
        Provides the default value for the <literal>--from</literal> option to format-patch.
        Accepts a boolean value, or a name and email address.  If false,
        format-patch defaults to <literal>--no-from</literal>, using commit authors directly in
        the "From:" field of patch mails.  If true, format-patch defaults to
        <literal>--from</literal>, using your committer identity in the "From:" field of patch
        mails and including a "From:" field in the body of the patch mail if
        different.  If set to a non-boolean value, format-patch uses that
        value instead of your committer identity.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.numbered
</term>
<listitem>
<simpara>
        A boolean which can enable or disable sequence numbers in patch
        subjects.  It defaults to "auto" which enables it only if there
        is more than one patch.  It can be enabled or disabled for all
        messages by setting it to "true" or "false".  See --numbered
        option in <citerefentry>
<refentrytitle>git-format-patch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.headers
</term>
<listitem>
<simpara>
        Additional email headers to include in a patch to be submitted
        by mail.  See <citerefentry>
<refentrytitle>git-format-patch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.to
</term>
<term>
format.cc
</term>
<listitem>
<simpara>
        Additional recipients to include in a patch to be submitted
        by mail.  See the --to and --cc options in
        <citerefentry>
<refentrytitle>git-format-patch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.subjectPrefix
</term>
<listitem>
<simpara>
        The default for format-patch is to output files with the <emphasis>[PATCH]</emphasis>
        subject prefix. Use this variable to change that prefix.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.coverFromDescription
</term>
<listitem>
<simpara>
        The default mode for format-patch to determine which parts of
        the cover letter will be populated using the branch&#8217;s
        description. See the <literal>--cover-from-description</literal> option in
        <citerefentry>
<refentrytitle>git-format-patch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.signature
</term>
<listitem>
<simpara>
        The default for format-patch is to output a signature containing
        the Git version number. Use this variable to change that default.
        Set this variable to the empty string ("") to suppress
        signature generation.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.signatureFile
</term>
<listitem>
<simpara>
        Works just like format.signature except the contents of the
        file specified by this variable will be used as the signature.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.suffix
</term>
<listitem>
<simpara>
        The default for format-patch is to output files with the suffix
        <literal>.patch</literal>. Use this variable to change that suffix (make sure to
        include the dot if you want it).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.encodeEmailHeaders
</term>
<listitem>
<simpara>
        Encode email headers that have non-ASCII characters with
        "Q-encoding" (described in RFC 2047) for email transmission.
        Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.pretty
</term>
<listitem>
<simpara>
        The default pretty format for log/show/whatchanged command,
        See <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-show</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
        <citerefentry>
<refentrytitle>git-whatchanged</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.thread
</term>
<listitem>
<simpara>
        The default threading style for <emphasis>git format-patch</emphasis>.  Can be
        a boolean value, or <literal>shallow</literal> or <literal>deep</literal>.  <literal>shallow</literal> threading
        makes every mail a reply to the head of the series,
        where the head is chosen from the cover letter, the
        <literal>--in-reply-to</literal>, and the first patch mail, in this order.
        <literal>deep</literal> threading makes every mail a reply to the previous one.
        A true boolean value is the same as <literal>shallow</literal>, and a false
        value disables threading.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.signOff
</term>
<listitem>
<simpara>
        A boolean value which lets you enable the <literal>-s/--signoff</literal> option of
        format-patch by default. <emphasis role="strong">Note:</emphasis> Adding the <literal>Signed-off-by</literal> trailer to a
        patch should be a conscious act and means that you certify you have
        the rights to submit this work under the same open source license.
        Please see the <emphasis>SubmittingPatches</emphasis> document for further discussion.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.coverLetter
</term>
<listitem>
<simpara>
        A boolean that controls whether to generate a cover-letter when
        format-patch is invoked, but in addition can be set to "auto", to
        generate a cover-letter only when there&#8217;s more than one patch.
        Default is false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.outputDirectory
</term>
<listitem>
<simpara>
        Set a custom directory to store the resulting files instead of the
        current working directory. All directory components will be created.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.filenameMaxLength
</term>
<listitem>
<simpara>
        The maximum length of the output filenames generated by the
        <literal>format-patch</literal> command; defaults to 64.  Can be overridden
        by the <literal>--filename-max-length=&lt;n&gt;</literal> command line option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.useAutoBase
</term>
<listitem>
<simpara>
        A boolean value which lets you enable the <literal>--base=auto</literal> option of
        format-patch by default. Can also be set to "whenAble" to allow
        enabling <literal>--base=auto</literal> if a suitable base is available, but to skip
        adding base info otherwise without the format dying.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
format.notes
</term>
<listitem>
<simpara>
        Provides the default value for the <literal>--notes</literal> option to
        format-patch. Accepts a boolean value, or a ref which specifies
        where to get notes. If false, format-patch defaults to
        <literal>--no-notes</literal>. If true, format-patch defaults to <literal>--notes</literal>. If
        set to a non-boolean value, format-patch defaults to
        <literal>--notes=&lt;ref&gt;</literal>, where <literal>ref</literal> is the non-boolean value. Defaults
        to false.
</simpara>
<simpara>If one wishes to use the ref <literal>ref/notes/true</literal>, please use that literal
instead.</simpara>
<simpara>This configuration can be specified multiple times in order to allow
multiple notes refs to be included. In that case, it will behave
similarly to multiple <literal>--[no-]notes[=]</literal> options passed in. That is, a
value of <literal>true</literal> will show the default notes, a value of <literal>&lt;ref&gt;</literal> will
also show notes from that notes ref and a value of <literal>false</literal> will negate
previous configurations and not show notes.</simpara>
<simpara>For example,</simpara>
<literallayout class="monospaced">[format]
        notes = true
        notes = foo
        notes = false
        notes = bar</literallayout><simpara></simpara>
<simpara>will only show notes from <literal>refs/notes/bar</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
filter.&lt;driver&gt;.clean
</term>
<listitem>
<simpara>
        The command which is used to convert the content of a worktree
        file to a blob upon checkin.  See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for
        details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
filter.&lt;driver&gt;.smudge
</term>
<listitem>
<simpara>
        The command which is used to convert the content of a blob
        object to a worktree file upon checkout.  See
        <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fsck.&lt;msg-id&gt;
</term>
<listitem>
<simpara>
        During fsck git may find issues with legacy data which
        wouldn&#8217;t be generated by current versions of git, and which
        wouldn&#8217;t be sent over the wire if <literal>transfer.fsckObjects</literal> was
        set. This feature is intended to support working with legacy
        repositories containing such data.
</simpara>
<simpara>Setting <literal>fsck.&lt;msg-id&gt;</literal> will be picked up by <citerefentry>
<refentrytitle>git-fsck</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, but
to accept pushes of such data set <literal>receive.fsck.&lt;msg-id&gt;</literal> instead, or
to clone or fetch it set <literal>fetch.fsck.&lt;msg-id&gt;</literal>.</simpara>
<simpara>The rest of the documentation discusses <literal>fsck.*</literal> for brevity, but the
same applies for the corresponding <literal>receive.fsck.*</literal> and
<literal>fetch.&lt;msg-id&gt;.*</literal>. variables.</simpara>
<simpara>Unlike variables like <literal>color.ui</literal> and <literal>core.editor</literal> the
<literal>receive.fsck.&lt;msg-id&gt;</literal> and <literal>fetch.fsck.&lt;msg-id&gt;</literal> variables will not
fall back on the <literal>fsck.&lt;msg-id&gt;</literal> configuration if they aren&#8217;t set. To
uniformly configure the same fsck settings in different circumstances
all three of them they must all set to the same values.</simpara>
<simpara>When <literal>fsck.&lt;msg-id&gt;</literal> is set, errors can be switched to warnings and
vice versa by configuring the <literal>fsck.&lt;msg-id&gt;</literal> setting where the
<literal>&lt;msg-id&gt;</literal> is the fsck message ID and the value is one of <literal>error</literal>,
<literal>warn</literal> or <literal>ignore</literal>. For convenience, fsck prefixes the error/warning
with the message ID, e.g. "missingEmail: invalid author/committer
line - missing email" means that setting <literal>fsck.missingEmail = ignore</literal>
will hide that issue.</simpara>
<simpara>In general, it is better to enumerate existing objects with problems
with <literal>fsck.skipList</literal>, instead of listing the kind of breakages these
problematic objects share to be ignored, as doing the latter will
allow new instances of the same breakages go unnoticed.</simpara>
<simpara>Setting an unknown <literal>fsck.&lt;msg-id&gt;</literal> value will cause fsck to die, but
doing the same for <literal>receive.fsck.&lt;msg-id&gt;</literal> and <literal>fetch.fsck.&lt;msg-id&gt;</literal>
will only cause git to warn.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
fsck.skipList
</term>
<listitem>
<simpara>
        The path to a list of object names (i.e. one unabbreviated SHA-1 per
        line) that are known to be broken in a non-fatal way and should
        be ignored. On versions of Git 2.20 and later comments (<emphasis>#</emphasis>), empty
        lines, and any leading and trailing whitespace is ignored. Everything
        but a SHA-1 per line will error out on older versions.
</simpara>
<simpara>This feature is useful when an established project should be accepted
despite early commits containing errors that can be safely ignored
such as invalid committer email addresses.  Note: corrupt objects
cannot be skipped with this setting.</simpara>
<simpara>Like <literal>fsck.&lt;msg-id&gt;</literal> this variable has corresponding
<literal>receive.fsck.skipList</literal> and <literal>fetch.fsck.skipList</literal> variants.</simpara>
<simpara>Unlike variables like <literal>color.ui</literal> and <literal>core.editor</literal> the
<literal>receive.fsck.skipList</literal> and <literal>fetch.fsck.skipList</literal> variables will not
fall back on the <literal>fsck.skipList</literal> configuration if they aren&#8217;t set. To
uniformly configure the same fsck settings in different circumstances
all three of them they must all set to the same values.</simpara>
<simpara>Older versions of Git (before 2.20) documented that the object names
list should be sorted. This was never a requirement, the object names
could appear in any order, but when reading the list we tracked whether
the list was sorted for the purposes of an internal binary search
implementation, which could save itself some work with an already sorted
list. Unless you had a humongous list there was no reason to go out of
your way to pre-sort the list. After Git version 2.20 a hash implementation
is used instead, so there&#8217;s now no reason to pre-sort the list.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.aggressiveDepth
</term>
<listitem>
<simpara>
        The depth parameter used in the delta compression
        algorithm used by <emphasis>git gc --aggressive</emphasis>.  This defaults
        to 50, which is the default for the <literal>--depth</literal> option when
        <literal>--aggressive</literal> isn&#8217;t in use.
</simpara>
<simpara>See the documentation for the <literal>--depth</literal> option in
<citerefentry>
<refentrytitle>git-repack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.aggressiveWindow
</term>
<listitem>
<simpara>
        The window size parameter used in the delta compression
        algorithm used by <emphasis>git gc --aggressive</emphasis>.  This defaults
        to 250, which is a much more aggressive window size than
        the default <literal>--window</literal> of 10.
</simpara>
<simpara>See the documentation for the <literal>--window</literal> option in
<citerefentry>
<refentrytitle>git-repack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.auto
</term>
<listitem>
<simpara>
        When there are approximately more than this many loose
        objects in the repository, <literal>git gc --auto</literal> will pack them.
        Some Porcelain commands use this command to perform a
        light-weight garbage collection from time to time.  The
        default value is 6700.
</simpara>
<simpara>Setting this to 0 disables not only automatic packing based on the
number of loose objects, but any other heuristic <literal>git gc --auto</literal> will
otherwise use to determine if there&#8217;s work to do, such as
<literal>gc.autoPackLimit</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.autoPackLimit
</term>
<listitem>
<simpara>
        When there are more than this many packs that are not
        marked with <literal>*.keep</literal> file in the repository, <literal>git gc
        --auto</literal> consolidates them into one larger pack.  The
        default value is 50.  Setting this to 0 disables it.
        Setting <literal>gc.auto</literal> to 0 will also disable this.
</simpara>
<simpara>See the <literal>gc.bigPackThreshold</literal> configuration variable below. When in
use, it&#8217;ll affect how the auto pack limit works.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.autoDetach
</term>
<listitem>
<simpara>
        Make <literal>git gc --auto</literal> return immediately and run in background
        if the system supports it. Default is true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.bigPackThreshold
</term>
<listitem>
<simpara>
        If non-zero, all packs larger than this limit are kept when
        <literal>git gc</literal> is run. This is very similar to <literal>--keep-largest-pack</literal>
        except that all packs that meet the threshold are kept, not
        just the largest pack. Defaults to zero. Common unit suffixes of
        <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.
</simpara>
<simpara>Note that if the number of kept packs is more than gc.autoPackLimit,
this configuration variable is ignored, all packs except the base pack
will be repacked. After this the number of packs should go below
gc.autoPackLimit and gc.bigPackThreshold should be respected again.</simpara>
<simpara>If the amount of memory estimated for <literal>git repack</literal> to run smoothly is
not available and <literal>gc.bigPackThreshold</literal> is not set, the largest pack
will also be excluded (this is the equivalent of running <literal>git gc</literal> with
<literal>--keep-largest-pack</literal>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.writeCommitGraph
</term>
<listitem>
<simpara>
        If true, then gc will rewrite the commit-graph file when
        <citerefentry>
<refentrytitle>git-gc</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> is run. When using <literal>git gc --auto</literal>
        the commit-graph will be updated if housekeeping is
        required. Default is true. See <citerefentry>
<refentrytitle>git-commit-graph</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.logExpiry
</term>
<listitem>
<simpara>
        If the file gc.log exists, then <literal>git gc --auto</literal> will print
        its content and exit with status zero instead of running
        unless that file is more than <emphasis>gc.logExpiry</emphasis> old.  Default is
        "1.day".  See <literal>gc.pruneExpire</literal> for more ways to specify its
        value.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.packRefs
</term>
<listitem>
<simpara>
        Running <literal>git pack-refs</literal> in a repository renders it
        unclonable by Git versions prior to 1.5.1.2 over dumb
        transports such as HTTP.  This variable determines whether
        <emphasis>git gc</emphasis> runs <literal>git pack-refs</literal>. This can be set to <literal>notbare</literal>
        to enable it within all non-bare repos or it can be set to a
        boolean value.  The default is <literal>true</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.pruneExpire
</term>
<listitem>
<simpara>
        When <emphasis>git gc</emphasis> is run, it will call <emphasis>prune --expire 2.weeks.ago</emphasis>.
        Override the grace period with this config variable.  The value
        "now" may be used to disable this grace period and always prune
        unreachable objects immediately, or "never" may be used to
        suppress pruning.  This feature helps prevent corruption when
        <emphasis>git gc</emphasis> runs concurrently with another process writing to the
        repository; see the "NOTES" section of <citerefentry>
<refentrytitle>git-gc</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.worktreePruneExpire
</term>
<listitem>
<simpara>
        When <emphasis>git gc</emphasis> is run, it calls
        <emphasis>git worktree prune --expire 3.months.ago</emphasis>.
        This config variable can be used to set a different grace
        period. The value "now" may be used to disable the grace
        period and prune <literal>$GIT_DIR/worktrees</literal> immediately, or "never"
        may be used to suppress pruning.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.reflogExpire
</term>
<term>
gc.&lt;pattern&gt;.reflogExpire
</term>
<listitem>
<simpara>
        <emphasis>git reflog expire</emphasis> removes reflog entries older than
        this time; defaults to 90 days. The value "now" expires all
        entries immediately, and "never" suppresses expiration
        altogether. With "&lt;pattern&gt;" (e.g.
        "refs/stash") in the middle the setting applies only to
        the refs that match the &lt;pattern&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.reflogExpireUnreachable
</term>
<term>
gc.&lt;pattern&gt;.reflogExpireUnreachable
</term>
<listitem>
<simpara>
        <emphasis>git reflog expire</emphasis> removes reflog entries older than
        this time and are not reachable from the current tip;
        defaults to 30 days. The value "now" expires all entries
        immediately, and "never" suppresses expiration altogether.
        With "&lt;pattern&gt;" (e.g. "refs/stash")
        in the middle, the setting applies only to the refs that
        match the &lt;pattern&gt;.
</simpara>
<simpara>These types of entries are generally created as a result of using <literal>git
commit --amend</literal> or <literal>git rebase</literal> and are the commits prior to the amend
or rebase occurring.  Since these changes are not part of the current
project most users will want to expire them sooner, which is why the
default is more aggressive than <literal>gc.reflogExpire</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.rerereResolved
</term>
<listitem>
<simpara>
        Records of conflicted merge you resolved earlier are
        kept for this many days when <emphasis>git rerere gc</emphasis> is run.
        You can also use more human-readable "1.month.ago", etc.
        The default is 60 days.  See <citerefentry>
<refentrytitle>git-rerere</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gc.rerereUnresolved
</term>
<listitem>
<simpara>
        Records of conflicted merge you have not resolved are
        kept for this many days when <emphasis>git rerere gc</emphasis> is run.
        You can also use more human-readable "1.month.ago", etc.
        The default is 15 days.  See <citerefentry>
<refentrytitle>git-rerere</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.commitMsgAnnotation
</term>
<listitem>
<simpara>
        Append this string to each commit message. Set to empty string
        to disable this feature. Defaults to "via git-CVS emulator".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.enabled
</term>
<listitem>
<simpara>
        Whether the CVS server interface is enabled for this repository.
        See <citerefentry>
<refentrytitle>git-cvsserver</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.logFile
</term>
<listitem>
<simpara>
        Path to a log file where the CVS server interface well&#8230; logs
        various stuff. See <citerefentry>
<refentrytitle>git-cvsserver</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.usecrlfattr
</term>
<listitem>
<simpara>
        If true, the server will look up the end-of-line conversion
        attributes for files to determine the <literal>-k</literal> modes to use. If
        the attributes force Git to treat a file as text,
        the <literal>-k</literal> mode will be left blank so CVS clients will
        treat it as text. If they suppress text conversion, the file
        will be set with <emphasis>-kb</emphasis> mode, which suppresses any newline munging
        the client might otherwise do. If the attributes do not allow
        the file type to be determined, then <literal>gitcvs.allBinary</literal> is
        used. See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.allBinary
</term>
<listitem>
<simpara>
        This is used if <literal>gitcvs.usecrlfattr</literal> does not resolve
        the correct <emphasis>-kb</emphasis> mode to use. If true, all
        unresolved files are sent to the client in
        mode <emphasis>-kb</emphasis>. This causes the client to treat them
        as binary files, which suppresses any newline munging it
        otherwise might do. Alternatively, if it is set to "guess",
        then the contents of the file are examined to decide if
        it is binary, similar to <literal>core.autocrlf</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbName
</term>
<listitem>
<simpara>
        Database used by git-cvsserver to cache revision information
        derived from the Git repository. The exact meaning depends on the
        used database driver, for SQLite (which is the default driver) this
        is a filename. Supports variable substitution (see
        <citerefentry>
<refentrytitle>git-cvsserver</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details). May not contain semicolons (<literal>;</literal>).
        Default: <emphasis>%Ggitcvs.%m.sqlite</emphasis>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbDriver
</term>
<listitem>
<simpara>
        Used Perl DBI driver. You can specify any available driver
        for this here, but it might not work. git-cvsserver is tested
        with <emphasis>DBD::SQLite</emphasis>, reported to work with <emphasis>DBD::Pg</emphasis>, and
        reported <emphasis role="strong">not</emphasis> to work with <emphasis>DBD::mysql</emphasis>. Experimental feature.
        May not contain double colons (<literal>:</literal>). Default: <emphasis>SQLite</emphasis>.
        See <citerefentry>
<refentrytitle>git-cvsserver</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbUser, gitcvs.dbPass
</term>
<listitem>
<simpara>
        Database user and password. Only useful if setting <literal>gitcvs.dbDriver</literal>,
        since SQLite has no concept of database users and/or passwords.
        <emphasis>gitcvs.dbUser</emphasis> supports variable substitution (see
        <citerefentry>
<refentrytitle>git-cvsserver</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitcvs.dbTableNamePrefix
</term>
<listitem>
<simpara>
        Database table name prefix.  Prepended to the names of any
        database tables used, allowing a single database to be used
        for several repositories.  Supports variable substitution (see
        <citerefentry>
<refentrytitle>git-cvsserver</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details).  Any non-alphabetic
        characters will be replaced with underscores.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>All gitcvs variables except for <literal>gitcvs.usecrlfattr</literal> and
<literal>gitcvs.allBinary</literal> can also be specified as
<emphasis>gitcvs.&lt;access_method&gt;.&lt;varname&gt;</emphasis> (where <emphasis>access_method</emphasis>
is one of "ext" and "pserver") to make them apply only for the given
access method.</simpara>
<variablelist>
<varlistentry>
<term>
gitweb.category
</term>
<term>
gitweb.description
</term>
<term>
gitweb.owner
</term>
<term>
gitweb.url
</term>
<listitem>
<simpara>
        See <citerefentry>
<refentrytitle>gitweb</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for description.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gitweb.avatar
</term>
<term>
gitweb.blame
</term>
<term>
gitweb.grep
</term>
<term>
gitweb.highlight
</term>
<term>
gitweb.patches
</term>
<term>
gitweb.pickaxe
</term>
<term>
gitweb.remote_heads
</term>
<term>
gitweb.showSizes
</term>
<term>
gitweb.snapshot
</term>
<listitem>
<simpara>
        See <citerefentry>
<refentrytitle>gitweb.conf</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for description.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.lineNumber
</term>
<listitem>
<simpara>
        If set to true, enable <literal>-n</literal> option by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.column
</term>
<listitem>
<simpara>
        If set to true, enable the <literal>--column</literal> option by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.patternType
</term>
<listitem>
<simpara>
        Set the default matching behavior. Using a value of <emphasis>basic</emphasis>, <emphasis>extended</emphasis>,
        <emphasis>fixed</emphasis>, or <emphasis>perl</emphasis> will enable the <literal>--basic-regexp</literal>, <literal>--extended-regexp</literal>,
        <literal>--fixed-strings</literal>, or <literal>--perl-regexp</literal> option accordingly, while the
        value <emphasis>default</emphasis> will return to the default matching behavior.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.extendedRegexp
</term>
<listitem>
<simpara>
        If set to true, enable <literal>--extended-regexp</literal> option by default. This
        option is ignored when the <literal>grep.patternType</literal> option is set to a value
        other than <emphasis>default</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.threads
</term>
<listitem>
<simpara>
        Number of grep worker threads to use.
        See <literal>grep.threads</literal> in <citerefentry>
<refentrytitle>git-grep</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
grep.fallbackToNoIndex
</term>
<listitem>
<simpara>
        If set to true, fall back to git grep --no-index if git grep
        is executed outside of a git repository.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.program
</term>
<listitem>
<simpara>
        Use this custom program instead of "<literal>gpg</literal>" found on <literal>$PATH</literal> when
        making or verifying a PGP signature. The program must support the
        same command-line interface as GPG, namely, to verify a detached
        signature, "<literal>gpg --verify $signature - &lt;$file</literal>" is run, and the
        program is expected to signal a good signature by exiting with
        code 0, and to generate an ASCII-armored detached signature, the
        standard input of "<literal>gpg -bsau $key</literal>" is fed with the contents to be
        signed, and the program is expected to send the result to its
        standard output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.format
</term>
<listitem>
<simpara>
        Specifies which key format to use when signing with <literal>--gpg-sign</literal>.
        Default is "openpgp". Other possible values are "x509", "ssh".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.&lt;format&gt;.program
</term>
<listitem>
<simpara>
        Use this to customize the program used for the signing format you
        chose. (see <literal>gpg.program</literal> and <literal>gpg.format</literal>) <literal>gpg.program</literal> can still
        be used as a legacy synonym for <literal>gpg.openpgp.program</literal>. The default
        value for <literal>gpg.x509.program</literal> is "gpgsm" and <literal>gpg.ssh.program</literal> is "ssh-keygen".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.minTrustLevel
</term>
<listitem>
<simpara>
        Specifies a minimum trust level for signature verification.  If
        this option is unset, then signature verification for merge
        operations require a key with at least <literal>marginal</literal> trust.  Other
        operations that perform signature verification require a key
        with at least <literal>undefined</literal> trust.  Setting this option overrides
        the required trust-level for all operations.  Supported values,
        in increasing order of significance:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>undefined</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>never</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>marginal</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>fully</literal>
</simpara>
</listitem>
<listitem>
<simpara>
<literal>ultimate</literal>
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<simpara>gpg.ssh.defaultKeyCommand:
        This command that will be run when user.signingkey is not set and a ssh
        signature is requested. On successful exit a valid ssh public key is
        expected in the first line of its output. To automatically use the first
        available key from your ssh-agent set this to "ssh-add -L".</simpara>
<variablelist>
<varlistentry>
<term>
gpg.ssh.allowedSignersFile
</term>
<listitem>
<simpara>
        A file containing ssh public keys which you are willing to trust.
        The file consists of one or more lines of principals followed by an ssh
        public key.
        e.g.: <ulink url="mailto:user1@example.com">user1@example.com</ulink>,<ulink url="mailto:user2@example.com">user2@example.com</ulink> ssh-rsa AAAAX1&#8230;
        See ssh-keygen(1) "ALLOWED SIGNERS" for details.
        The principal is only used to identify the key and is available when
        verifying a signature.
</simpara>
<simpara>SSH has no concept of trust levels like gpg does. To be able to differentiate
between valid signatures and trusted signatures the trust level of a signature
verification is set to <literal>fully</literal> when the public key is present in the allowedSignersFile.
Otherwise the trust level is <literal>undefined</literal> and git verify-commit/tag will fail.</simpara>
<simpara>This file can be set to a location outside of the repository and every developer
maintains their own trust store. A central repository server could generate this
file automatically from ssh keys with push access to verify the code against.
In a corporate setting this file is probably generated at a global location
from automation that already handles developer ssh keys.</simpara>
<simpara>A repository that only allows signed commits can store the file
in the repository itself using a path relative to the top-level of the working tree.
This way only committers with an already valid key can add or change keys in the keyring.</simpara>
<simpara>Using a SSH CA key with the cert-authority option
(see ssh-keygen(1) "CERTIFICATES") is also valid.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gpg.ssh.revocationFile
</term>
<listitem>
<simpara>
        Either a SSH KRL or a list of revoked public keys (without the principal prefix).
        See ssh-keygen(1) for details.
        If a public key is found in this file then it will always be treated
        as having trust level "never" and signatures will show as invalid.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.commitMsgWidth
</term>
<listitem>
<simpara>
        Defines how wide the commit message window is in the
        <citerefentry>
<refentrytitle>git-gui</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. "75" is the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.diffContext
</term>
<listitem>
<simpara>
        Specifies how many context lines should be used in calls to diff
        made by the <citerefentry>
<refentrytitle>git-gui</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. The default is "5".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.displayUntracked
</term>
<listitem>
<simpara>
        Determines if <citerefentry>
<refentrytitle>git-gui</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> shows untracked files
        in the file list. The default is "true".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.encoding
</term>
<listitem>
<simpara>
        Specifies the default character encoding to use for displaying of
        file contents in <citerefentry>
<refentrytitle>git-gui</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <citerefentry>
<refentrytitle>gitk</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        It can be overridden by setting the <emphasis>encoding</emphasis> attribute
        for relevant files (see <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>).
        If this option is not set, the tools default to the
        locale encoding.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.matchTrackingBranch
</term>
<listitem>
<simpara>
        Determines if new branches created with <citerefentry>
<refentrytitle>git-gui</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> should
        default to tracking remote branches with matching names or
        not. Default: "false".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.newBranchTemplate
</term>
<listitem>
<simpara>
        Is used as suggested name when creating new branches using the
        <citerefentry>
<refentrytitle>git-gui</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.pruneDuringFetch
</term>
<listitem>
<simpara>
        "true" if <citerefentry>
<refentrytitle>git-gui</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> should prune remote-tracking branches when
        performing a fetch. The default value is "false".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.trustmtime
</term>
<listitem>
<simpara>
        Determines if <citerefentry>
<refentrytitle>git-gui</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> should trust the file modification
        timestamp or not. By default the timestamps are not trusted.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.spellingDictionary
</term>
<listitem>
<simpara>
        Specifies the dictionary used for spell checking commit messages in
        the <citerefentry>
<refentrytitle>git-gui</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. When set to "none" spell checking is turned
        off.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.fastCopyBlame
</term>
<listitem>
<simpara>
        If true, <emphasis>git gui blame</emphasis> uses <literal>-C</literal> instead of <literal>-C -C</literal> for original
        location detection. It makes blame significantly faster on huge
        repositories at the expense of less thorough copy detection.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.copyBlameThreshold
</term>
<listitem>
<simpara>
        Specifies the threshold to use in <emphasis>git gui blame</emphasis> original location
        detection, measured in alphanumeric characters. See the
        <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> manual for more information on copy detection.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
gui.blamehistoryctx
</term>
<listitem>
<simpara>
        Specifies the radius of history context in days to show in
        <citerefentry>
<refentrytitle>gitk</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for the selected commit, when the <literal>Show History
        Context</literal> menu item is invoked from <emphasis>git gui blame</emphasis>. If this
        variable is set to zero, the whole history is shown.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.cmd
</term>
<listitem>
<simpara>
        Specifies the shell command line to execute when the corresponding item
        of the <citerefentry>
<refentrytitle>git-gui</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> <literal>Tools</literal> menu is invoked. This option is
        mandatory for every tool. The command is executed from the root of
        the working directory, and in the environment it receives the name of
        the tool as <literal>GIT_GUITOOL</literal>, the name of the currently selected file as
        <emphasis>FILENAME</emphasis>, and the name of the current branch as <emphasis>CUR_BRANCH</emphasis> (if
        the head is detached, <emphasis>CUR_BRANCH</emphasis> is empty).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.needsFile
</term>
<listitem>
<simpara>
        Run the tool only if a diff is selected in the GUI. It guarantees
        that <emphasis>FILENAME</emphasis> is not empty.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.noConsole
</term>
<listitem>
<simpara>
        Run the command silently, without creating a window to display its
        output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.noRescan
</term>
<listitem>
<simpara>
        Don&#8217;t rescan the working directory for changes after the tool
        finishes execution.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.confirm
</term>
<listitem>
<simpara>
        Show a confirmation dialog before actually running the tool.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.argPrompt
</term>
<listitem>
<simpara>
        Request a string argument from the user, and pass it to the tool
        through the <literal>ARGS</literal> environment variable. Since requesting an
        argument implies confirmation, the <emphasis>confirm</emphasis> option has no effect
        if this is enabled. If the option is set to <emphasis>true</emphasis>, <emphasis>yes</emphasis>, or <emphasis>1</emphasis>,
        the dialog uses a built-in generic prompt; otherwise the exact
        value of the variable is used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.revPrompt
</term>
<listitem>
<simpara>
        Request a single valid revision from the user, and set the
        <literal>REVISION</literal> environment variable. In other aspects this option
        is similar to <emphasis>argPrompt</emphasis>, and can be used together with it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.revUnmerged
</term>
<listitem>
<simpara>
        Show only unmerged branches in the <emphasis>revPrompt</emphasis> subdialog.
        This is useful for tools similar to merge or rebase, but not
        for things like checkout or reset.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.title
</term>
<listitem>
<simpara>
        Specifies the title to use for the prompt dialog. The default
        is the tool name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
guitool.&lt;name&gt;.prompt
</term>
<listitem>
<simpara>
        Specifies the general prompt string to display at the top of
        the dialog, before subsections for <emphasis>argPrompt</emphasis> and <emphasis>revPrompt</emphasis>.
        The default value includes the actual command.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
help.browser
</term>
<listitem>
<simpara>
        Specify the browser that will be used to display help in the
        <emphasis>web</emphasis> format. See <citerefentry>
<refentrytitle>git-help</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
help.format
</term>
<listitem>
<simpara>
        Override the default help format used by <citerefentry>
<refentrytitle>git-help</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        Values <emphasis>man</emphasis>, <emphasis>info</emphasis>, <emphasis>web</emphasis> and <emphasis>html</emphasis> are supported. <emphasis>man</emphasis> is
        the default. <emphasis>web</emphasis> and <emphasis>html</emphasis> are the same.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
help.autoCorrect
</term>
<listitem>
<simpara>
        If git detects typos and can identify exactly one valid command similar
        to the error, git will try to suggest the correct command or even
        run the suggestion automatically. Possible config values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
0 (default): show the suggested command.
</simpara>
</listitem>
<listitem>
<simpara>
positive number: run the suggested command after specified
deciseconds (0.1 sec).
</simpara>
</listitem>
<listitem>
<simpara>
"immediate": run the suggested command immediately.
</simpara>
</listitem>
<listitem>
<simpara>
"prompt": show the suggestion and prompt for confirmation to run
the command.
</simpara>
</listitem>
<listitem>
<simpara>
"never": don&#8217;t run or show any suggested command.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
help.htmlPath
</term>
<listitem>
<simpara>
        Specify the path where the HTML documentation resides. File system paths
        and URLs are supported. HTML pages will be prefixed with this path when
        help is displayed in the <emphasis>web</emphasis> format. This defaults to the documentation
        path of your Git installation.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxy
</term>
<listitem>
<simpara>
        Override the HTTP proxy, normally configured using the <emphasis>http_proxy</emphasis>,
        <emphasis>https_proxy</emphasis>, and <emphasis>all_proxy</emphasis> environment variables (see <literal>curl(1)</literal>). In
        addition to the syntax understood by curl, it is possible to specify a
        proxy string with a user name but no password, in which case git will
        attempt to acquire one in the same way it does for other credentials. See
        <citerefentry>
<refentrytitle>gitcredentials</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> for more information. The syntax thus is
        <emphasis>[protocol://][user[:password]@]proxyhost[:port]</emphasis>. This can be overridden
        on a per-remote basis; see remote.&lt;name&gt;.proxy
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxyAuthMethod
</term>
<listitem>
<simpara>
        Set the method with which to authenticate against the HTTP proxy. This
        only takes effect if the configured proxy string contains a user name part
        (i.e. is of the form <emphasis>user@host</emphasis> or <emphasis>user@host:port</emphasis>). This can be
        overridden on a per-remote basis; see <literal>remote.&lt;name&gt;.proxyAuthMethod</literal>.
        Both can be overridden by the <literal>GIT_HTTP_PROXY_AUTHMETHOD</literal> environment
        variable.  Possible values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>anyauth</literal> - Automatically pick a suitable authentication method. It is
  assumed that the proxy answers an unauthenticated request with a 407
  status code and one or more Proxy-authenticate headers with supported
  authentication methods. This is the default.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>basic</literal> - HTTP Basic authentication
</simpara>
</listitem>
<listitem>
<simpara>
<literal>digest</literal> - HTTP Digest authentication; this prevents the password from being
  transmitted to the proxy in clear text
</simpara>
</listitem>
<listitem>
<simpara>
<literal>negotiate</literal> - GSS-Negotiate authentication (compare the --negotiate option
  of <literal>curl(1)</literal>)
</simpara>
</listitem>
<listitem>
<simpara>
<literal>ntlm</literal> - NTLM authentication (compare the --ntlm option of <literal>curl(1)</literal>)
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxySSLCert
</term>
<listitem>
<simpara>
        The pathname of a file that stores a client certificate to use to authenticate
        with an HTTPS proxy. Can be overridden by the <literal>GIT_PROXY_SSL_CERT</literal> environment
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxySSLKey
</term>
<listitem>
<simpara>
        The pathname of a file that stores a private key to use to authenticate with
        an HTTPS proxy. Can be overridden by the <literal>GIT_PROXY_SSL_KEY</literal> environment
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxySSLCertPasswordProtected
</term>
<listitem>
<simpara>
        Enable Git&#8217;s password prompt for the proxy SSL certificate.  Otherwise OpenSSL
        will prompt the user, possibly many times, if the certificate or private key
        is encrypted. Can be overridden by the <literal>GIT_PROXY_SSL_CERT_PASSWORD_PROTECTED</literal>
        environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.proxySSLCAInfo
</term>
<listitem>
<simpara>
        Pathname to the file containing the certificate bundle that should be used to
        verify the proxy with when using an HTTPS proxy. Can be overridden by the
        <literal>GIT_PROXY_SSL_CAINFO</literal> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.emptyAuth
</term>
<listitem>
<simpara>
        Attempt authentication without seeking a username or password.  This
        can be used to attempt GSS-Negotiate authentication without specifying
        a username in the URL, as libcurl normally requires a username for
        authentication.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.delegation
</term>
<listitem>
<simpara>
        Control GSSAPI credential delegation. The delegation is disabled
        by default in libcurl since version 7.21.7. Set parameter to tell
        the server what it is allowed to delegate when it comes to user
        credentials. Used with GSS/kerberos. Possible values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>none</literal> - Don&#8217;t allow any delegation.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>policy</literal> - Delegates if and only if the OK-AS-DELEGATE flag is set in the
  Kerberos service ticket, which is a matter of realm policy.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>always</literal> - Unconditionally allow the server to delegate.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.extraHeader
</term>
<listitem>
<simpara>
        Pass an additional HTTP header when communicating with a server.  If
        more than one such entry exists, all of them are added as extra
        headers.  To allow overriding the settings inherited from the system
        config, an empty value will reset the extra headers to the empty list.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.cookieFile
</term>
<listitem>
<simpara>
        The pathname of a file containing previously stored cookie lines,
        which should be used
        in the Git http session, if they match the server. The file format
        of the file to read cookies from should be plain HTTP headers or
        the Netscape/Mozilla cookie file format (see <literal>curl(1)</literal>).
        NOTE that the file specified with http.cookieFile is used only as
        input unless http.saveCookies is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.saveCookies
</term>
<listitem>
<simpara>
        If set, store cookies received during requests to the file specified by
        http.cookieFile. Has no effect if http.cookieFile is unset.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.version
</term>
<listitem>
<simpara>
        Use the specified HTTP protocol version when communicating with a server.
        If you want to force the default. The available and default version depend
        on libcurl. Currently the possible values of
        this option are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
HTTP/2
</simpara>
</listitem>
<listitem>
<simpara>
HTTP/1.1
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslVersion
</term>
<listitem>
<simpara>
        The SSL version to use when negotiating an SSL connection, if you
        want to force the default.  The available and default version
        depend on whether libcurl was built against NSS or OpenSSL and the
        particular configuration of the crypto library in use. Internally
        this sets the <emphasis>CURLOPT_SSL_VERSION</emphasis> option; see the libcurl
        documentation for more details on the format of this option and
        for the ssl version supported. Currently the possible values of
        this option are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
sslv2
</simpara>
</listitem>
<listitem>
<simpara>
sslv3
</simpara>
</listitem>
<listitem>
<simpara>
tlsv1
</simpara>
</listitem>
<listitem>
<simpara>
tlsv1.0
</simpara>
</listitem>
<listitem>
<simpara>
tlsv1.1
</simpara>
</listitem>
<listitem>
<simpara>
tlsv1.2
</simpara>
</listitem>
<listitem>
<simpara>
tlsv1.3
</simpara>
</listitem>
</itemizedlist>
<simpara>Can be overridden by the <literal>GIT_SSL_VERSION</literal> environment variable.
To force git to use libcurl&#8217;s default ssl version and ignore any
explicit http.sslversion option, set <literal>GIT_SSL_VERSION</literal> to the
empty string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCipherList
</term>
<listitem>
<simpara>
  A list of SSL ciphers to use when negotiating an SSL connection.
  The available ciphers depend on whether libcurl was built against
  NSS or OpenSSL and the particular configuration of the crypto
  library in use.  Internally this sets the <emphasis>CURLOPT_SSL_CIPHER_LIST</emphasis>
  option; see the libcurl documentation for more details on the format
  of this list.
</simpara>
<simpara>Can be overridden by the <literal>GIT_SSL_CIPHER_LIST</literal> environment variable.
To force git to use libcurl&#8217;s default cipher list and ignore any
explicit http.sslCipherList option, set <literal>GIT_SSL_CIPHER_LIST</literal> to the
empty string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslVerify
</term>
<listitem>
<simpara>
        Whether to verify the SSL certificate when fetching or pushing
        over HTTPS. Defaults to true. Can be overridden by the
        <literal>GIT_SSL_NO_VERIFY</literal> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCert
</term>
<listitem>
<simpara>
        File containing the SSL certificate when fetching or pushing
        over HTTPS. Can be overridden by the <literal>GIT_SSL_CERT</literal> environment
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslKey
</term>
<listitem>
<simpara>
        File containing the SSL private key when fetching or pushing
        over HTTPS. Can be overridden by the <literal>GIT_SSL_KEY</literal> environment
        variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCertPasswordProtected
</term>
<listitem>
<simpara>
        Enable Git&#8217;s password prompt for the SSL certificate.  Otherwise
        OpenSSL will prompt the user, possibly many times, if the
        certificate or private key is encrypted.  Can be overridden by the
        <literal>GIT_SSL_CERT_PASSWORD_PROTECTED</literal> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCAInfo
</term>
<listitem>
<simpara>
        File containing the certificates to verify the peer with when
        fetching or pushing over HTTPS. Can be overridden by the
        <literal>GIT_SSL_CAINFO</literal> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslCAPath
</term>
<listitem>
<simpara>
        Path containing files with the CA certificates to verify the peer
        with when fetching or pushing over HTTPS. Can be overridden
        by the <literal>GIT_SSL_CAPATH</literal> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslBackend
</term>
<listitem>
<simpara>
        Name of the SSL backend to use (e.g. "openssl" or "schannel").
        This option is ignored if cURL lacks support for choosing the SSL
        backend at runtime.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.schannelCheckRevoke
</term>
<listitem>
<simpara>
        Used to enforce or disable certificate revocation checks in cURL
        when http.sslBackend is set to "schannel". Defaults to <literal>true</literal> if
        unset. Only necessary to disable this if Git consistently errors
        and the message is about checking the revocation status of a
        certificate. This option is ignored if cURL lacks support for
        setting the relevant SSL option at runtime.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.schannelUseSSLCAInfo
</term>
<listitem>
<simpara>
        As of cURL v7.60.0, the Secure Channel backend can use the
        certificate bundle provided via <literal>http.sslCAInfo</literal>, but that would
        override the Windows Certificate Store. Since this is not desirable
        by default, Git will tell cURL not to use that bundle by default
        when the <literal>schannel</literal> backend was configured via <literal>http.sslBackend</literal>,
        unless <literal>http.schannelUseSSLCAInfo</literal> overrides this behavior.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.pinnedpubkey
</term>
<listitem>
<simpara>
        Public key of the https service. It may either be the filename of
        a PEM or DER encoded public key file or a string starting with
        <emphasis>sha256//</emphasis> followed by the base64 encoded sha256 hash of the
        public key. See also libcurl <emphasis>CURLOPT_PINNEDPUBLICKEY</emphasis>. git will
        exit with an error if this option is set but not supported by
        cURL.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.sslTry
</term>
<listitem>
<simpara>
        Attempt to use AUTH SSL/TLS and encrypted data transfers
        when connecting via regular FTP protocol. This might be needed
        if the FTP server requires it for security reasons or you wish
        to connect securely whenever remote FTP server supports it.
        Default is false since it might trigger certificate verification
        errors on misconfigured servers.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.maxRequests
</term>
<listitem>
<simpara>
        How many HTTP requests to launch in parallel. Can be overridden
        by the <literal>GIT_HTTP_MAX_REQUESTS</literal> environment variable. Default is 5.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.minSessions
</term>
<listitem>
<simpara>
        The number of curl sessions (counted across slots) to be kept across
        requests. They will not be ended with curl_easy_cleanup() until
        http_cleanup() is invoked. If USE_CURL_MULTI is not defined, this
        value will be capped at 1. Defaults to 1.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.postBuffer
</term>
<listitem>
<simpara>
        Maximum size in bytes of the buffer used by smart HTTP
        transports when POSTing data to the remote system.
        For requests larger than this buffer size, HTTP/1.1 and
        Transfer-Encoding: chunked is used to avoid creating a
        massive pack file locally.  Default is 1 MiB, which is
        sufficient for most requests.
</simpara>
<simpara>Note that raising this limit is only effective for disabling chunked
transfer encoding and therefore should be used only where the remote
server or a proxy only supports HTTP/1.0 or is noncompliant with the
HTTP standard.  Raising this is not, in general, an effective solution
for most push problems, but can increase memory consumption
significantly since the entire buffer is allocated even for small
pushes.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.lowSpeedLimit, http.lowSpeedTime
</term>
<listitem>
<simpara>
        If the HTTP transfer speed is less than <emphasis>http.lowSpeedLimit</emphasis>
        for longer than <emphasis>http.lowSpeedTime</emphasis> seconds, the transfer is aborted.
        Can be overridden by the <literal>GIT_HTTP_LOW_SPEED_LIMIT</literal> and
        <literal>GIT_HTTP_LOW_SPEED_TIME</literal> environment variables.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.noEPSV
</term>
<listitem>
<simpara>
        A boolean which disables using of EPSV ftp command by curl.
        This can helpful with some "poor" ftp servers which don&#8217;t
        support EPSV mode. Can be overridden by the <literal>GIT_CURL_FTP_NO_EPSV</literal>
        environment variable. Default is false (curl will use EPSV).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.userAgent
</term>
<listitem>
<simpara>
        The HTTP USER_AGENT string presented to an HTTP server.  The default
        value represents the version of the client Git such as git/1.7.1.
        This option allows you to override this value to a more common value
        such as Mozilla/4.0.  This may be necessary, for instance, if
        connecting through a firewall that restricts HTTP connections to a set
        of common USER_AGENT strings (but not including those like git/1.7.1).
        Can be overridden by the <literal>GIT_HTTP_USER_AGENT</literal> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.followRedirects
</term>
<listitem>
<simpara>
        Whether git should follow HTTP redirects. If set to <literal>true</literal>, git
        will transparently follow any redirect issued by a server it
        encounters. If set to <literal>false</literal>, git will treat all redirects as
        errors. If set to <literal>initial</literal>, git will follow redirects only for
        the initial request to a remote, but not for subsequent
        follow-up HTTP requests. Since git uses the redirected URL as
        the base for the follow-up requests, this is generally
        sufficient. The default is <literal>initial</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.&lt;url&gt;.*
</term>
<listitem>
<simpara>
        Any of the http.* options above can be applied selectively to some URLs.
        For a config key to match a URL, each element of the config key is
        compared to that of the URL, in the following order:
</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Scheme (e.g., <literal>https</literal> in <literal>https://example.com/</literal>). This field
  must match exactly between the config key and the URL.
</simpara>
</listitem>
<listitem>
<simpara>
Host/domain name (e.g., <literal>example.com</literal> in <literal>https://example.com/</literal>).
  This field must match between the config key and the URL. It is
  possible to specify a <literal>*</literal> as part of the host name to match all subdomains
  at this level. <literal>https://*.example.com/</literal> for example would match
  <literal>https://foo.example.com/</literal>, but not <literal>https://foo.bar.example.com/</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
Port number (e.g., <literal>8080</literal> in <literal>http://example.com:8080/</literal>).
  This field must match exactly between the config key and the URL.
  Omitted port numbers are automatically converted to the correct
  default for the scheme before matching.
</simpara>
</listitem>
<listitem>
<simpara>
Path (e.g., <literal>repo.git</literal> in <literal>https://example.com/repo.git</literal>). The
  path field of the config key must match the path field of the URL
  either exactly or as a prefix of slash-delimited path elements.  This means
  a config key with path <literal>foo/</literal> matches URL path <literal>foo/bar</literal>.  A prefix can only
  match on a slash (<literal>/</literal>) boundary.  Longer matches take precedence (so a config
  key with path <literal>foo/bar</literal> is a better match to URL path <literal>foo/bar</literal> than a config
  key with just path <literal>foo/</literal>).
</simpara>
</listitem>
<listitem>
<simpara>
User name (e.g., <literal>user</literal> in <literal>https://user@example.com/repo.git</literal>). If
  the config key has a user name it must match the user name in the
  URL exactly. If the config key does not have a user name, that
  config key will match a URL with any user name (including none),
  but at a lower precedence than a config key with a user name.
</simpara>
</listitem>
</orderedlist>
<simpara>The list above is ordered by decreasing precedence; a URL that matches
a config key&#8217;s path is preferred to one that matches its user name. For example,
if the URL is <literal>https://user@example.com/foo/bar</literal> a config key match of
<literal>https://example.com/foo</literal> will be preferred over a config key match of
<literal>https://user@example.com</literal>.</simpara>
<simpara>All URLs are normalized before attempting any matching (the password part,
if embedded in the URL, is always ignored for matching purposes) so that
equivalent URLs that are simply spelled differently will match properly.
Environment variable settings always override any matches.  The URLs that are
matched against are those given directly to Git commands.  This means any URLs
visited as a result of a redirection do not participate in matching.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
i18n.commitEncoding
</term>
<listitem>
<simpara>
        Character encoding the commit messages are stored in; Git itself
        does not care per se, but this information is necessary e.g. when
        importing commits from emails or in the gitk graphical history
        browser (and possibly at other places in the future or in other
        porcelains). See e.g. <citerefentry>
<refentrytitle>git-mailinfo</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. Defaults to <emphasis>utf-8</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
i18n.logOutputEncoding
</term>
<listitem>
<simpara>
        Character encoding the commit messages are converted to when
        running <emphasis>git log</emphasis> and friends.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.folder
</term>
<listitem>
<simpara>
        The folder to drop the mails into, which is typically the Drafts
        folder. For example: "INBOX.Drafts", "INBOX/Drafts" or
        "[Gmail]/Drafts". Required.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.tunnel
</term>
<listitem>
<simpara>
        Command used to setup a tunnel to the IMAP server through which
        commands will be piped instead of using a direct network connection
        to the server. Required when imap.host is not set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.host
</term>
<listitem>
<simpara>
        A URL identifying the server. Use an <literal>imap://</literal> prefix for non-secure
        connections and an <literal>imaps://</literal> prefix for secure connections.
        Ignored when imap.tunnel is set, but required otherwise.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.user
</term>
<listitem>
<simpara>
        The username to use when logging in to the server.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.pass
</term>
<listitem>
<simpara>
        The password to use when logging in to the server.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.port
</term>
<listitem>
<simpara>
        An integer port number to connect to on the server.
        Defaults to 143 for imap:// hosts and 993 for imaps:// hosts.
        Ignored when imap.tunnel is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.sslverify
</term>
<listitem>
<simpara>
        A boolean to enable/disable verification of the server certificate
        used by the SSL/TLS connection. Default is <literal>true</literal>. Ignored when
        imap.tunnel is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.preformattedHTML
</term>
<listitem>
<simpara>
        A boolean to enable/disable the use of html encoding when sending
        a patch.  An html encoded patch will be bracketed with &lt;pre&gt;
        and have a content type of text/html.  Ironically, enabling this
        option causes Thunderbird to send the patch as a plain/text,
        format=fixed email.  Default is <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.authMethod
</term>
<listitem>
<simpara>
        Specify authenticate method for authentication with IMAP server.
        If Git was built with the NO_CURL option, or if your curl version is older
        than 7.34.0, or if you&#8217;re running git-imap-send with the <literal>--no-curl</literal>
        option, the only supported method is <emphasis>CRAM-MD5</emphasis>. If this is not set
        then <emphasis>git imap-send</emphasis> uses the basic IMAP plaintext LOGIN command.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index.recordEndOfIndexEntries
</term>
<listitem>
<simpara>
        Specifies whether the index file should include an "End Of Index
        Entry" section. This reduces index load time on multiprocessor
        machines but produces a message "ignoring EOIE extension" when
        reading the index using Git versions before 2.20. Defaults to
        <emphasis>true</emphasis> if index.threads has been explicitly enabled, <emphasis>false</emphasis>
        otherwise.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index.recordOffsetTable
</term>
<listitem>
<simpara>
        Specifies whether the index file should include an "Index Entry
        Offset Table" section. This reduces index load time on
        multiprocessor machines but produces a message "ignoring IEOT
        extension" when reading the index using Git versions before 2.20.
        Defaults to <emphasis>true</emphasis> if index.threads has been explicitly enabled,
        <emphasis>false</emphasis> otherwise.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index.sparse
</term>
<listitem>
<simpara>
        When enabled, write the index using sparse-directory entries. This
        has no effect unless <literal>core.sparseCheckout</literal> and
        <literal>core.sparseCheckoutCone</literal> are both enabled. Defaults to <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index.threads
</term>
<listitem>
<simpara>
        Specifies the number of threads to spawn when loading the index.
        This is meant to reduce index load time on multiprocessor machines.
        Specifying 0 or <emphasis>true</emphasis> will cause Git to auto-detect the number of
        CPU&#8217;s and set the number of threads accordingly. Specifying 1 or
        <emphasis>false</emphasis> will disable multithreading. Defaults to <emphasis>true</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index.version
</term>
<listitem>
<simpara>
        Specify the version with which new index files should be
        initialized.  This does not affect existing repositories.
        If <literal>feature.manyFiles</literal> is enabled, then the default is 4.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
init.templateDir
</term>
<listitem>
<simpara>
        Specify the directory from which templates will be copied.
        (See the "TEMPLATE DIRECTORY" section of <citerefentry>
<refentrytitle>git-init</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
init.defaultBranch
</term>
<listitem>
<simpara>
        Allows overriding the default branch name e.g. when initializing
        a new repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.browser
</term>
<listitem>
<simpara>
        Specify the program that will be used to browse your working
        repository in gitweb. See <citerefentry>
<refentrytitle>git-instaweb</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.httpd
</term>
<listitem>
<simpara>
        The HTTP daemon command-line to start gitweb on your working
        repository. See <citerefentry>
<refentrytitle>git-instaweb</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.local
</term>
<listitem>
<simpara>
        If true the web server started by <citerefentry>
<refentrytitle>git-instaweb</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> will
        be bound to the local IP (127.0.0.1).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.modulePath
</term>
<listitem>
<simpara>
        The default module path for <citerefentry>
<refentrytitle>git-instaweb</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> to use
        instead of /usr/lib/apache2/modules.  Only used if httpd
        is Apache.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
instaweb.port
</term>
<listitem>
<simpara>
        The port number to bind the gitweb httpd to. See
        <citerefentry>
<refentrytitle>git-instaweb</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
interactive.singleKey
</term>
<listitem>
<simpara>
        In interactive commands, allow the user to provide one-letter
        input with a single key (i.e., without hitting enter).
        Currently this is used by the <literal>--patch</literal> mode of
        <citerefentry>
<refentrytitle>git-add</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
        <citerefentry>
<refentrytitle>git-restore</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
        <citerefentry>
<refentrytitle>git-reset</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, and <citerefentry>
<refentrytitle>git-stash</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. Note that this
        setting is silently ignored if portable keystroke input
        is not available; requires the Perl module Term::ReadKey.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
interactive.diffFilter
</term>
<listitem>
<simpara>
        When an interactive command (such as <literal>git add --patch</literal>) shows
        a colorized diff, git will pipe the diff through the shell
        command defined by this configuration variable. The command may
        mark up the diff further for human consumption, provided that it
        retains a one-to-one correspondence with the lines in the
        original diff. Defaults to disabled (no filtering).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.abbrevCommit
</term>
<listitem>
<simpara>
        If true, makes <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-show</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, and
        <citerefentry>
<refentrytitle>git-whatchanged</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> assume <literal>--abbrev-commit</literal>. You may
        override this option with <literal>--no-abbrev-commit</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.date
</term>
<listitem>
<simpara>
        Set the default date-time mode for the <emphasis>log</emphasis> command.
        Setting a value for log.date is similar to using <emphasis>git log</emphasis>'s
        <literal>--date</literal> option.  See <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.decorate
</term>
<listitem>
<simpara>
        Print out the ref names of any commits that are shown by the log
        command. If <emphasis>short</emphasis> is specified, the ref name prefixes <emphasis>refs/heads/</emphasis>,
        <emphasis>refs/tags/</emphasis> and <emphasis>refs/remotes/</emphasis> will not be printed. If <emphasis>full</emphasis> is
        specified, the full ref name (including prefix) will be printed.
        If <emphasis>auto</emphasis> is specified, then if the output is going to a terminal,
        the ref names are shown as if <emphasis>short</emphasis> were given, otherwise no ref
        names are shown. This is the same as the <literal>--decorate</literal> option
        of the <literal>git log</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.excludeDecoration
</term>
<listitem>
<simpara>
        Exclude the specified patterns from the log decorations. This is
        similar to the <literal>--decorate-refs-exclude</literal> command-line option, but
        the config option can be overridden by the <literal>--decorate-refs</literal>
        option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.diffMerges
</term>
<listitem>
<simpara>
        Set default diff format to be used for merge commits. See
        <literal>--diff-merges</literal> in <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.
        Defaults to <literal>separate</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.follow
</term>
<listitem>
<simpara>
        If <literal>true</literal>, <literal>git log</literal> will act as if the <literal>--follow</literal> option was used when
        a single &lt;path&gt; is given.  This has the same limitations as <literal>--follow</literal>,
        i.e. it cannot be used to follow multiple files and does not work well
        on non-linear history.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.graphColors
</term>
<listitem>
<simpara>
        A list of colors, separated by commas, that can be used to draw
        history lines in <literal>git log --graph</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.showRoot
</term>
<listitem>
<simpara>
        If true, the initial commit will be shown as a big creation event.
        This is equivalent to a diff against an empty tree.
        Tools like <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-whatchanged</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, which
        normally hide the root commit will now show it. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.showSignature
</term>
<listitem>
<simpara>
        If true, makes <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-show</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, and
        <citerefentry>
<refentrytitle>git-whatchanged</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> assume <literal>--show-signature</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
log.mailmap
</term>
<listitem>
<simpara>
        If true, makes <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>git-show</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, and
        <citerefentry>
<refentrytitle>git-whatchanged</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> assume <literal>--use-mailmap</literal>, otherwise
        assume <literal>--no-use-mailmap</literal>. True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
lsrefs.unborn
</term>
<listitem>
<simpara>
        May be "advertise" (the default), "allow", or "ignore". If "advertise",
        the server will respond to the client sending "unborn" (as described in
        protocol-v2.txt) and will advertise support for this feature during the
        protocol v2 capability advertisement. "allow" is the same as
        "advertise" except that the server will not advertise support for this
        feature; this is useful for load-balanced servers that cannot be
        updated atomically (for example), since the administrator could
        configure "allow", then after a delay, configure "advertise".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mailinfo.scissors
</term>
<listitem>
<simpara>
        If true, makes <citerefentry>
<refentrytitle>git-mailinfo</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> (and therefore
        <citerefentry>
<refentrytitle>git-am</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>) act by default as if the --scissors option
        was provided on the command-line. When active, this features
        removes everything from the message body before a scissors
        line (i.e. consisting mainly of "&gt;8", "8&lt;" and "-").
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mailmap.file
</term>
<listitem>
<simpara>
        The location of an augmenting mailmap file. The default
        mailmap, located in the root of the repository, is loaded
        first, then the mailmap file pointed to by this variable.
        The location of the mailmap file may be in a repository
        subdirectory, or somewhere outside of the repository itself.
        See <citerefentry>
<refentrytitle>git-shortlog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <citerefentry>
<refentrytitle>git-blame</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mailmap.blob
</term>
<listitem>
<simpara>
        Like <literal>mailmap.file</literal>, but consider the value as a reference to a
        blob in the repository. If both <literal>mailmap.file</literal> and
        <literal>mailmap.blob</literal> are given, both are parsed, with entries from
        <literal>mailmap.file</literal> taking precedence. In a bare repository, this
        defaults to <literal>HEAD:.mailmap</literal>. In a non-bare repository, it
        defaults to empty.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.auto
</term>
<listitem>
<simpara>
        This boolean config option controls whether some commands run
        <literal>git maintenance run --auto</literal> after doing their normal work. Defaults
        to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.strategy
</term>
<listitem>
<simpara>
        This string config option provides a way to specify one of a few
        recommended schedules for background maintenance. This only affects
        which tasks are run during <literal>git maintenance run --schedule=X</literal>
        commands, provided no <literal>--task=&lt;task&gt;</literal> arguments are provided.
        Further, if a <literal>maintenance.&lt;task&gt;.schedule</literal> config value is set,
        then that value is used instead of the one provided by
        <literal>maintenance.strategy</literal>. The possible strategy strings are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>none</literal>: This default setting implies no task are run at any schedule.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>incremental</literal>: This setting optimizes for performing small maintenance
  activities that do not delete any data. This does not schedule the <literal>gc</literal>
  task, but runs the <literal>prefetch</literal> and <literal>commit-graph</literal> tasks hourly, the
  <literal>loose-objects</literal> and <literal>incremental-repack</literal> tasks daily, and the <literal>pack-refs</literal>
  task weekly.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.&lt;task&gt;.enabled
</term>
<listitem>
<simpara>
        This boolean config option controls whether the maintenance task
        with name <literal>&lt;task&gt;</literal> is run when no <literal>--task</literal> option is specified to
        <literal>git maintenance run</literal>. These config values are ignored if a
        <literal>--task</literal> option exists. By default, only <literal>maintenance.gc.enabled</literal>
        is true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.&lt;task&gt;.schedule
</term>
<listitem>
<simpara>
        This config option controls whether or not the given <literal>&lt;task&gt;</literal> runs
        during a <literal>git maintenance run --schedule=&lt;frequency&gt;</literal> command. The
        value must be one of "hourly", "daily", or "weekly".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.commit-graph.auto
</term>
<listitem>
<simpara>
        This integer config option controls how often the <literal>commit-graph</literal> task
        should be run as part of <literal>git maintenance run --auto</literal>. If zero, then
        the <literal>commit-graph</literal> task will not run with the <literal>--auto</literal> option. A
        negative value will force the task to run every time. Otherwise, a
        positive value implies the command should run when the number of
        reachable commits that are not in the commit-graph file is at least
        the value of <literal>maintenance.commit-graph.auto</literal>. The default value is
        100.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.loose-objects.auto
</term>
<listitem>
<simpara>
        This integer config option controls how often the <literal>loose-objects</literal> task
        should be run as part of <literal>git maintenance run --auto</literal>. If zero, then
        the <literal>loose-objects</literal> task will not run with the <literal>--auto</literal> option. A
        negative value will force the task to run every time. Otherwise, a
        positive value implies the command should run when the number of
        loose objects is at least the value of <literal>maintenance.loose-objects.auto</literal>.
        The default value is 100.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
maintenance.incremental-repack.auto
</term>
<listitem>
<simpara>
        This integer config option controls how often the <literal>incremental-repack</literal>
        task should be run as part of <literal>git maintenance run --auto</literal>. If zero,
        then the <literal>incremental-repack</literal> task will not run with the <literal>--auto</literal>
        option. A negative value will force the task to run every time.
        Otherwise, a positive value implies the command should run when the
        number of pack-files not in the multi-pack-index is at least the value
        of <literal>maintenance.incremental-repack.auto</literal>. The default value is 10.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
man.viewer
</term>
<listitem>
<simpara>
        Specify the programs that may be used to display help in the
        <emphasis>man</emphasis> format. See <citerefentry>
<refentrytitle>git-help</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
man.&lt;tool&gt;.cmd
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified man viewer. The
        specified command is evaluated in shell with the man page
        passed as argument. (See <citerefentry>
<refentrytitle>git-help</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
man.&lt;tool&gt;.path
</term>
<listitem>
<simpara>
        Override the path for the given tool that may be used to
        display help in the <emphasis>man</emphasis> format. See <citerefentry>
<refentrytitle>git-help</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.conflictStyle
</term>
<listitem>
<simpara>
        Specify the style in which conflicted hunks are written out to
        working tree files upon merge.  The default is "merge", which
        shows a <literal>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</literal> conflict marker, changes made by one side,
        a <literal>=======</literal> marker, changes made by the other side, and then
        a <literal>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</literal> marker.  An alternate style, "diff3", adds a <literal>|||||||</literal>
        marker and the original text before the <literal>=======</literal> marker.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.defaultToUpstream
</term>
<listitem>
<simpara>
        If merge is called without any commit argument, merge the upstream
        branches configured for the current branch by using their last
        observed values stored in their remote-tracking branches.
        The values of the <literal>branch.&lt;current branch&gt;.merge</literal> that name the
        branches at the remote named by <literal>branch.&lt;current branch&gt;.remote</literal>
        are consulted, and then they are mapped via <literal>remote.&lt;remote&gt;.fetch</literal>
        to their corresponding remote-tracking branches, and the tips of
        these tracking branches are merged. Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.ff
</term>
<listitem>
<simpara>
        By default, Git does not create an extra merge commit when merging
        a commit that is a descendant of the current commit. Instead, the
        tip of the current branch is fast-forwarded. When set to <literal>false</literal>,
        this variable tells Git to create an extra merge commit in such
        a case (equivalent to giving the <literal>--no-ff</literal> option from the command
        line). When set to <literal>only</literal>, only such fast-forward merges are
        allowed (equivalent to giving the <literal>--ff-only</literal> option from the
        command line).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.verifySignatures
</term>
<listitem>
<simpara>
        If true, this is equivalent to the --verify-signatures command
        line option. See <citerefentry>
<refentrytitle>git-merge</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.branchdesc
</term>
<listitem>
<simpara>
        In addition to branch names, populate the log message with
        the branch description text associated with them.  Defaults
        to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.log
</term>
<listitem>
<simpara>
        In addition to branch names, populate the log message with at
        most the specified number of one-line descriptions from the
        actual commits that are being merged.  Defaults to false, and
        true is a synonym for 20.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.suppressDest
</term>
<listitem>
<simpara>
        By adding a glob that matches the names of integration
        branches to this multi-valued configuration variable, the
        default merge message computed for merges into these
        integration branches will omit "into &lt;branch name&gt;" from
        its title.
</simpara>
<simpara>An element with an empty value can be used to clear the list
of globs accumulated from previous configuration entries.
When there is no <literal>merge.suppressDest</literal> variable defined, the
default value of <literal>master</literal> is used for backward compatibility.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.renameLimit
</term>
<listitem>
<simpara>
        The number of files to consider in the exhaustive portion of
        rename detection during a merge.  If not specified, defaults
        to the value of diff.renameLimit.  If neither
        merge.renameLimit nor diff.renameLimit are specified,
        currently defaults to 7000.  This setting has no effect if
        rename detection is turned off.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.renames
</term>
<listitem>
<simpara>
        Whether Git detects renames.  If set to "false", rename detection
        is disabled. If set to "true", basic rename detection is enabled.
        Defaults to the value of diff.renames.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.directoryRenames
</term>
<listitem>
<simpara>
        Whether Git detects directory renames, affecting what happens at
        merge time to new files added to a directory on one side of
        history when that directory was renamed on the other side of
        history.  If merge.directoryRenames is set to "false", directory
        rename detection is disabled, meaning that such new files will be
        left behind in the old directory.  If set to "true", directory
        rename detection is enabled, meaning that such new files will be
        moved into the new directory.  If set to "conflict", a conflict
        will be reported for such paths.  If merge.renames is false,
        merge.directoryRenames is ignored and treated as false.  Defaults
        to "conflict".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.renormalize
</term>
<listitem>
<simpara>
        Tell Git that canonical representation of files in the
        repository has changed over time (e.g. earlier commits record
        text files with CRLF line endings, but recent ones use LF line
        endings).  In such a repository, Git can convert the data
        recorded in commits to a canonical form before performing a
        merge to reduce unnecessary conflicts.  For more information,
        see section "Merging branches with differing checkin/checkout
        attributes" in <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.stat
</term>
<listitem>
<simpara>
        Whether to print the diffstat between ORIG_HEAD and the merge result
        at the end of the merge.  True by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.autoStash
</term>
<listitem>
<simpara>
        When set to true, automatically create a temporary stash entry
        before the operation begins, and apply it after the operation
        ends.  This means that you can run merge on a dirty worktree.
        However, use with care: the final stash application after a
        successful merge might result in non-trivial conflicts.
        This option can be overridden by the <literal>--no-autostash</literal> and
        <literal>--autostash</literal> options of <citerefentry>
<refentrytitle>git-merge</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.tool
</term>
<listitem>
<simpara>
        Controls which merge tool is used by <citerefentry>
<refentrytitle>git-mergetool</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        The list below shows the valid built-in values.
        Any other value is treated as a custom merge tool and requires
        that a corresponding mergetool.&lt;tool&gt;.cmd variable is defined.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.guitool
</term>
<listitem>
<simpara>
        Controls which merge tool is used by <citerefentry>
<refentrytitle>git-mergetool</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> when the
        -g/--gui flag is specified. The list below shows the valid built-in values.
        Any other value is treated as a custom merge tool and requires that a
        corresponding mergetool.&lt;guitool&gt;.cmd variable is defined.
</simpara>
<itemizedlist>
<listitem>
<simpara>
araxis
</simpara>
</listitem>
<listitem>
<simpara>
bc
</simpara>
</listitem>
<listitem>
<simpara>
bc3
</simpara>
</listitem>
<listitem>
<simpara>
bc4
</simpara>
</listitem>
<listitem>
<simpara>
codecompare
</simpara>
</listitem>
<listitem>
<simpara>
deltawalker
</simpara>
</listitem>
<listitem>
<simpara>
diffmerge
</simpara>
</listitem>
<listitem>
<simpara>
diffuse
</simpara>
</listitem>
<listitem>
<simpara>
ecmerge
</simpara>
</listitem>
<listitem>
<simpara>
emerge
</simpara>
</listitem>
<listitem>
<simpara>
examdiff
</simpara>
</listitem>
<listitem>
<simpara>
guiffy
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff1
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff2
</simpara>
</listitem>
<listitem>
<simpara>
gvimdiff3
</simpara>
</listitem>
<listitem>
<simpara>
kdiff3
</simpara>
</listitem>
<listitem>
<simpara>
meld
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff1
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff2
</simpara>
</listitem>
<listitem>
<simpara>
nvimdiff3
</simpara>
</listitem>
<listitem>
<simpara>
opendiff
</simpara>
</listitem>
<listitem>
<simpara>
p4merge
</simpara>
</listitem>
<listitem>
<simpara>
smerge
</simpara>
</listitem>
<listitem>
<simpara>
tkdiff
</simpara>
</listitem>
<listitem>
<simpara>
tortoisemerge
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff1
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff2
</simpara>
</listitem>
<listitem>
<simpara>
vimdiff3
</simpara>
</listitem>
<listitem>
<simpara>
winmerge
</simpara>
</listitem>
<listitem>
<simpara>
xxdiff
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.verbosity
</term>
<listitem>
<simpara>
        Controls the amount of output shown by the recursive merge
        strategy.  Level 0 outputs nothing except a final error
        message if conflicts were detected. Level 1 outputs only
        conflicts, 2 outputs conflicts and file changes.  Level 5 and
        above outputs debugging information.  The default is level 2.
        Can be overridden by the <literal>GIT_MERGE_VERBOSITY</literal> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.name
</term>
<listitem>
<simpara>
        Defines a human-readable name for a custom low-level
        merge driver.  See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.driver
</term>
<listitem>
<simpara>
        Defines the command that implements a custom low-level
        merge driver.  See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
merge.&lt;driver&gt;.recursive
</term>
<listitem>
<simpara>
        Names a low-level merge driver to be used when
        performing an internal merge between common ancestors.
        See <citerefentry>
<refentrytitle>gitattributes</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.&lt;tool&gt;.path
</term>
<listitem>
<simpara>
        Override the path for the given tool.  This is useful in case
        your tool is not in the PATH.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.&lt;tool&gt;.cmd
</term>
<listitem>
<simpara>
        Specify the command to invoke the specified merge tool.  The
        specified command is evaluated in shell with the following
        variables available: <emphasis>BASE</emphasis> is the name of a temporary file
        containing the common base of the files to be merged, if available;
        <emphasis>LOCAL</emphasis> is the name of a temporary file containing the contents of
        the file on the current branch; <emphasis>REMOTE</emphasis> is the name of a temporary
        file containing the contents of the file from the branch being
        merged; <emphasis>MERGED</emphasis> contains the name of the file to which the merge
        tool should write the results of a successful merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.&lt;tool&gt;.hideResolved
</term>
<listitem>
<simpara>
        Allows the user to override the global <literal>mergetool.hideResolved</literal> value
        for a specific tool. See <literal>mergetool.hideResolved</literal> for the full
        description.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.&lt;tool&gt;.trustExitCode
</term>
<listitem>
<simpara>
        For a custom merge command, specify whether the exit code of
        the merge command can be used to determine whether the merge was
        successful.  If this is not set to true then the merge target file
        timestamp is checked and the merge assumed to have been successful
        if the file has been updated, otherwise the user is prompted to
        indicate the success of the merge.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.meld.hasOutput
</term>
<listitem>
<simpara>
        Older versions of <literal>meld</literal> do not support the <literal>--output</literal> option.
        Git will attempt to detect whether <literal>meld</literal> supports <literal>--output</literal>
        by inspecting the output of <literal>meld --help</literal>.  Configuring
        <literal>mergetool.meld.hasOutput</literal> will make Git skip these checks and
        use the configured value instead.  Setting <literal>mergetool.meld.hasOutput</literal>
        to <literal>true</literal> tells Git to unconditionally use the <literal>--output</literal> option,
        and <literal>false</literal> avoids using <literal>--output</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.meld.useAutoMerge
</term>
<listitem>
<simpara>
        When the <literal>--auto-merge</literal> is given, meld will merge all non-conflicting
        parts automatically, highlight the conflicting parts and wait for
        user decision.  Setting <literal>mergetool.meld.useAutoMerge</literal> to <literal>true</literal> tells
        Git to unconditionally use the <literal>--auto-merge</literal> option with <literal>meld</literal>.
        Setting this value to <literal>auto</literal> makes git detect whether <literal>--auto-merge</literal>
        is supported and will only use <literal>--auto-merge</literal> when available.  A
        value of <literal>false</literal> avoids using <literal>--auto-merge</literal> altogether, and is the
        default value.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.hideResolved
</term>
<listitem>
<simpara>
        During a merge Git will automatically resolve as many conflicts as
        possible and write the <emphasis>MERGED</emphasis> file containing conflict markers around
        any conflicts that it cannot resolve; <emphasis>LOCAL</emphasis> and <emphasis>REMOTE</emphasis> normally
        represent the versions of the file from before Git&#8217;s conflict
        resolution. This flag causes <emphasis>LOCAL</emphasis> and <emphasis>REMOTE</emphasis> to be overwriten so
        that only the unresolved conflicts are presented to the merge tool. Can
        be configured per-tool via the <literal>mergetool.&lt;tool&gt;.hideResolved</literal>
        configuration variable. Defaults to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.keepBackup
</term>
<listitem>
<simpara>
        After performing a merge, the original file with conflict markers
        can be saved as a file with a <literal>.orig</literal> extension.  If this variable
        is set to <literal>false</literal> then this file is not preserved.  Defaults to
        <literal>true</literal> (i.e. keep the backup files).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.keepTemporaries
</term>
<listitem>
<simpara>
        When invoking a custom merge tool, Git uses a set of temporary
        files to pass to the tool. If the tool returns an error and this
        variable is set to <literal>true</literal>, then these temporary files will be
        preserved, otherwise they will be removed after the tool has
        exited. Defaults to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.writeToTemp
</term>
<listitem>
<simpara>
        Git writes temporary <emphasis>BASE</emphasis>, <emphasis>LOCAL</emphasis>, and <emphasis>REMOTE</emphasis> versions of
        conflicting files in the worktree by default.  Git will attempt
        to use a temporary directory for these files when set <literal>true</literal>.
        Defaults to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
mergetool.prompt
</term>
<listitem>
<simpara>
        Prompt before each invocation of the merge resolution program.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
notes.mergeStrategy
</term>
<listitem>
<simpara>
        Which merge strategy to choose by default when resolving notes
        conflicts.  Must be one of <literal>manual</literal>, <literal>ours</literal>, <literal>theirs</literal>, <literal>union</literal>, or
        <literal>cat_sort_uniq</literal>.  Defaults to <literal>manual</literal>.  See "NOTES MERGE STRATEGIES"
        section of <citerefentry>
<refentrytitle>git-notes</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more information on each strategy.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
notes.&lt;name&gt;.mergeStrategy
</term>
<listitem>
<simpara>
        Which merge strategy to choose when doing a notes merge into
        refs/notes/&lt;name&gt;.  This overrides the more general
        "notes.mergeStrategy".  See the "NOTES MERGE STRATEGIES" section in
        <citerefentry>
<refentrytitle>git-notes</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more information on the available strategies.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
notes.displayRef
</term>
<listitem>
<simpara>
        The (fully qualified) refname from which to show notes when
        showing commit messages.  The value of this variable can be set
        to a glob, in which case notes from all matching refs will be
        shown.  You may also specify this configuration variable
        several times.  A warning will be issued for refs that do not
        exist, but a glob that does not match any refs is silently
        ignored.
</simpara>
<simpara>This setting can be overridden with the <literal>GIT_NOTES_DISPLAY_REF</literal>
environment variable, which must be a colon separated list of refs or
globs.</simpara>
<simpara>The effective value of "core.notesRef" (possibly overridden by
GIT_NOTES_REF) is also implicitly added to the list of refs to be
displayed.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
notes.rewrite.&lt;command&gt;
</term>
<listitem>
<simpara>
        When rewriting commits with &lt;command&gt; (currently <literal>amend</literal> or
        <literal>rebase</literal>) and this variable is set to <literal>true</literal>, Git
        automatically copies your notes from the original to the
        rewritten commit.  Defaults to <literal>true</literal>, but see
        "notes.rewriteRef" below.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
notes.rewriteMode
</term>
<listitem>
<simpara>
        When copying notes during a rewrite (see the
        "notes.rewrite.&lt;command&gt;" option), determines what to do if
        the target commit already has a note.  Must be one of
        <literal>overwrite</literal>, <literal>concatenate</literal>, <literal>cat_sort_uniq</literal>, or <literal>ignore</literal>.
        Defaults to <literal>concatenate</literal>.
</simpara>
<simpara>This setting can be overridden with the <literal>GIT_NOTES_REWRITE_MODE</literal>
environment variable.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
notes.rewriteRef
</term>
<listitem>
<simpara>
        When copying notes during a rewrite, specifies the (fully
        qualified) ref whose notes should be copied.  The ref may be a
        glob, in which case notes in all matching refs will be copied.
        You may also specify this configuration several times.
</simpara>
<simpara>Does not have a default value; you must configure this variable to
enable note rewriting.  Set it to <literal>refs/notes/commits</literal> to enable
rewriting for the default commit notes.</simpara>
<simpara>This setting can be overridden with the <literal>GIT_NOTES_REWRITE_REF</literal>
environment variable, which must be a colon separated list of refs or
globs.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.window
</term>
<listitem>
<simpara>
        The size of the window used by <citerefentry>
<refentrytitle>git-pack-objects</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> when no
        window size is given on the command line. Defaults to 10.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.depth
</term>
<listitem>
<simpara>
        The maximum delta depth used by <citerefentry>
<refentrytitle>git-pack-objects</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> when no
        maximum depth is given on the command line. Defaults to 50.
        Maximum value is 4095.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.windowMemory
</term>
<listitem>
<simpara>
        The maximum size of memory that is consumed by each thread
        in <citerefentry>
<refentrytitle>git-pack-objects</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for pack window memory when
        no limit is given on the command line.  The value can be
        suffixed with "k", "m", or "g".  When left unconfigured (or
        set explicitly to 0), there will be no limit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.compression
</term>
<listitem>
<simpara>
        An integer -1..9, indicating the compression level for objects
        in a pack file. -1 is the zlib default. 0 means no
        compression, and 1..9 are various speed/size tradeoffs, 9 being
        slowest.  If not set,  defaults to core.compression.  If that is
        not set,  defaults to -1, the zlib default, which is "a default
        compromise between speed and compression (currently equivalent
        to level 6)."
</simpara>
<simpara>Note that changing the compression level will not automatically recompress
all existing objects. You can force recompression by passing the -F option
to <citerefentry>
<refentrytitle>git-repack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.allowPackReuse
</term>
<listitem>
<simpara>
        When true, and when reachability bitmaps are enabled,
        pack-objects will try to send parts of the bitmapped packfile
        verbatim. This can reduce memory and CPU usage to serve fetches,
        but might result in sending a slightly larger pack. Defaults to
        true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.island
</term>
<listitem>
<simpara>
        An extended regular expression configuring a set of delta
        islands. See "DELTA ISLANDS" in <citerefentry>
<refentrytitle>git-pack-objects</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.islandCore
</term>
<listitem>
<simpara>
        Specify an island name which gets to have its objects be
        packed first. This creates a kind of pseudo-pack at the front
        of one pack, so that the objects from the specified island are
        hopefully faster to copy into any pack that should be served
        to a user requesting these objects. In practice this means
        that the island specified should likely correspond to what is
        the most commonly cloned in the repo. See also "DELTA ISLANDS"
        in <citerefentry>
<refentrytitle>git-pack-objects</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.deltaCacheSize
</term>
<listitem>
<simpara>
        The maximum memory in bytes used for caching deltas in
        <citerefentry>
<refentrytitle>git-pack-objects</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> before writing them out to a pack.
        This cache is used to speed up the writing object phase by not
        having to recompute the final delta result once the best match
        for all objects is found.  Repacking large repositories on machines
        which are tight with memory might be badly impacted by this though,
        especially if this cache pushes the system into swapping.
        A value of 0 means no limit. The smallest size of 1 byte may be
        used to virtually disable this cache. Defaults to 256 MiB.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.deltaCacheLimit
</term>
<listitem>
<simpara>
        The maximum size of a delta, that is cached in
        <citerefentry>
<refentrytitle>git-pack-objects</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. This cache is used to speed up the
        writing object phase by not having to recompute the final delta
        result once the best match for all objects is found.
        Defaults to 1000. Maximum value is 65535.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.threads
</term>
<listitem>
<simpara>
        Specifies the number of threads to spawn when searching for best
        delta matches.  This requires that <citerefentry>
<refentrytitle>git-pack-objects</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        be compiled with pthreads otherwise this option is ignored with a
        warning. This is meant to reduce packing time on multiprocessor
        machines. The required amount of memory for the delta search window
        is however multiplied by the number of threads.
        Specifying 0 will cause Git to auto-detect the number of CPU&#8217;s
        and set the number of threads accordingly.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.indexVersion
</term>
<listitem>
<simpara>
        Specify the default pack index version.  Valid values are 1 for
        legacy pack index used by Git versions prior to 1.5.2, and 2 for
        the new pack index with capabilities for packs larger than 4 GB
        as well as proper protection against the repacking of corrupted
        packs.  Version 2 is the default.  Note that version 2 is enforced
        and this config option ignored whenever the corresponding pack is
        larger than 2 GB.
</simpara>
<simpara>If you have an old Git that does not understand the version 2 <literal>*.idx</literal> file,
cloning or fetching over a non native protocol (e.g. "http")
that will copy both <literal>*.pack</literal> file and corresponding <literal>*.idx</literal> file from the
other side may give you a repository that cannot be accessed with your
older version of Git. If the <literal>*.pack</literal> file is smaller than 2 GB, however,
you can use <citerefentry>
<refentrytitle>git-index-pack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> on the *.pack file to regenerate
the <literal>*.idx</literal> file.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.packSizeLimit
</term>
<listitem>
<simpara>
        The maximum size of a pack.  This setting only affects
        packing to a file when repacking, i.e. the git:// protocol
        is unaffected.  It can be overridden by the <literal>--max-pack-size</literal>
        option of <citerefentry>
<refentrytitle>git-repack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.  Reaching this limit results
        in the creation of multiple packfiles.
</simpara>
<simpara>Note that this option is rarely useful, and may result in a larger total
on-disk size (because Git will not store deltas between packs), as well
as worse runtime performance (object lookup within multiple packs is
slower than a single pack, and optimizations like reachability bitmaps
cannot cope with multiple packs).</simpara>
<simpara>If you need to actively run Git using smaller packfiles (e.g., because your
filesystem does not support large files), this option may help. But if
your goal is to transmit a packfile over a medium that supports limited
sizes (e.g., removable media that cannot store the whole repository),
you are likely better off creating a single large packfile and splitting
it using a generic multi-volume archive tool (e.g., Unix <literal>split</literal>).</simpara>
<simpara>The minimum size allowed is limited to 1 MiB. The default is unlimited.
Common unit suffixes of <emphasis>k</emphasis>, <emphasis>m</emphasis>, or <emphasis>g</emphasis> are supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.useBitmaps
</term>
<listitem>
<simpara>
        When true, git will use pack bitmaps (if available) when packing
        to stdout (e.g., during the server side of a fetch). Defaults to
        true. You should not generally need to turn this off unless
        you are debugging pack bitmaps.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.useSparse
</term>
<listitem>
<simpara>
        When true, git will default to using the <emphasis>--sparse</emphasis> option in
        <emphasis>git pack-objects</emphasis> when the <emphasis>--revs</emphasis> option is present. This
        algorithm only walks trees that appear in paths that introduce new
        objects. This can have significant performance benefits when
        computing a pack to send a small change. However, it is possible
        that extra objects are added to the pack-file if the included
        commits contain certain types of direct renames. Default is
        <literal>true</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.preferBitmapTips
</term>
<listitem>
<simpara>
        When selecting which commits will receive bitmaps, prefer a
        commit at the tip of any reference that is a suffix of any value
        of this configuration over any other commits in the "selection
        window".
</simpara>
<simpara>Note that setting this configuration to <literal>refs/foo</literal> does not mean that
the commits at the tips of <literal>refs/foo/bar</literal> and <literal>refs/foo/baz</literal> will
necessarily be selected. This is because commits are selected for
bitmaps from within a series of windows of variable length.</simpara>
<simpara>If a commit at the tip of any reference which is a suffix of any value
of this configuration is seen in a window, it is immediately given
preference over any other commit in that window.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.writeBitmaps (deprecated)
</term>
<listitem>
<simpara>
        This is a deprecated synonym for <literal>repack.writeBitmaps</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.writeBitmapHashCache
</term>
<listitem>
<simpara>
        When true, git will include a "hash cache" section in the bitmap
        index (if one is written). This cache can be used to feed git&#8217;s
        delta heuristics, potentially leading to better deltas between
        bitmapped and non-bitmapped objects (e.g., when serving a fetch
        between an older, bitmapped pack and objects that have been
        pushed since the last gc). The downside is that it consumes 4
        bytes per object of disk space. Defaults to true.
</simpara>
<simpara>When writing a multi-pack reachability bitmap, no new namehashes are
computed; instead, any namehashes stored in an existing bitmap are
permuted into their appropriate location when writing a new bitmap.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pack.writeReverseIndex
</term>
<listitem>
<simpara>
        When true, git will write a corresponding .rev file (see:
        <ulink url="../technical/pack-format.html">Documentation/technical/pack-format.txt</ulink>)
        for each new packfile that it writes in all places except for
        <citerefentry>
<refentrytitle>git-fast-import</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and in the bulk checkin mechanism.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pager.&lt;cmd&gt;
</term>
<listitem>
<simpara>
        If the value is boolean, turns on or off pagination of the
        output of a particular Git subcommand when writing to a tty.
        Otherwise, turns on pagination for the subcommand using the
        pager specified by the value of <literal>pager.&lt;cmd&gt;</literal>.  If <literal>--paginate</literal>
        or <literal>--no-pager</literal> is specified on the command line, it takes
        precedence over this option.  To disable pagination for all
        commands, set <literal>core.pager</literal> or <literal>GIT_PAGER</literal> to <literal>cat</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pretty.&lt;name&gt;
</term>
<listitem>
<simpara>
        Alias for a --pretty= format string, as specified in
        <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. Any aliases defined here can be used just
        as the built-in pretty formats could. For example,
        running <literal>git config pretty.changelog "format:* %H %s"</literal>
        would cause the invocation <literal>git log --pretty=changelog</literal>
        to be equivalent to running <literal>git log "--pretty=format:* %H %s"</literal>.
        Note that an alias with the same name as a built-in format
        will be silently ignored.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
protocol.allow
</term>
<listitem>
<simpara>
        If set, provide a user defined default policy for all protocols which
        don&#8217;t explicitly have a policy (<literal>protocol.&lt;name&gt;.allow</literal>).  By default,
        if unset, known-safe protocols (http, https, git, ssh, file) have a
        default policy of <literal>always</literal>, known-dangerous protocols (ext) have a
        default policy of <literal>never</literal>, and all other protocols have a default
        policy of <literal>user</literal>.  Supported policies:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>always</literal> - protocol is always able to be used.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>never</literal> - protocol is never able to be used.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>user</literal> - protocol is only able to be used when <literal>GIT_PROTOCOL_FROM_USER</literal> is
  either unset or has a value of 1.  This policy should be used when you want a
  protocol to be directly usable by the user but don&#8217;t want it used by commands which
  execute clone/fetch/push commands without user input, e.g. recursive
  submodule initialization.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
protocol.&lt;name&gt;.allow
</term>
<listitem>
<simpara>
        Set a policy to be used by protocol <literal>&lt;name&gt;</literal> with clone/fetch/push
        commands. See <literal>protocol.allow</literal> above for the available policies.
</simpara>
<simpara>The protocol names currently used by git are:</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>file</literal>: any local file-based path (including <literal>file://</literal> URLs,
    or local paths)
</simpara>
</listitem>
<listitem>
<simpara>
<literal>git</literal>: the anonymous git protocol over a direct TCP
    connection (or proxy, if configured)
</simpara>
</listitem>
<listitem>
<simpara>
<literal>ssh</literal>: git over ssh (including <literal>host:path</literal> syntax,
    <literal>ssh://</literal>, etc).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>http</literal>: git over http, both "smart http" and "dumb http".
    Note that this does <emphasis>not</emphasis> include <literal>https</literal>; if you want to configure
    both, you must do so individually.
</simpara>
</listitem>
<listitem>
<simpara>
any external helpers are named by their protocol (e.g., use
    <literal>hg</literal> to allow the <literal>git-remote-hg</literal> helper)
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
protocol.version
</term>
<listitem>
<simpara>
        If set, clients will attempt to communicate with a server
        using the specified protocol version.  If the server does
        not support it, communication falls back to version 0.
        If unset, the default is <literal>2</literal>.
        Supported versions:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>0</literal> - the original wire protocol.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>1</literal> - the original wire protocol with the addition of a version string
  in the initial response from the server.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>2</literal> - <ulink url="technical/protocol-v2.html">wire protocol version 2</ulink>.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
pull.ff
</term>
<listitem>
<simpara>
        By default, Git does not create an extra merge commit when merging
        a commit that is a descendant of the current commit. Instead, the
        tip of the current branch is fast-forwarded. When set to <literal>false</literal>,
        this variable tells Git to create an extra merge commit in such
        a case (equivalent to giving the <literal>--no-ff</literal> option from the command
        line). When set to <literal>only</literal>, only such fast-forward merges are
        allowed (equivalent to giving the <literal>--ff-only</literal> option from the
        command line). This setting overrides <literal>merge.ff</literal> when pulling.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pull.rebase
</term>
<listitem>
<simpara>
        When true, rebase branches on top of the fetched branch, instead
        of merging the default branch from the default remote when "git
        pull" is run. See "branch.&lt;name&gt;.rebase" for setting this on a
        per-branch basis.
</simpara>
<simpara>When <literal>merges</literal> (or just <emphasis>m</emphasis>), pass the <literal>--rebase-merges</literal> option to <emphasis>git rebase</emphasis>
so that the local merge commits are included in the rebase (see
<citerefentry>
<refentrytitle>git-rebase</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details).</simpara>
<simpara>When the value is <literal>interactive</literal> (or just <emphasis>i</emphasis>), the rebase is run in interactive
mode.</simpara>
<simpara><emphasis role="strong">NOTE</emphasis>: this is a possibly dangerous operation; do <emphasis role="strong">not</emphasis> use
it unless you understand the implications (see <citerefentry>
<refentrytitle>git-rebase</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
for details).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pull.octopus
</term>
<listitem>
<simpara>
        The default merge strategy to use when pulling multiple branches
        at once.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
pull.twohead
</term>
<listitem>
<simpara>
        The default merge strategy to use when pulling a single branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.default
</term>
<listitem>
<simpara>
        Defines the action <literal>git push</literal> should take if no refspec is
        given (whether from the command-line, config, or elsewhere).
        Different values are well-suited for
        specific workflows; for instance, in a purely central workflow
        (i.e. the fetch source is equal to the push destination),
        <literal>upstream</literal> is probably what you want.  Possible values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>nothing</literal> - do not push anything (error out) unless a refspec is
  given. This is primarily meant for people who want to
  avoid mistakes by always being explicit.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>current</literal> - push the current branch to update a branch with the same
  name on the receiving end.  Works in both central and non-central
  workflows.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>upstream</literal> - push the current branch back to the branch whose
  changes are usually integrated into the current branch (which is
  called <literal>@{upstream}</literal>).  This mode only makes sense if you are
  pushing to the same repository you would normally pull from
  (i.e. central workflow).
</simpara>
</listitem>
<listitem>
<simpara>
<literal>tracking</literal> - This is a deprecated synonym for <literal>upstream</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>simple</literal> - pushes the current branch with the same name on the remote.
</simpara>
<simpara>If you are working on a centralized workflow (pushing to the same repository you
pull from, which is typically <literal>origin</literal>), then you need to configure an upstream
branch with the same name.</simpara>
<simpara>This mode is the default since Git 2.0, and is the safest option suited for
beginners.</simpara>
</listitem>
<listitem>
<simpara>
<literal>matching</literal> - push all branches having the same name on both ends.
  This makes the repository you are pushing to remember the set of
  branches that will be pushed out (e.g. if you always push <emphasis>maint</emphasis>
  and <emphasis>master</emphasis> there and no other branches, the repository you push
  to will have these two branches, and your local <emphasis>maint</emphasis> and
  <emphasis>master</emphasis> will be pushed there).
</simpara>
<simpara>To use this mode effectively, you have to make sure <emphasis>all</emphasis> the
branches you would push out are ready to be pushed out before
running <emphasis>git push</emphasis>, as the whole point of this mode is to allow you
to push all of the branches in one go.  If you usually finish work
on only one branch and push out the result, while other branches are
unfinished, this mode is not for you.  Also this mode is not
suitable for pushing into a shared central repository, as other
people may add new branches there, or update the tip of existing
branches outside your control.</simpara>
<simpara>This used to be the default, but not since Git 2.0 (<literal>simple</literal> is the
new default).</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.followTags
</term>
<listitem>
<simpara>
        If set to true enable <literal>--follow-tags</literal> option by default.  You
        may override this configuration at time of push by specifying
        <literal>--no-follow-tags</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.gpgSign
</term>
<listitem>
<simpara>
        May be set to a boolean value, or the string <emphasis>if-asked</emphasis>. A true
        value causes all pushes to be GPG signed, as if <literal>--signed</literal> is
        passed to <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. The string <emphasis>if-asked</emphasis> causes
        pushes to be signed if the server supports it, as if
        <literal>--signed=if-asked</literal> is passed to <emphasis>git push</emphasis>. A false value may
        override a value from a lower-priority config file. An explicit
        command-line flag always overrides this config option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.pushOption
</term>
<listitem>
<simpara>
        When no <literal>--push-option=&lt;option&gt;</literal> argument is given from the
        command line, <literal>git push</literal> behaves as if each &lt;value&gt; of
        this variable is given as <literal>--push-option=&lt;value&gt;</literal>.
</simpara>
<simpara>This is a multi-valued variable, and an empty value can be used in a
higher priority configuration file (e.g. <literal>.git/config</literal> in a
repository) to clear the values inherited from a lower priority
configuration files (e.g. <literal>$HOME/.gitconfig</literal>).</simpara>
<literallayout class="monospaced">Example:

/etc/gitconfig
  push.pushoption = a
  push.pushoption = b

~/.gitconfig
  push.pushoption = c

repo/.git/config
  push.pushoption =
  push.pushoption = b

This will result in only b (a and c are cleared).</literallayout><simpara></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.recurseSubmodules
</term>
<listitem>
<simpara>
        Make sure all submodule commits used by the revisions to be pushed
        are available on a remote-tracking branch. If the value is <emphasis>check</emphasis>
        then Git will verify that all submodule commits that changed in the
        revisions to be pushed are available on at least one remote of the
        submodule. If any commits are missing, the push will be aborted and
        exit with non-zero status. If the value is <emphasis>on-demand</emphasis> then all
        submodules that changed in the revisions to be pushed will be
        pushed. If on-demand was not able to push all necessary revisions
        it will also be aborted and exit with non-zero status. If the value
        is <emphasis>no</emphasis> then default behavior of ignoring submodules when pushing
        is retained. You may override this configuration at time of push by
        specifying <emphasis>--recurse-submodules=check|on-demand|no</emphasis>.
        If not set, <emphasis>no</emphasis> is used by default, unless <emphasis>submodule.recurse</emphasis> is
        set (in which case a <emphasis>true</emphasis> value means <emphasis>on-demand</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.useForceIfIncludes
</term>
<listitem>
<simpara>
        If set to "true", it is equivalent to specifying
        <literal>--force-if-includes</literal> as an option to <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        in the command line. Adding <literal>--no-force-if-includes</literal> at the
        time of push overrides this configuration setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push.negotiate
</term>
<listitem>
<simpara>
        If set to "true", attempt to reduce the size of the packfile
        sent by rounds of negotiation in which the client and the
        server attempt to find commits in common. If "false", Git will
        rely solely on the server&#8217;s ref advertisement to find commits
        in common.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.backend
</term>
<listitem>
<simpara>
        Default backend to use for rebasing.  Possible choices are
        <emphasis>apply</emphasis> or <emphasis>merge</emphasis>.  In the future, if the merge backend gains
        all remaining capabilities of the apply backend, this setting
        may become unused.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.stat
</term>
<listitem>
<simpara>
        Whether to show a diffstat of what changed upstream since the last
        rebase. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.autoSquash
</term>
<listitem>
<simpara>
        If set to true enable <literal>--autosquash</literal> option by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.autoStash
</term>
<listitem>
<simpara>
        When set to true, automatically create a temporary stash entry
        before the operation begins, and apply it after the operation
        ends.  This means that you can run rebase on a dirty worktree.
        However, use with care: the final stash application after a
        successful rebase might result in non-trivial conflicts.
        This option can be overridden by the <literal>--no-autostash</literal> and
        <literal>--autostash</literal> options of <citerefentry>
<refentrytitle>git-rebase</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.missingCommitsCheck
</term>
<listitem>
<simpara>
        If set to "warn", git rebase -i will print a warning if some
        commits are removed (e.g. a line was deleted), however the
        rebase will still proceed. If set to "error", it will print
        the previous warning and stop the rebase, <emphasis>git rebase
        --edit-todo</emphasis> can then be used to correct the error. If set to
        "ignore", no checking is done.
        To drop a commit without warning or error, use the <literal>drop</literal>
        command in the todo list.
        Defaults to "ignore".
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.instructionFormat
</term>
<listitem>
<simpara>
        A format string, as specified in <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, to be used for the
        todo list during an interactive rebase.  The format will
        automatically have the long commit hash prepended to the format.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.abbreviateCommands
</term>
<listitem>
<simpara>
        If set to true, <literal>git rebase</literal> will use abbreviated command names in the
        todo list resulting in something like this:
</simpara>
<literallayout class="monospaced">        p deadbee The oneline of the commit
        p fa1afe1 The oneline of the next commit
        ...</literallayout><simpara></simpara>
<simpara>instead of:</simpara>
<literallayout class="monospaced">        pick deadbee The oneline of the commit
        pick fa1afe1 The oneline of the next commit
        ...</literallayout><simpara></simpara>
<simpara>Defaults to false.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.rescheduleFailedExec
</term>
<listitem>
<simpara>
        Automatically reschedule <literal>exec</literal> commands that failed. This only makes
        sense in interactive mode (or when an <literal>--exec</literal> option was provided).
        This is the same as specifying the <literal>--reschedule-failed-exec</literal> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rebase.forkPoint
</term>
<listitem>
<simpara>
        If set to false set <literal>--no-fork-point</literal> option by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.advertiseAtomic
</term>
<listitem>
<simpara>
        By default, git-receive-pack will advertise the atomic push
        capability to its clients. If you don&#8217;t want to advertise this
        capability, set this variable to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.advertisePushOptions
</term>
<listitem>
<simpara>
        When set to true, git-receive-pack will advertise the push options
        capability to its clients. False by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.autogc
</term>
<listitem>
<simpara>
        By default, git-receive-pack will run "git-gc --auto" after
        receiving data from git-push and updating refs.  You can stop
        it by setting this variable to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.certNonceSeed
</term>
<listitem>
<simpara>
        By setting this variable to a string, <literal>git receive-pack</literal>
        will accept a <literal>git push --signed</literal> and verifies it by using
        a "nonce" protected by HMAC using this string as a secret
        key.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.certNonceSlop
</term>
<listitem>
<simpara>
        When a <literal>git push --signed</literal> sent a push certificate with a
        "nonce" that was issued by a receive-pack serving the same
        repository within this many seconds, export the "nonce"
        found in the certificate to <literal>GIT_PUSH_CERT_NONCE</literal> to the
        hooks (instead of what the receive-pack asked the sending
        side to include).  This may allow writing checks in
        <literal>pre-receive</literal> and <literal>post-receive</literal> a bit easier.  Instead of
        checking <literal>GIT_PUSH_CERT_NONCE_SLOP</literal> environment variable
        that records by how many seconds the nonce is stale to
        decide if they want to accept the certificate, they only
        can check <literal>GIT_PUSH_CERT_NONCE_STATUS</literal> is <literal>OK</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.fsckObjects
</term>
<listitem>
<simpara>
        If it is set to true, git-receive-pack will check all received
        objects. See <literal>transfer.fsckObjects</literal> for what&#8217;s checked.
        Defaults to false. If not set, the value of
        <literal>transfer.fsckObjects</literal> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.fsck.&lt;msg-id&gt;
</term>
<listitem>
<simpara>
        Acts like <literal>fsck.&lt;msg-id&gt;</literal>, but is used by
        <citerefentry>
<refentrytitle>git-receive-pack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> instead of
        <citerefentry>
<refentrytitle>git-fsck</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. See the <literal>fsck.&lt;msg-id&gt;</literal> documentation for
        details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.fsck.skipList
</term>
<listitem>
<simpara>
        Acts like <literal>fsck.skipList</literal>, but is used by
        <citerefentry>
<refentrytitle>git-receive-pack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> instead of
        <citerefentry>
<refentrytitle>git-fsck</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. See the <literal>fsck.skipList</literal> documentation for
        details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.keepAlive
</term>
<listitem>
<simpara>
        After receiving the pack from the client, <literal>receive-pack</literal> may
        produce no output (if <literal>--quiet</literal> was specified) while processing
        the pack, causing some networks to drop the TCP connection.
        With this option set, if <literal>receive-pack</literal> does not transmit
        any data in this phase for <literal>receive.keepAlive</literal> seconds, it will
        send a short keepalive packet.  The default is 5 seconds; set
        to 0 to disable keepalives entirely.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.unpackLimit
</term>
<listitem>
<simpara>
        If the number of objects received in a push is below this
        limit then the objects will be unpacked into loose object
        files. However if the number of received objects equals or
        exceeds this limit then the received pack will be stored as
        a pack, after adding any missing delta bases.  Storing the
        pack from a push can make the push operation complete faster,
        especially on slow filesystems.  If not set, the value of
        <literal>transfer.unpackLimit</literal> is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.maxInputSize
</term>
<listitem>
<simpara>
        If the size of the incoming pack stream is larger than this
        limit, then git-receive-pack will error out, instead of
        accepting the pack file. If not set or set to 0, then the size
        is unlimited.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.denyDeletes
</term>
<listitem>
<simpara>
        If set to true, git-receive-pack will deny a ref update that deletes
        the ref. Use this to prevent such a ref deletion via a push.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.denyDeleteCurrent
</term>
<listitem>
<simpara>
        If set to true, git-receive-pack will deny a ref update that
        deletes the currently checked out branch of a non-bare repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.denyCurrentBranch
</term>
<listitem>
<simpara>
        If set to true or "refuse", git-receive-pack will deny a ref update
        to the currently checked out branch of a non-bare repository.
        Such a push is potentially dangerous because it brings the HEAD
        out of sync with the index and working tree. If set to "warn",
        print a warning of such a push to stderr, but allow the push to
        proceed. If set to false or "ignore", allow such pushes with no
        message. Defaults to "refuse".
</simpara>
<simpara>Another option is "updateInstead" which will update the working
tree if pushing into the current branch.  This option is
intended for synchronizing working directories when one side is not easily
accessible via interactive ssh (e.g. a live web site, hence the requirement
that the working directory be clean). This mode also comes in handy when
developing inside a VM to test and fix code on different Operating Systems.</simpara>
<simpara>By default, "updateInstead" will refuse the push if the working tree or
the index have any difference from the HEAD, but the <literal>push-to-checkout</literal>
hook can be used to customize this.  See <citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.denyNonFastForwards
</term>
<listitem>
<simpara>
        If set to true, git-receive-pack will deny a ref update which is
        not a fast-forward. Use this to prevent such an update via a push,
        even if that push is forced. This configuration variable is
        set when initializing a shared repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.hideRefs
</term>
<listitem>
<simpara>
        This variable is the same as <literal>transfer.hideRefs</literal>, but applies
        only to <literal>receive-pack</literal> (and so affects pushes, but not fetches).
        An attempt to update or delete a hidden ref by <literal>git push</literal> is
        rejected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.procReceiveRefs
</term>
<listitem>
<simpara>
        This is a multi-valued variable that defines reference prefixes
        to match the commands in <literal>receive-pack</literal>.  Commands matching the
        prefixes will be executed by an external hook "proc-receive",
        instead of the internal <literal>execute_commands</literal> function.  If this
        variable is not defined, the "proc-receive" hook will never be
        used, and all commands will be executed by the internal
        <literal>execute_commands</literal> function.
</simpara>
<simpara>For example, if this variable is set to "refs/for", pushing to reference
such as "refs/for/master" will not create or update a reference named
"refs/for/master", but may create or update a pull request directly by
running the hook "proc-receive".</simpara>
<simpara>Optional modifiers can be provided in the beginning of the value to filter
commands for specific actions: create (a), modify (m), delete (d).
A <literal>!</literal> can be included in the modifiers to negate the reference prefix entry.
E.g.:</simpara>
<literallayout class="monospaced">git config --system --add receive.procReceiveRefs ad:refs/heads
git config --system --add receive.procReceiveRefs !:refs/heads</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.updateServerInfo
</term>
<listitem>
<simpara>
        If set to true, git-receive-pack will run git-update-server-info
        after receiving data from git-push and updating refs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
receive.shallowUpdate
</term>
<listitem>
<simpara>
        If set to true, .git/shallow can be updated when new refs
        require new shallow roots. Otherwise those refs are rejected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.pushDefault
</term>
<listitem>
<simpara>
        The remote to push to by default.  Overrides
        <literal>branch.&lt;name&gt;.remote</literal> for all branches, and is overridden by
        <literal>branch.&lt;name&gt;.pushRemote</literal> for specific branches.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.url
</term>
<listitem>
<simpara>
        The URL of a remote repository.  See <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or
        <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.pushurl
</term>
<listitem>
<simpara>
        The push URL of a remote repository.  See <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.proxy
</term>
<listitem>
<simpara>
        For remotes that require curl (http, https and ftp), the URL to
        the proxy to use for that remote.  Set to the empty string to
        disable proxying for that remote.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.proxyAuthMethod
</term>
<listitem>
<simpara>
        For remotes that require curl (http, https and ftp), the method to use for
        authenticating against the proxy in use (probably set in
        <literal>remote.&lt;name&gt;.proxy</literal>). See <literal>http.proxyAuthMethod</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.fetch
</term>
<listitem>
<simpara>
        The default set of "refspec" for <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. See
        <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.push
</term>
<listitem>
<simpara>
        The default set of "refspec" for <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. See
        <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.mirror
</term>
<listitem>
<simpara>
        If true, pushing to this remote will automatically behave
        as if the <literal>--mirror</literal> option was given on the command line.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.skipDefaultUpdate
</term>
<listitem>
<simpara>
        If true, this remote will be skipped by default when updating
        using <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or the <literal>update</literal> subcommand of
        <citerefentry>
<refentrytitle>git-remote</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.skipFetchAll
</term>
<listitem>
<simpara>
        If true, this remote will be skipped by default when updating
        using <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or the <literal>update</literal> subcommand of
        <citerefentry>
<refentrytitle>git-remote</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.receivepack
</term>
<listitem>
<simpara>
        The default program to execute on the remote side when pushing.  See
        option --receive-pack of <citerefentry>
<refentrytitle>git-push</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.uploadpack
</term>
<listitem>
<simpara>
        The default program to execute on the remote side when fetching.  See
        option --upload-pack of <citerefentry>
<refentrytitle>git-fetch-pack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.tagOpt
</term>
<listitem>
<simpara>
        Setting this value to --no-tags disables automatic tag following when
        fetching from remote &lt;name&gt;. Setting it to --tags will fetch every
        tag from remote &lt;name&gt;, even if they are not reachable from remote
        branch heads. Passing these flags directly to <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> can
        override this setting. See options --tags and --no-tags of
        <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.vcs
</term>
<listitem>
<simpara>
        Setting this to a value &lt;vcs&gt; will cause Git to interact with
        the remote with the git-remote-&lt;vcs&gt; helper.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.prune
</term>
<listitem>
<simpara>
        When set to true, fetching from this remote by default will also
        remove any remote-tracking references that no longer exist on the
        remote (as if the <literal>--prune</literal> option was given on the command line).
        Overrides <literal>fetch.prune</literal> settings, if any.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.pruneTags
</term>
<listitem>
<simpara>
        When set to true, fetching from this remote by default will also
        remove any local tags that no longer exist on the remote if pruning
        is activated in general via <literal>remote.&lt;name&gt;.prune</literal>, <literal>fetch.prune</literal> or
        <literal>--prune</literal>. Overrides <literal>fetch.pruneTags</literal> settings, if any.
</simpara>
<simpara>See also <literal>remote.&lt;name&gt;.prune</literal> and the PRUNING section of
<citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.promisor
</term>
<listitem>
<simpara>
        When set to true, this remote will be used to fetch promisor
        objects.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remote.&lt;name&gt;.partialclonefilter
</term>
<listitem>
<simpara>
        The filter that will be applied when fetching from this
        promisor remote.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remotes.&lt;group&gt;
</term>
<listitem>
<simpara>
        The list of remotes which are fetched by "git remote update
        &lt;group&gt;".  See <citerefentry>
<refentrytitle>git-remote</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
repack.useDeltaBaseOffset
</term>
<listitem>
<simpara>
        By default, <citerefentry>
<refentrytitle>git-repack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> creates packs that use
        delta-base offset. If you need to share your repository with
        Git older than version 1.4.4, either directly or via a dumb
        protocol such as http, then you need to set this option to
        "false" and repack. Access from old Git versions over the
        native protocol are unaffected by this option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
repack.packKeptObjects
</term>
<listitem>
<simpara>
        If set to true, makes <literal>git repack</literal> act as if
        <literal>--pack-kept-objects</literal> was passed. See <citerefentry>
<refentrytitle>git-repack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for
        details. Defaults to <literal>false</literal> normally, but <literal>true</literal> if a bitmap
        index is being written (either via <literal>--write-bitmap-index</literal> or
        <literal>repack.writeBitmaps</literal>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
repack.useDeltaIslands
</term>
<listitem>
<simpara>
        If set to true, makes <literal>git repack</literal> act as if <literal>--delta-islands</literal>
        was passed. Defaults to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
repack.writeBitmaps
</term>
<listitem>
<simpara>
        When true, git will write a bitmap index when packing all
        objects to disk (e.g., when <literal>git repack -a</literal> is run).  This
        index can speed up the "counting objects" phase of subsequent
        packs created for clones and fetches, at the cost of some disk
        space and extra time spent on the initial repack.  This has
        no effect if multiple packfiles are created.
        Defaults to true on bare repos, false otherwise.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rerere.autoUpdate
</term>
<listitem>
<simpara>
        When set to true, <literal>git-rerere</literal> updates the index with the
        resulting contents after it cleanly resolves conflicts using
        previously recorded resolution.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
rerere.enabled
</term>
<listitem>
<simpara>
        Activate recording of resolved conflicts, so that identical
        conflict hunks can be resolved automatically, should they be
        encountered again.  By default, <citerefentry>
<refentrytitle>git-rerere</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> is
        enabled if there is an <literal>rr-cache</literal> directory under the
        <literal>$GIT_DIR</literal>, e.g. if "rerere" was previously used in the
        repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
reset.quiet
</term>
<listitem>
<simpara>
        When set to true, <emphasis>git reset</emphasis> will default to the <emphasis>--quiet</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.identity
</term>
<listitem>
<simpara>
        A configuration identity. When given, causes values in the
        <emphasis>sendemail.&lt;identity&gt;</emphasis> subsection to take precedence over
        values in the <emphasis>sendemail</emphasis> section. The default identity is
        the value of <literal>sendemail.identity</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.smtpEncryption
</term>
<listitem>
<simpara>
        See <citerefentry>
<refentrytitle>git-send-email</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for description.  Note that this
        setting is not subject to the <emphasis>identity</emphasis> mechanism.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.smtpsslcertpath
</term>
<listitem>
<simpara>
        Path to ca-certificates (either a directory or a single file).
        Set it to an empty string to disable certificate verification.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.&lt;identity&gt;.*
</term>
<listitem>
<simpara>
        Identity-specific versions of the <emphasis>sendemail.*</emphasis> parameters
        found below, taking precedence over those when this
        identity is selected, through either the command-line or
        <literal>sendemail.identity</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.aliasesFile
</term>
<term>
sendemail.aliasFileType
</term>
<term>
sendemail.annotate
</term>
<term>
sendemail.bcc
</term>
<term>
sendemail.cc
</term>
<term>
sendemail.ccCmd
</term>
<term>
sendemail.chainReplyTo
</term>
<term>
sendemail.confirm
</term>
<term>
sendemail.envelopeSender
</term>
<term>
sendemail.from
</term>
<term>
sendemail.multiEdit
</term>
<term>
sendemail.signedoffbycc
</term>
<term>
sendemail.smtpPass
</term>
<term>
sendemail.suppresscc
</term>
<term>
sendemail.suppressFrom
</term>
<term>
sendemail.to
</term>
<term>
sendemail.tocmd
</term>
<term>
sendemail.smtpDomain
</term>
<term>
sendemail.smtpServer
</term>
<term>
sendemail.smtpServerPort
</term>
<term>
sendemail.smtpServerOption
</term>
<term>
sendemail.smtpUser
</term>
<term>
sendemail.thread
</term>
<term>
sendemail.transferEncoding
</term>
<term>
sendemail.validate
</term>
<term>
sendemail.xmailer
</term>
<listitem>
<simpara>
        See <citerefentry>
<refentrytitle>git-send-email</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for description.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.signedoffcc (deprecated)
</term>
<listitem>
<simpara>
        Deprecated alias for <literal>sendemail.signedoffbycc</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.smtpBatchSize
</term>
<listitem>
<simpara>
        Number of messages to be sent per connection, after that a relogin
        will happen.  If the value is 0 or undefined, send all messages in
        one connection.
        See also the <literal>--batch-size</literal> option of <citerefentry>
<refentrytitle>git-send-email</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.smtpReloginDelay
</term>
<listitem>
<simpara>
        Seconds wait before reconnecting to smtp server.
        See also the <literal>--relogin-delay</literal> option of <citerefentry>
<refentrytitle>git-send-email</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sendemail.forbidSendmailVariables
</term>
<listitem>
<simpara>
        To avoid common misconfiguration mistakes, <citerefentry>
<refentrytitle>git-send-email</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        will abort with a warning if any configuration options for "sendmail"
        exist. Set this variable to bypass the check.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
sequence.editor
</term>
<listitem>
<simpara>
        Text editor used by <literal>git rebase -i</literal> for editing the rebase instruction file.
        The value is meant to be interpreted by the shell when it is used.
        It can be overridden by the <literal>GIT_SEQUENCE_EDITOR</literal> environment variable.
        When not configured the default commit message editor is used instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
showBranch.default
</term>
<listitem>
<simpara>
        The default set of branches for <citerefentry>
<refentrytitle>git-show-branch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        See <citerefentry>
<refentrytitle>git-show-branch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
splitIndex.maxPercentChange
</term>
<listitem>
<simpara>
        When the split index feature is used, this specifies the
        percent of entries the split index can contain compared to the
        total number of entries in both the split index and the shared
        index before a new shared index is written.
        The value should be between 0 and 100. If the value is 0 then
        a new shared index is always written, if it is 100 a new
        shared index is never written.
        By default the value is 20, so a new shared index is written
        if the number of entries in the split index would be greater
        than 20 percent of the total number of entries.
        See <citerefentry>
<refentrytitle>git-update-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
splitIndex.sharedIndexExpire
</term>
<listitem>
<simpara>
        When the split index feature is used, shared index files that
        were not modified since the time this variable specifies will
        be removed when a new shared index file is created. The value
        "now" expires all entries immediately, and "never" suppresses
        expiration altogether.
        The default value is "2.weeks.ago".
        Note that a shared index file is considered modified (for the
        purpose of expiration) each time a new split-index file is
        either created based on it or read from it.
        See <citerefentry>
<refentrytitle>git-update-index</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
ssh.variant
</term>
<listitem>
<simpara>
        By default, Git determines the command line arguments to use
        based on the basename of the configured SSH command (configured
        using the environment variable <literal>GIT_SSH</literal> or <literal>GIT_SSH_COMMAND</literal> or
        the config setting <literal>core.sshCommand</literal>). If the basename is
        unrecognized, Git will attempt to detect support of OpenSSH
        options by first invoking the configured SSH command with the
        <literal>-G</literal> (print configuration) option and will subsequently use
        OpenSSH options (if that is successful) or no options besides
        the host and remote command (if it fails).
</simpara>
<simpara>The config variable <literal>ssh.variant</literal> can be set to override this detection.
Valid values are <literal>ssh</literal> (to use OpenSSH options), <literal>plink</literal>, <literal>putty</literal>,
<literal>tortoiseplink</literal>, <literal>simple</literal> (no options except the host and remote command).
The default auto-detection can be explicitly requested using the value
<literal>auto</literal>.  Any other value is treated as <literal>ssh</literal>.  This setting can also be
overridden via the environment variable <literal>GIT_SSH_VARIANT</literal>.</simpara>
<simpara>The current command-line parameters used for each variant are as
follows:</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>ssh</literal> - [-p port] [-4] [-6] [-o option] [username@]host command
</simpara>
</listitem>
<listitem>
<simpara>
<literal>simple</literal> - [username@]host command
</simpara>
</listitem>
<listitem>
<simpara>
<literal>plink</literal> or <literal>putty</literal> - [-P port] [-4] [-6] [username@]host command
</simpara>
</listitem>
<listitem>
<simpara>
<literal>tortoiseplink</literal> - [-P port] [-4] [-6] -batch [username@]host command
</simpara>
</listitem>
</itemizedlist>
<simpara>Except for the <literal>simple</literal> variant, command-line parameters are likely to
change as git gains new features.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.relativePaths
</term>
<listitem>
<simpara>
        By default, <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> shows paths relative to the
        current directory. Setting this variable to <literal>false</literal> shows paths
        relative to the repository root (this was the default for Git
        prior to v1.5.4).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.short
</term>
<listitem>
<simpara>
        Set to true to enable --short by default in <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        The option --no-short takes precedence over this variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.branch
</term>
<listitem>
<simpara>
        Set to true to enable --branch by default in <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
        The option --no-branch takes precedence over this variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.aheadBehind
</term>
<listitem>
<simpara>
        Set to true to enable <literal>--ahead-behind</literal> and false to enable
        <literal>--no-ahead-behind</literal> by default in <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for
        non-porcelain status formats.  Defaults to true.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.displayCommentPrefix
</term>
<listitem>
<simpara>
        If set to true, <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> will insert a comment
        prefix before each output line (starting with
        <literal>core.commentChar</literal>, i.e. <literal>#</literal> by default). This was the
        behavior of <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> in Git 1.8.4 and previous.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.renameLimit
</term>
<listitem>
<simpara>
        The number of files to consider when performing rename detection
        in <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. Defaults to
        the value of diff.renameLimit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.renames
</term>
<listitem>
<simpara>
        Whether and how Git detects renames in <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and
        <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> .  If set to "false", rename detection is
        disabled. If set to "true", basic rename detection is enabled.
        If set to "copies" or "copy", Git will detect copies, as well.
        Defaults to the value of diff.renames.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.showStash
</term>
<listitem>
<simpara>
        If set to true, <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> will display the number of
        entries currently stashed away.
        Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.showUntrackedFiles
</term>
<listitem>
<simpara>
        By default, <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> show
        files which are not currently tracked by Git. Directories which
        contain only untracked files, are shown with the directory name
        only. Showing untracked files means that Git needs to lstat() all
        the files in the whole repository, which might be slow on some
        systems. So, this variable controls how the commands displays
        the untracked files. Possible values are:
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>no</literal> - Show no untracked files.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>normal</literal> - Show untracked files and directories.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>all</literal> - Show also individual files in untracked directories.
</simpara>
</listitem>
</itemizedlist>
<simpara>If this variable is not specified, it defaults to <emphasis>normal</emphasis>.
This variable can be overridden with the -u|--untracked-files option
of <citerefentry>
<refentrytitle>git-status</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
status.submoduleSummary
</term>
<listitem>
<simpara>
        Defaults to false.
        If this is set to a non zero number or true (identical to -1 or an
        unlimited number), the submodule summary will be enabled and a
        summary of commits for modified submodules will be shown (see
        --summary-limit option of <citerefentry>
<refentrytitle>git-submodule</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>). Please note
        that the summary output command will be suppressed for all
        submodules when <literal>diff.ignoreSubmodules</literal> is set to <emphasis>all</emphasis> or only
        for those submodules where <literal>submodule.&lt;name&gt;.ignore=all</literal>. The only
        exception to that rule is that status and commit will show staged
        submodule changes. To
        also view the summary for ignored submodules you can either use
        the --ignore-submodules=dirty command-line option or the <emphasis>git
        submodule summary</emphasis> command, which shows a similar output but does
        not honor these settings.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
stash.useBuiltin
</term>
<listitem>
<simpara>
        Unused configuration variable.  Used in Git versions 2.22 to
        2.26 as an escape hatch to enable the legacy shellscript
        implementation of stash.  Now the built-in rewrite of it in C
        is always used. Setting this will emit a warning, to alert any
        remaining users that setting this now does nothing.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
stash.showIncludeUntracked
</term>
<listitem>
<simpara>
        If this is set to true, the <literal>git stash show</literal> command will show
        the untracked files of a stash entry.  Defaults to false. See
        description of <emphasis>show</emphasis> command in <citerefentry>
<refentrytitle>git-stash</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
stash.showPatch
</term>
<listitem>
<simpara>
        If this is set to true, the <literal>git stash show</literal> command without an
        option will show the stash entry in patch form.  Defaults to false.
        See description of <emphasis>show</emphasis> command in <citerefentry>
<refentrytitle>git-stash</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
stash.showStat
</term>
<listitem>
<simpara>
        If this is set to true, the <literal>git stash show</literal> command without an
        option will show diffstat of the stash entry.  Defaults to true.
        See description of <emphasis>show</emphasis> command in <citerefentry>
<refentrytitle>git-stash</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.url
</term>
<listitem>
<simpara>
        The URL for a submodule. This variable is copied from the .gitmodules
        file to the git config via <emphasis>git submodule init</emphasis>. The user can change
        the configured URL before obtaining the submodule via <emphasis>git submodule
        update</emphasis>. If neither submodule.&lt;name&gt;.active or submodule.active are
        set, the presence of this variable is used as a fallback to indicate
        whether the submodule is of interest to git commands.
        See <citerefentry>
<refentrytitle>git-submodule</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <citerefentry>
<refentrytitle>gitmodules</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.update
</term>
<listitem>
<simpara>
        The method by which a submodule is updated by <emphasis>git submodule update</emphasis>,
        which is the only affected command, others such as
        <emphasis>git checkout --recurse-submodules</emphasis> are unaffected. It exists for
        historical reasons, when <emphasis>git submodule</emphasis> was the only command to
        interact with submodules; settings like <literal>submodule.active</literal>
        and <literal>pull.rebase</literal> are more specific. It is populated by
        <literal>git submodule init</literal> from the <citerefentry>
<refentrytitle>gitmodules</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> file.
        See description of <emphasis>update</emphasis> command in <citerefentry>
<refentrytitle>git-submodule</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.branch
</term>
<listitem>
<simpara>
        The remote branch name for a submodule, used by <literal>git submodule
        update --remote</literal>.  Set this option to override the value found in
        the <literal>.gitmodules</literal> file.  See <citerefentry>
<refentrytitle>git-submodule</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and
        <citerefentry>
<refentrytitle>gitmodules</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.fetchRecurseSubmodules
</term>
<listitem>
<simpara>
        This option can be used to control recursive fetching of this
        submodule. It can be overridden by using the --[no-]recurse-submodules
        command-line option to "git fetch" and "git pull".
        This setting will override that from in the <citerefentry>
<refentrytitle>gitmodules</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>
        file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.ignore
</term>
<listitem>
<simpara>
        Defines under what circumstances "git status" and the diff family show
        a submodule as modified. When set to "all", it will never be considered
        modified (but it will nonetheless show up in the output of status and
        commit when it has been staged), "dirty" will ignore all changes
        to the submodules work tree and
        takes only differences between the HEAD of the submodule and the commit
        recorded in the superproject into account. "untracked" will additionally
        let submodules with modified tracked files in their work tree show up.
        Using "none" (the default when this option is not set) also shows
        submodules that have untracked files in their work tree as changed.
        This setting overrides any setting made in .gitmodules for this submodule,
        both settings can be overridden on the command line by using the
        "--ignore-submodules" option. The <emphasis>git submodule</emphasis> commands are not
        affected by this setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.&lt;name&gt;.active
</term>
<listitem>
<simpara>
        Boolean value indicating if the submodule is of interest to git
        commands.  This config option takes precedence over the
        submodule.active config option. See <citerefentry>
<refentrytitle>gitsubmodules</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> for
        details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.active
</term>
<listitem>
<simpara>
        A repeated field which contains a pathspec used to match against a
        submodule&#8217;s path to determine if the submodule is of interest to git
        commands. See <citerefentry>
<refentrytitle>gitsubmodules</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.recurse
</term>
<listitem>
<simpara>
        A boolean indicating if commands should enable the <literal>--recurse-submodules</literal>
        option by default.
        Applies to all commands that support this option
        (<literal>checkout</literal>, <literal>fetch</literal>, <literal>grep</literal>, <literal>pull</literal>, <literal>push</literal>, <literal>read-tree</literal>, <literal>reset</literal>,
        <literal>restore</literal> and <literal>switch</literal>) except <literal>clone</literal> and <literal>ls-files</literal>.
        Defaults to false.
        When set to true, it can be deactivated via the
        <literal>--no-recurse-submodules</literal> option. Note that some Git commands
        lacking this option may call some of the above commands affected by
        <literal>submodule.recurse</literal>; for instance <literal>git remote update</literal> will call
        <literal>git fetch</literal> but does not have a <literal>--no-recurse-submodules</literal> option.
        For these commands a workaround is to temporarily change the
        configuration value by using <literal>git -c submodule.recurse=0</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.fetchJobs
</term>
<listitem>
<simpara>
        Specifies how many submodules are fetched/cloned at the same time.
        A positive integer allows up to that number of submodules fetched
        in parallel. A value of 0 will give some reasonable default.
        If unset, it defaults to 1.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.alternateLocation
</term>
<listitem>
<simpara>
        Specifies how the submodules obtain alternates when submodules are
        cloned. Possible values are <literal>no</literal>, <literal>superproject</literal>.
        By default <literal>no</literal> is assumed, which doesn&#8217;t add references. When the
        value is set to <literal>superproject</literal> the submodule to be cloned computes
        its alternates location relative to the superprojects alternate.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
submodule.alternateErrorStrategy
</term>
<listitem>
<simpara>
        Specifies how to treat errors with the alternates for a submodule
        as computed via <literal>submodule.alternateLocation</literal>. Possible values are
        <literal>ignore</literal>, <literal>info</literal>, <literal>die</literal>. Default is <literal>die</literal>. Note that if set to <literal>ignore</literal>
        or <literal>info</literal>, and if there is an error with the computed alternate, the
        clone proceeds as if no alternate was specified.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
tag.forceSignAnnotated
</term>
<listitem>
<simpara>
        A boolean to specify whether annotated tags created should be GPG signed.
        If <literal>--annotate</literal> is specified on the command line, it takes
        precedence over this option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
tag.sort
</term>
<listitem>
<simpara>
        This variable controls the sort ordering of tags when displayed by
        <citerefentry>
<refentrytitle>git-tag</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. Without the "--sort=&lt;value&gt;" option provided, the
        value of this variable will be used as the default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
tag.gpgSign
</term>
<listitem>
<simpara>
        A boolean to specify whether all tags should be GPG signed.
        Use of this option when running in an automated script can
        result in a large number of tags being signed. It is therefore
        convenient to use an agent to avoid typing your gpg passphrase
        several times. Note that this option doesn&#8217;t affect tag signing
        behavior enabled by "-u &lt;keyid&gt;" or "--local-user=&lt;keyid&gt;" options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
tar.umask
</term>
<listitem>
<simpara>
        This variable can be used to restrict the permission bits of
        tar archive entries.  The default is 0002, which turns off the
        world write bit.  The special value "user" indicates that the
        archiving user&#8217;s umask will be used instead.  See umask(2) and
        <citerefentry>
<refentrytitle>git-archive</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Trace2 config settings are only read from the system and global
config files; repository local and worktree config files and <literal>-c</literal>
command line arguments are not respected.</simpara>
<variablelist>
<varlistentry>
<term>
trace2.normalTarget
</term>
<listitem>
<simpara>
        This variable controls the normal target destination.
        It may be overridden by the <literal>GIT_TRACE2</literal> environment variable.
        The following table shows possible values.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.perfTarget
</term>
<listitem>
<simpara>
        This variable controls the performance target destination.
        It may be overridden by the <literal>GIT_TRACE2_PERF</literal> environment variable.
        The following table shows possible values.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.eventTarget
</term>
<listitem>
<simpara>
        This variable controls the event target destination.
        It may be overridden by the <literal>GIT_TRACE2_EVENT</literal> environment variable.
        The following table shows possible values.
</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>0</literal> or <literal>false</literal> - Disables the target.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>1</literal> or <literal>true</literal> - Writes to <literal>STDERR</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>[2-9]</literal> - Writes to the already opened file descriptor.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>&lt;absolute-pathname&gt;</literal> - Writes to the file in append mode. If the target
already exists and is a directory, the traces will be written to files (one
per process) underneath the given directory.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>af_unix:[&lt;socket_type&gt;:]&lt;absolute-pathname&gt;</literal> - Write to a
Unix DomainSocket (on platforms that support them).  Socket
type can be either <literal>stream</literal> or <literal>dgram</literal>; if omitted Git will
try both.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.normalBrief
</term>
<listitem>
<simpara>
        Boolean.  When true <literal>time</literal>, <literal>filename</literal>, and <literal>line</literal> fields are
        omitted from normal output.  May be overridden by the
        <literal>GIT_TRACE2_BRIEF</literal> environment variable.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.perfBrief
</term>
<listitem>
<simpara>
        Boolean.  When true <literal>time</literal>, <literal>filename</literal>, and <literal>line</literal> fields are
        omitted from PERF output.  May be overridden by the
        <literal>GIT_TRACE2_PERF_BRIEF</literal> environment variable.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.eventBrief
</term>
<listitem>
<simpara>
        Boolean.  When true <literal>time</literal>, <literal>filename</literal>, and <literal>line</literal> fields are
        omitted from event output.  May be overridden by the
        <literal>GIT_TRACE2_EVENT_BRIEF</literal> environment variable.  Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.eventNesting
</term>
<listitem>
<simpara>
        Integer.  Specifies desired depth of nested regions in the
        event output.  Regions deeper than this value will be
        omitted.  May be overridden by the <literal>GIT_TRACE2_EVENT_NESTING</literal>
        environment variable.  Defaults to 2.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.configParams
</term>
<listitem>
<simpara>
        A comma-separated list of patterns of "important" config
        settings that should be recorded in the trace2 output.
        For example, <literal>core.*,remote.*.url</literal> would cause the trace2
        output to contain events listing each configured remote.
        May be overridden by the <literal>GIT_TRACE2_CONFIG_PARAMS</literal> environment
        variable.  Unset by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.envVars
</term>
<listitem>
<simpara>
        A comma-separated list of "important" environment variables that should
        be recorded in the trace2 output.  For example,
        <literal>GIT_HTTP_USER_AGENT,GIT_CONFIG</literal> would cause the trace2 output to
        contain events listing the overrides for HTTP user agent and the
        location of the Git configuration file (assuming any are set).  May be
        overridden by the <literal>GIT_TRACE2_ENV_VARS</literal> environment variable.  Unset by
        default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.destinationDebug
</term>
<listitem>
<simpara>
        Boolean.  When true Git will print error messages when a
        trace target destination cannot be opened for writing.
        By default, these errors are suppressed and tracing is
        silently disabled.  May be overridden by the
        <literal>GIT_TRACE2_DST_DEBUG</literal> environment variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
trace2.maxFiles
</term>
<listitem>
<simpara>
        Integer.  When writing trace files to a target directory, do not
        write additional traces if we would exceed this many files. Instead,
        write a sentinel file that will block further tracing to this
        directory. Defaults to 0, which disables this check.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.fsckObjects
</term>
<listitem>
<simpara>
        When <literal>fetch.fsckObjects</literal> or <literal>receive.fsckObjects</literal> are
        not set, the value of this variable is used instead.
        Defaults to false.
</simpara>
<simpara>When set, the fetch or receive will abort in the case of a malformed
object or a link to a nonexistent object. In addition, various other
issues are checked for, including legacy issues (see <literal>fsck.&lt;msg-id&gt;</literal>),
and potential security issues like the existence of a <literal>.GIT</literal> directory
or a malicious <literal>.gitmodules</literal> file (see the release notes for v2.2.1
and v2.17.1 for details). Other sanity and security checks may be
added in future releases.</simpara>
<simpara>On the receiving side, failing fsckObjects will make those objects
unreachable, see "QUARANTINE ENVIRONMENT" in
<citerefentry>
<refentrytitle>git-receive-pack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. On the fetch side, malformed objects will
instead be left unreferenced in the repository.</simpara>
<simpara>Due to the non-quarantine nature of the <literal>fetch.fsckObjects</literal>
implementation it cannot be relied upon to leave the object store
clean like <literal>receive.fsckObjects</literal> can.</simpara>
<simpara>As objects are unpacked they&#8217;re written to the object store, so there
can be cases where malicious objects get introduced even though the
"fetch" failed, only to have a subsequent "fetch" succeed because only
new incoming objects are checked, not those that have already been
written to the object store. That difference in behavior should not be
relied upon. In the future, such objects may be quarantined for
"fetch" as well.</simpara>
<simpara>For now, the paranoid need to find some way to emulate the quarantine
environment if they&#8217;d like the same protection as "push". E.g. in the
case of an internal mirror do the mirroring in two steps, one to fetch
the untrusted objects, and then do a second "push" (which will use the
quarantine) to another internal repo, and have internal clients
consume this pushed-to repository, or embargo internal fetches and
only allow them once a full "fsck" has run (and no new fetches have
happened in the meantime).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.hideRefs
</term>
<listitem>
<simpara>
        String(s) <literal>receive-pack</literal> and <literal>upload-pack</literal> use to decide which
        refs to omit from their initial advertisements.  Use more than
        one definition to specify multiple prefix strings. A ref that is
        under the hierarchies listed in the value of this variable is
        excluded, and is hidden when responding to <literal>git push</literal> or <literal>git
        fetch</literal>.  See <literal>receive.hideRefs</literal> and <literal>uploadpack.hideRefs</literal> for
        program-specific versions of this config.
</simpara>
<simpara>You may also include a <literal>!</literal> in front of the ref name to negate the entry,
explicitly exposing it, even if an earlier entry marked it as hidden.
If you have multiple hideRefs values, later entries override earlier ones
(and entries in more-specific config files override less-specific ones).</simpara>
<simpara>If a namespace is in use, the namespace prefix is stripped from each
reference before it is matched against <literal>transfer.hiderefs</literal> patterns. In
order to match refs before stripping, add a <literal>^</literal> in front of the ref name. If
you combine <literal>!</literal> and <literal>^</literal>, <literal>!</literal> must be specified first.</simpara>
<simpara>For example, if <literal>refs/heads/master</literal> is specified in <literal>transfer.hideRefs</literal> and
the current namespace is <literal>foo</literal>, then <literal>refs/namespaces/foo/refs/heads/master</literal>
is omitted from the advertisements. If <literal>uploadpack.allowRefInWant</literal> is set,
<literal>upload-pack</literal> will treat <literal>want-ref refs/heads/master</literal> in a protocol v2
<literal>fetch</literal> command as if <literal>refs/namespaces/foo/refs/heads/master</literal> did not exist.
<literal>receive-pack</literal>, on the other hand, will still advertise the object id the
ref is pointing to without mentioning its name (a so-called ".have" line).</simpara>
<simpara>Even if you hide refs, a client may still be able to steal the target
objects via the techniques described in the "SECURITY" section of the
<citerefentry>
<refentrytitle>gitnamespaces</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> man page; it&#8217;s best to keep private data in a
separate repository.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.unpackLimit
</term>
<listitem>
<simpara>
        When <literal>fetch.unpackLimit</literal> or <literal>receive.unpackLimit</literal> are
        not set, the value of this variable is used instead.
        The default value is 100.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
transfer.advertiseSID
</term>
<listitem>
<simpara>
        Boolean. When true, client and server processes will advertise their
        unique session IDs to their remote counterpart. Defaults to false.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadarchive.allowUnreachable
</term>
<listitem>
<simpara>
        If true, allow clients to use <literal>git archive --remote</literal> to request
        any tree, whether reachable from the ref tips or not. See the
        discussion in the "SECURITY" section of
        <citerefentry>
<refentrytitle>git-upload-archive</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more details. Defaults to
        <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.hideRefs
</term>
<listitem>
<simpara>
        This variable is the same as <literal>transfer.hideRefs</literal>, but applies
        only to <literal>upload-pack</literal> (and so affects only fetches, not pushes).
        An attempt to fetch a hidden ref by <literal>git fetch</literal> will fail.  See
        also <literal>uploadpack.allowTipSHA1InWant</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.allowTipSHA1InWant
</term>
<listitem>
<simpara>
        When <literal>uploadpack.hideRefs</literal> is in effect, allow <literal>upload-pack</literal>
        to accept a fetch request that asks for an object at the tip
        of a hidden ref (by default, such a request is rejected).
        See also <literal>uploadpack.hideRefs</literal>.  Even if this is false, a client
        may be able to steal objects via the techniques described in the
        "SECURITY" section of the <citerefentry>
<refentrytitle>gitnamespaces</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> man page; it&#8217;s
        best to keep private data in a separate repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.allowReachableSHA1InWant
</term>
<listitem>
<simpara>
        Allow <literal>upload-pack</literal> to accept a fetch request that asks for an
        object that is reachable from any ref tip. However, note that
        calculating object reachability is computationally expensive.
        Defaults to <literal>false</literal>.  Even if this is false, a client may be able
        to steal objects via the techniques described in the "SECURITY"
        section of the <citerefentry>
<refentrytitle>gitnamespaces</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> man page; it&#8217;s best to
        keep private data in a separate repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.allowAnySHA1InWant
</term>
<listitem>
<simpara>
        Allow <literal>upload-pack</literal> to accept a fetch request that asks for any
        object at all.
        Defaults to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.keepAlive
</term>
<listitem>
<simpara>
        When <literal>upload-pack</literal> has started <literal>pack-objects</literal>, there may be a
        quiet period while <literal>pack-objects</literal> prepares the pack. Normally
        it would output progress information, but if <literal>--quiet</literal> was used
        for the fetch, <literal>pack-objects</literal> will output nothing at all until
        the pack data begins. Some clients and networks may consider
        the server to be hung and give up. Setting this option instructs
        <literal>upload-pack</literal> to send an empty keepalive packet every
        <literal>uploadpack.keepAlive</literal> seconds. Setting this option to 0
        disables keepalive packets entirely. The default is 5 seconds.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.packObjectsHook
</term>
<listitem>
<simpara>
        If this option is set, when <literal>upload-pack</literal> would run
        <literal>git pack-objects</literal> to create a packfile for a client, it will
        run this shell command instead.  The <literal>pack-objects</literal> command and
        arguments it <emphasis>would</emphasis> have run (including the <literal>git pack-objects</literal>
        at the beginning) are appended to the shell command. The stdin
        and stdout of the hook are treated as if <literal>pack-objects</literal> itself
        was run. I.e., <literal>upload-pack</literal> will feed input intended for
        <literal>pack-objects</literal> to the hook, and expects a completed packfile on
        stdout.
</simpara>
<simpara>Note that this configuration variable is ignored if it is seen in the
repository-level config (this is a safety measure against fetching from
untrusted repositories).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.allowFilter
</term>
<listitem>
<simpara>
        If this option is set, <literal>upload-pack</literal> will support partial
        clone and partial fetch object filtering.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpackfilter.allow
</term>
<listitem>
<simpara>
        Provides a default value for unspecified object filters (see: the
        below configuration variable). If set to <literal>true</literal>, this will also
        enable all filters which get added in the future.
        Defaults to <literal>true</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpackfilter.&lt;filter&gt;.allow
</term>
<listitem>
<simpara>
        Explicitly allow or ban the object filter corresponding to
        <literal>&lt;filter&gt;</literal>, where <literal>&lt;filter&gt;</literal> may be one of: <literal>blob:none</literal>,
        <literal>blob:limit</literal>, <literal>object:type</literal>, <literal>tree</literal>, <literal>sparse:oid</literal>, or <literal>combine</literal>.
        If using combined filters, both <literal>combine</literal> and all of the nested
        filter kinds must be allowed. Defaults to <literal>uploadpackfilter.allow</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpackfilter.tree.maxDepth
</term>
<listitem>
<simpara>
        Only allow <literal>--filter=tree:&lt;n&gt;</literal> when <literal>&lt;n&gt;</literal> is no more than the value of
        <literal>uploadpackfilter.tree.maxDepth</literal>. If set, this also implies
        <literal>uploadpackfilter.tree.allow=true</literal>, unless this configuration
        variable had already been set. Has no effect if unset.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
uploadpack.allowRefInWant
</term>
<listitem>
<simpara>
        If this option is set, <literal>upload-pack</literal> will support the <literal>ref-in-want</literal>
        feature of the protocol version 2 <literal>fetch</literal> command.  This feature
        is intended for the benefit of load-balanced servers which may
        not have the same view of what OIDs their refs point to due to
        replication delay.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
url.&lt;base&gt;.insteadOf
</term>
<listitem>
<simpara>
        Any URL that starts with this value will be rewritten to
        start, instead, with &lt;base&gt;. In cases where some site serves a
        large number of repositories, and serves them with multiple
        access methods, and some users need to use different access
        methods, this feature allows people to specify any of the
        equivalent URLs and have Git automatically rewrite the URL to
        the best alternative for the particular user, even for a
        never-before-seen repository on the site.  When more than one
        insteadOf strings match a given URL, the longest match is used.
</simpara>
<simpara>Note that any protocol restrictions will be applied to the rewritten
URL. If the rewrite changes the URL to use a custom protocol or remote
helper, you may need to adjust the <literal>protocol.*.allow</literal> config to permit
the request.  In particular, protocols you expect to use for submodules
must be set to <literal>always</literal> rather than the default of <literal>user</literal>. See the
description of <literal>protocol.allow</literal> above.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
url.&lt;base&gt;.pushInsteadOf
</term>
<listitem>
<simpara>
        Any URL that starts with this value will not be pushed to;
        instead, it will be rewritten to start with &lt;base&gt;, and the
        resulting URL will be pushed to. In cases where some site serves
        a large number of repositories, and serves them with multiple
        access methods, some of which do not allow push, this feature
        allows people to specify a pull-only URL and have Git
        automatically use an appropriate URL to push, even for a
        never-before-seen repository on the site.  When more than one
        pushInsteadOf strings match a given URL, the longest match is
        used.  If a remote has an explicit pushurl, Git will ignore this
        setting for that remote.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
user.name
</term>
<term>
user.email
</term>
<term>
author.name
</term>
<term>
author.email
</term>
<term>
committer.name
</term>
<term>
committer.email
</term>
<listitem>
<simpara>
        The <literal>user.name</literal> and <literal>user.email</literal> variables determine what ends
        up in the <literal>author</literal> and <literal>committer</literal> field of commit
        objects.
        If you need the <literal>author</literal> or <literal>committer</literal> to be different, the
        <literal>author.name</literal>, <literal>author.email</literal>, <literal>committer.name</literal> or
        <literal>committer.email</literal> variables can be set.
        Also, all of these can be overridden by the <literal>GIT_AUTHOR_NAME</literal>,
        <literal>GIT_AUTHOR_EMAIL</literal>, <literal>GIT_COMMITTER_NAME</literal>,
        <literal>GIT_COMMITTER_EMAIL</literal> and <literal>EMAIL</literal> environment variables.
</simpara>
<simpara>Note that the <literal>name</literal> forms of these variables conventionally refer to
some form of a personal name.  See <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and the
environment variables section of <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for more information on
these settings and the <literal>credential.username</literal> option if you&#8217;re looking
for authentication credentials instead.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
user.useConfigOnly
</term>
<listitem>
<simpara>
        Instruct Git to avoid trying to guess defaults for <literal>user.email</literal>
        and <literal>user.name</literal>, and instead retrieve the values only from the
        configuration. For example, if you have multiple email addresses
        and would like to use a different one for each repository, then
        with this configuration option set to <literal>true</literal> in the global config
        along with a name, Git will prompt you to set up an email before
        making new commits in a newly cloned repository.
        Defaults to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
user.signingKey
</term>
<listitem>
<simpara>
        If <citerefentry>
<refentrytitle>git-tag</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> or <citerefentry>
<refentrytitle>git-commit</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> is not selecting the
        key you want it to automatically when creating a signed tag or
        commit, you can override the default selection with this variable.
        This option is passed unchanged to gpg&#8217;s --local-user parameter,
        so you may specify a key using any method that gpg supports.
        If gpg.format is set to "ssh" this can contain the literal ssh public
        key (e.g.: "ssh-rsa XXXXXX identifier") or a file which contains it and
        corresponds to the private key used for signing. The private key
        needs to be available via ssh-agent. Alternatively it can be set to
        a file containing a private key directly. If not set git will call
        gpg.ssh.defaultKeyCommand (e.g.: "ssh-add -L") and try to use the first
        key available.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
versionsort.prereleaseSuffix (deprecated)
</term>
<listitem>
<simpara>
        Deprecated alias for <literal>versionsort.suffix</literal>.  Ignored if
        <literal>versionsort.suffix</literal> is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
versionsort.suffix
</term>
<listitem>
<simpara>
        Even when version sort is used in <citerefentry>
<refentrytitle>git-tag</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, tagnames
        with the same base version but different suffixes are still sorted
        lexicographically, resulting e.g. in prerelease tags appearing
        after the main release (e.g. "1.0-rc1" after "1.0").  This
        variable can be specified to determine the sorting order of tags
        with different suffixes.
</simpara>
<simpara>By specifying a single suffix in this variable, any tagname containing
that suffix will appear before the corresponding main release.  E.g. if
the variable is set to "-rc", then all "1.0-rcX" tags will appear before
"1.0".  If specified multiple times, once per suffix, then the order of
suffixes in the configuration will determine the sorting order of tagnames
with those suffixes.  E.g. if "-pre" appears before "-rc" in the
configuration, then all "1.0-preX" tags will be listed before any
"1.0-rcX" tags.  The placement of the main release tag relative to tags
with various suffixes can be determined by specifying the empty suffix
among those other suffixes.  E.g. if the suffixes "-rc", "", "-ck" and
"-bfs" appear in the configuration in this order, then all "v4.8-rcX" tags
are listed first, followed by "v4.8", then "v4.8-ckX" and finally
"v4.8-bfsX".</simpara>
<simpara>If more than one suffixes match the same tagname, then that tagname will
be sorted according to the suffix which starts at the earliest position in
the tagname.  If more than one different matching suffixes start at
that earliest position, then that tagname will be sorted according to the
longest of those suffixes.
The sorting order between different suffixes is undefined if they are
in multiple config files.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
web.browser
</term>
<listitem>
<simpara>
        Specify a web browser that may be used by some commands.
        Currently only <citerefentry>
<refentrytitle>git-instaweb</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <citerefentry>
<refentrytitle>git-help</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        may use it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
worktree.guessRemote
</term>
<listitem>
<simpara>
        If no branch is specified and neither <literal>-b</literal> nor <literal>-B</literal> nor
        <literal>--detach</literal> is used, then <literal>git worktree add</literal> defaults to
        creating a new branch from HEAD.  If <literal>worktree.guessRemote</literal> is
        set to true, <literal>worktree add</literal> tries to find a remote-tracking
        branch whose name uniquely matches the new branch name.  If
        such a branch exists, it is checked out and set as "upstream"
        for the new branch.  If no such match can be found, it falls
        back to creating a new branch from the current HEAD.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
</refsect1>
<refsect1 id="_bugs">
<title>BUGS</title>
<simpara>When using the deprecated <literal>[section.subsection]</literal> syntax, changing a value
will result in adding a multi-line key instead of a change, if the subsection
is given with at least one uppercase character. For example when the config
looks like</simpara>
<literallayout class="monospaced">  [section.subsection]
    key = value1</literallayout><simpara></simpara>
<simpara>and running <literal>git config section.Subsection.key value2</literal> will result in</simpara>
<literallayout class="monospaced">  [section.subsection]
    key = value1
    key = value2</literallayout><simpara></simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
